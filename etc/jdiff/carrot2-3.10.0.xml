<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Fri May 08 12:06:51 CEST 2015 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="carrot2-3.10.0"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath C:\carrot2\gamma.lingo3g\carrot2\etc\jdiff\jdiff.jar -d C:\carrot2\gamma.lingo3g\carrot2\tmp\compatibility-report -encoding utf-8 -protected -quiet -classpath C:\carrot2\gamma.lingo3g\carrot2\applications\carrot2-benchmarks\lib\h2-1.2.132.jar;C:\carrot2\gamma.lingo3g\carrot2\applications\carrot2-benchmarks\lib\junit-benchmarks-0.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\applications\carrot2-dcs\etc\distribution\invoker.jar;C:\carrot2\gamma.lingo3g\carrot2\applications\carrot2-dcs\lib\commons-fileupload-1.2.1.jar;C:\carrot2\gamma.lingo3g\carrot2\applications\carrot2-webapp\lib\jawr-2.4.2.jar;C:\carrot2\gamma.lingo3g\carrot2\core\carrot2-util-text\lib\jflex-1.5.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.carrotsearch.hppc\hppc-0.7.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.carrotsearch.randomizedtesting\junit4-ant-2.1.14.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.carrotsearch.randomizedtesting\randomizedtesting-runner-2.1.14.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.fasterxml.jackson\jackson-annotations-2.5.3.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.fasterxml.jackson\jackson-core-2.5.3.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.fasterxml.jackson\jackson-databind-2.5.3.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.google.guava\guava-18.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.google.guava\jsr305-1.3.9.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.planetj.compression\pjl-comp-filter-1.7.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\com.thoughtworks.qdox\qdox-1.12.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\javax.servlet\servlet-api-2.5.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\morfologik\morfologik-fsa-1.10.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\morfologik\morfologik-polish-1.10.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\morfologik\morfologik-stemming-1.10.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\net.java.dev.rome\jdom-1.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\net.java.dev.rome\rome-1.0.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\net.java.dev.rome\rome-fetcher-1.0.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.commons\commons-codec-1.10.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.commons\commons-collections-3.2.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.commons\commons-io-2.0.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.commons\commons-lang-2.6.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.http\httpclient-4.4.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.http\httpcore-4.4.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.http\httpmime-4.4.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.log4j\log4j-1.2.16.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-analyzers-common-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-analyzers-smartcn-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-backward-codecs-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-core-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-highlighter-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-join-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-memory-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-queries-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-queryparser-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.lucene\lucene-sandbox-5.1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.mahout\mahout-collections-1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.mahout\mahout-math-0.6.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.oro\oro-2.0.8.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.velocity\velocity-1.7.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.velocity\velocity-tools-generic-2.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.xml\resolver.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.xml\serializer.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.xml\xalan-2.7.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.xml\xercesImpl-2.11.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.apache.xml\xml-apis.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.carrot2.antlib\org.carrot2.antlib.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.carrot2.attributes\attributes-binder-1.2.2.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.carrot2.attributes\attributes-processor-1.2.2.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.easymock\easymock-3.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-continuation-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-deploy-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-http-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-io-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-security-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-server-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-servlet-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-servlets-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-util-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-webapp-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.eclipse.jetty\jetty-xml-7.3.1.v20110307.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.fest\fest-assert-1.4.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.fest\fest-mocks-1.0.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.fest\fest-util-1.1.6.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.gargoylesoftware.htmlunit\cssparser-0.9.5.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.gargoylesoftware.htmlunit\htmlunit-2.9-SNAPSHOT.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.gargoylesoftware.htmlunit\htmlunit-core-js-2.9-SNAPSHOT.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.gargoylesoftware.htmlunit\nekohtml-1.9.15-20101026.093020-2.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.gargoylesoftware.htmlunit\sac-1.3.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.junit4-ext\junit-4.10.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.kohsuke.args4j\args4j-2.0.9.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.simpleframework.xml\simple-xml-2.7.1.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.slf4j\jcl-over-slf4j-1.7.12.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.slf4j\slf4j-api-1.7.12.jar;C:\carrot2\gamma.lingo3g\carrot2\lib\org.slf4j\slf4j-log4j12-1.7.12.jar;C:\carrot2\gamma.lingo3g\carrot2\tmp\jar\carrot2-core-3.10.0.jar;c:\Tools\ant\lib\ant.jar -apiname carrot2-3.10.0 -apidir C:\carrot2\gamma.lingo3g\carrot2\tmp\compatibility-report -->
<package name="org.carrot2.clustering.kmeans">
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm -->
  <class name="BisectingKMeansClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="BisectingKMeansClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="language" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Perform clustering for a given language.]]>
      </doc>
    </method>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusterCount" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The number of clusters to create. The algorithm will create at most the specified
 number of clusters.]]>
      </doc>
    </field>
    <field name="maxIterations" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The maximum number of k-means iterations to perform.]]>
      </doc>
    </field>
    <field name="useDimensionalityReduction" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use dimensionality reduction. If <code>true</code>, k-means will be applied on the
 dimensionality-reduced term-document matrix with the number of dimensions being
 equal to twice the number of requested clusters. If the number of dimensions is 
 lower than the number of input documents, reduction will not be performed.
 If <code>false</code>, the k-means will
 be performed directly on the original term-document matrix.]]>
      </doc>
    </field>
    <field name="partitionCount" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Partition count. The number of partitions to create at each k-means clustering
 iteration.]]>
      </doc>
    </field>
    <field name="labelCount" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Label count. The minimum number of labels to return for each cluster.]]>
      </doc>
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Common preprocessing tasks handler.]]>
      </doc>
    </field>
    <field name="matrixBuilder" type="org.carrot2.text.vsm.TermDocumentMatrixBuilder"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document matrix builder for the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="matrixReducer" type="org.carrot2.text.vsm.TermDocumentMatrixReducer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document matrix reducer for the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="labelFormatter" type="org.carrot2.text.preprocessing.LabelFormatter"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cluster label formatter, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClustering"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A helper for performing multilingual clustering.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A very simple implementation of bisecting k-means clustering. Unlike other algorithms
 in Carrot2, this one creates hard clusterings (one document belongs only to one
 cluster). On the other hand, the clusters are labeled only with individual words that
 may not always fully correspond to all documents in the cluster.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor -->
  <class name="BisectingKMeansClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="BisectingKMeansClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="documents" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="clusterCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[The number of clusters to create. The algorithm will create at most the specified
number of clusters.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#clusterCount]]>
      </doc>
    </method>
    <method name="clusterCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[The number of clusters to create. The algorithm will create at most the specified
number of clusters.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#clusterCount]]>
      </doc>
    </method>
    <method name="maxIterations" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[The maximum number of k-means iterations to perform.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#maxIterations]]>
      </doc>
    </method>
    <method name="maxIterations" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[The maximum number of k-means iterations to perform.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#maxIterations]]>
      </doc>
    </method>
    <method name="useDimensionalityReduction" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Use dimensionality reduction. If <code>true</code>, k-means will be applied on the
dimensionality-reduced term-document matrix with the number of dimensions being
equal to twice the number of requested clusters. If the number of dimensions is 
lower than the number of input documents, reduction will not be performed.
If <code>false</code>, the k-means will
be performed directly on the original term-document matrix.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#useDimensionalityReduction]]>
      </doc>
    </method>
    <method name="useDimensionalityReduction" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Use dimensionality reduction. If <code>true</code>, k-means will be applied on the
dimensionality-reduced term-document matrix with the number of dimensions being
equal to twice the number of requested clusters. If the number of dimensions is 
lower than the number of input documents, reduction will not be performed.
If <code>false</code>, the k-means will
be performed directly on the original term-document matrix.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#useDimensionalityReduction]]>
      </doc>
    </method>
    <method name="partitionCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Partition count. The number of partitions to create at each k-means clustering
iteration.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#partitionCount]]>
      </doc>
    </method>
    <method name="partitionCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Partition count. The number of partitions to create at each k-means clustering
iteration.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#partitionCount]]>
      </doc>
    </method>
    <method name="labelCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Label count. The minimum number of labels to return for each cluster.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#labelCount]]>
      </doc>
    </method>
    <method name="labelCount" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Label count. The minimum number of labels to return for each cluster.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#labelCount]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.

 A class that extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline or appropriate IObjectFactory.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.
 
 @see org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="matrixBuilder" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="matrixReducer" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="labelFormatter" return="org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.LabelFormatter} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="multilingualClustering" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.clustering.MultilingualClustering} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.Attributes -->
  <class name="BisectingKMeansClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <field name="clusterCount" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxIterations" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="useDimensionalityReduction" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="partitionCount" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="labelCount" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="matrixBuilder" type="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component.]]>
      </doc>
    </field>
    <field name="matrixReducer" type="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component.]]>
      </doc>
    </field>
    <field name="labelFormatter" type="org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.LabelFormatter} component.]]>
      </doc>
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.clustering.MultilingualClustering} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.Keys -->
  <class name="BisectingKMeansClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BisectingKMeansClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <field name="CLUSTER_COUNT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#clusterCount}.]]>
      </doc>
    </field>
    <field name="MAX_ITERATIONS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#maxIterations}.]]>
      </doc>
    </field>
    <field name="USE_DIMENSIONALITY_REDUCTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#useDimensionalityReduction}.]]>
      </doc>
    </field>
    <field name="PARTITION_COUNT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#partitionCount}.]]>
      </doc>
    </field>
    <field name="LABEL_COUNT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#labelCount}.]]>
      </doc>
    </field>
    <field name="PREPROCESSING_PIPELINE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm#preprocessingPipeline}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithmDescriptor.Keys -->
  <!-- start class org.carrot2.clustering.kmeans.BisectingKMeansProcessingContext -->
  <class name="BisectingKMeansProcessingContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="preprocessingContext" type="org.carrot2.text.preprocessing.PreprocessingContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Preprocessing context]]>
      </doc>
    </field>
    <field name="vsmContext" type="org.carrot2.text.vsm.VectorSpaceModelContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vector space model context]]>
      </doc>
    </field>
    <field name="reducedVsmContext" type="org.carrot2.text.vsm.ReducedVectorSpaceModelContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Dimensionality-reduced vector space model]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Intermediate data structures required during k-means clustering.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.kmeans.BisectingKMeansProcessingContext -->
</package>
<package name="org.carrot2.clustering.lingo">
  <!-- start class org.carrot2.clustering.lingo.ClusterBuilder -->
  <class name="ClusterBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusterBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="phraseLabelBoost" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase label boost. The weight of multi-word labels relative to one-word labels.
 Low values will result in more one-word labels being produced, higher values will
 favor multi-word labels.]]>
      </doc>
    </field>
    <field name="phraseLengthPenaltyStart" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase length penalty start. The phrase length at which the overlong multi-word
 labels should start to be penalized. Phrases of length smaller than
 <code>phraseLengthPenaltyStart</code> will not be penalized.]]>
      </doc>
    </field>
    <field name="phraseLengthPenaltyStop" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase length penalty stop. The phrase length at which the overlong multi-word
 labels should be removed completely. Phrases of length larger than
 <code>phraseLengthPenaltyStop</code> will be removed.]]>
      </doc>
    </field>
    <field name="clusterMergingThreshold" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cluster merging threshold. The percentage overlap between two cluster's documents
 required for the clusters to be merged into one clusters. Low values will result in
 more aggressive merging, which may lead to irrelevant documents in clusters. High
 values will result in fewer clusters being merged, which may lead to very similar
 or duplicated clusters.]]>
      </doc>
    </field>
    <field name="featureScorer" type="org.carrot2.clustering.lingo.IFeatureScorer"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional feature scorer. We don't make it an attribute for now as the core Lingo
 will not have any implementations for this interface.]]>
      </doc>
    </field>
    <field name="labelAssigner" type="org.carrot2.clustering.lingo.ILabelAssigner"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cluster label assignment method.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Builds cluster labels based on the reduced term-document matrix and assigns documents
 to the labels.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.ClusterBuilder -->
  <!-- start class org.carrot2.clustering.lingo.ClusterBuilderDescriptor -->
  <class name="ClusterBuilderDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="ClusterBuilderDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.lingo.ClusterBuilder} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.ClusterBuilderDescriptor -->
  <!-- start class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder -->
  <class name="ClusterBuilderDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusterBuilderDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="phraseLabelBoost" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Phrase label boost. The weight of multi-word labels relative to one-word labels.
Low values will result in more one-word labels being produced, higher values will
favor multi-word labels.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLabelBoost]]>
      </doc>
    </method>
    <method name="phraseLabelBoost" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Phrase label boost. The weight of multi-word labels relative to one-word labels.
Low values will result in more one-word labels being produced, higher values will
favor multi-word labels.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLabelBoost]]>
      </doc>
    </method>
    <method name="phraseLengthPenaltyStart" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Phrase length penalty start. The phrase length at which the overlong multi-word
labels should start to be penalized. Phrases of length smaller than
<code>phraseLengthPenaltyStart</code> will not be penalized.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStart]]>
      </doc>
    </method>
    <method name="phraseLengthPenaltyStart" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Phrase length penalty start. The phrase length at which the overlong multi-word
labels should start to be penalized. Phrases of length smaller than
<code>phraseLengthPenaltyStart</code> will not be penalized.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStart]]>
      </doc>
    </method>
    <method name="phraseLengthPenaltyStop" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Phrase length penalty stop. The phrase length at which the overlong multi-word
labels should be removed completely. Phrases of length larger than
<code>phraseLengthPenaltyStop</code> will be removed.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStop]]>
      </doc>
    </method>
    <method name="phraseLengthPenaltyStop" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Phrase length penalty stop. The phrase length at which the overlong multi-word
labels should be removed completely. Phrases of length larger than
<code>phraseLengthPenaltyStop</code> will be removed.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStop]]>
      </doc>
    </method>
    <method name="clusterMergingThreshold" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Cluster merging threshold. The percentage overlap between two cluster's documents
required for the clusters to be merged into one clusters. Low values will result in
more aggressive merging, which may lead to irrelevant documents in clusters. High
values will result in fewer clusters being merged, which may lead to very similar
or duplicated clusters.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#clusterMergingThreshold]]>
      </doc>
    </method>
    <method name="clusterMergingThreshold" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Cluster merging threshold. The percentage overlap between two cluster's documents
required for the clusters to be merged into one clusters. Low values will result in
more aggressive merging, which may lead to irrelevant documents in clusters. High
values will result in fewer clusters being merged, which may lead to very similar
or duplicated clusters.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#clusterMergingThreshold]]>
      </doc>
    </method>
    <method name="labelAssigner" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.clustering.lingo.ILabelAssigner"/>
      <doc>
      <![CDATA[Cluster label assignment method.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#labelAssigner]]>
      </doc>
    </method>
    <method name="labelAssigner" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Cluster label assignment method.

 A class that extends org.carrot2.clustering.lingo.ILabelAssigner or appropriate IObjectFactory.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#labelAssigner]]>
      </doc>
    </method>
    <method name="labelAssigner" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.clustering.lingo.ILabelAssigner&gt;"/>
      <doc>
      <![CDATA[Cluster label assignment method.
 
 @see org.carrot2.clustering.lingo.ClusterBuilder#labelAssigner]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.lingo.ClusterBuilder} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Attributes -->
  <class name="ClusterBuilderDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="phraseLabelBoost" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="phraseLengthPenaltyStart" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="phraseLengthPenaltyStop" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusterMergingThreshold" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="labelAssigner" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.lingo.ClusterBuilder} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Keys -->
  <class name="ClusterBuilderDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusterBuilderDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="PHRASE_LABEL_BOOST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.ClusterBuilder#phraseLabelBoost}.]]>
      </doc>
    </field>
    <field name="PHRASE_LENGTH_PENALTY_START" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStart}.]]>
      </doc>
    </field>
    <field name="PHRASE_LENGTH_PENALTY_STOP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.ClusterBuilder#phraseLengthPenaltyStop}.]]>
      </doc>
    </field>
    <field name="CLUSTER_MERGING_THRESHOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.ClusterBuilder#clusterMergingThreshold}.]]>
      </doc>
    </field>
    <field name="LABEL_ASSIGNER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.ClusterBuilder#labelAssigner}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.lingo.ClusterBuilder} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Keys -->
  <!-- start interface org.carrot2.clustering.lingo.IFeatureScorer -->
  <interface name="IFeatureScorer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFeatureScores" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lingoContext" type="org.carrot2.clustering.lingo.LingoProcessingContext"/>
      <doc>
      <![CDATA[Returns scores for features from {@link PreprocessingContext#allLabels}. A neutral
 score is 1.0. Anything below 1.0 will lower label score, anything above 1.0 will
 raise it.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generates additional scores for features. Lingo will apply these scores before
 final label selection.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.clustering.lingo.IFeatureScorer -->
  <!-- start interface org.carrot2.clustering.lingo.ILabelAssigner -->
  <interface name="ILabelAssigner"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="assignLabels"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.clustering.lingo.LingoProcessingContext"/>
      <param name="stemCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="filteredRowToStemIndex" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <param name="phraseCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Assigns labels to base vectors found by the matrix factorization. The results must
 be stored in the {@link LingoProcessingContext#clusterLabelFeatureIndex} and
 {@link LingoProcessingContext#clusterLabelScore} arrays.
 
 @param context contains all information about the current clustering request
 @param stemCos base vector -- single stems cosine matrix
 @param filteredRowToStemIndex mapping between row indices of stemCos and indices of
            stems in {@link PreprocessingContext#allStems}
 @param phraseCos base vector -- phrase cosine matrix]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Assigns labels to base vectors obtained from the factorization.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.clustering.lingo.ILabelAssigner -->
  <!-- start class org.carrot2.clustering.lingo.LingoClusteringAlgorithm -->
  <class name="LingoClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="LingoClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs Lingo clustering of {@link #documents}.]]>
      </doc>
    </method>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
 better clusters. Therefore, providing the query is optional but desirable.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents to cluster.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="scoreWeight" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
 will cause Lingo to sort clusters based only on cluster size. Value equal to 1.0
 will cause Lingo to sort clusters based only on cluster score.]]>
      </doc>
    </field>
    <field name="desiredClusterCountBase" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Desired cluster count base. Base factor used to calculate the number of clusters
 based on the number of documents on input. The larger the value, the more clusters
 will be created. The number of clusters created by the algorithm will be
 proportional to the cluster count base, but not in a linear way.]]>
      </doc>
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Common preprocessing tasks handler, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="matrixBuilder" type="org.carrot2.text.vsm.TermDocumentMatrixBuilder"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document matrix builder for the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="matrixReducer" type="org.carrot2.text.vsm.TermDocumentMatrixReducer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document matrix reducer for the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="clusterBuilder" type="org.carrot2.clustering.lingo.ClusterBuilder"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cluster label builder, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="labelFormatter" type="org.carrot2.text.preprocessing.LabelFormatter"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cluster label formatter, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClustering"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A helper for performing multilingual clustering.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Lingo clustering algorithm. Implementation as described in: <i> "Stanis?aw Osi?ski,
 Dawid Weiss: A Concept-Driven Algorithm for Clustering Search Results. IEEE Intelligent
 Systems, May/June, 3 (vol. 20), 2005, pp. 48#54."</i>.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor -->
  <class name="LingoClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LingoClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="LingoClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LingoClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="query" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
better clusters. Therefore, providing the query is optional but desirable.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
better clusters. Therefore, providing the query is optional but desirable.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#query]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="scoreWeight" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
will cause Lingo to sort clusters based only on cluster size. Value equal to 1.0
will cause Lingo to sort clusters based only on cluster score.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#scoreWeight]]>
      </doc>
    </method>
    <method name="scoreWeight" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
will cause Lingo to sort clusters based only on cluster size. Value equal to 1.0
will cause Lingo to sort clusters based only on cluster score.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#scoreWeight]]>
      </doc>
    </method>
    <method name="desiredClusterCountBase" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Desired cluster count base. Base factor used to calculate the number of clusters
based on the number of documents on input. The larger the value, the more clusters
will be created. The number of clusters created by the algorithm will be
proportional to the cluster count base, but not in a linear way.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#desiredClusterCountBase]]>
      </doc>
    </method>
    <method name="desiredClusterCountBase" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Desired cluster count base. Base factor used to calculate the number of clusters
based on the number of documents on input. The larger the value, the more clusters
will be created. The number of clusters created by the algorithm will be
proportional to the cluster count base, but not in a linear way.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#desiredClusterCountBase]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler, contains bindable attributes.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler, contains bindable attributes.

 A class that extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline or appropriate IObjectFactory.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler, contains bindable attributes.
 
 @see org.carrot2.clustering.lingo.LingoClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="matrixBuilder" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="matrixReducer" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="clusterBuilder" return="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.clustering.lingo.ClusterBuilder} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="labelFormatter" return="org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.LabelFormatter} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="multilingualClustering" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.clustering.MultilingualClustering} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.Attributes -->
  <class name="LingoClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <field name="scoreWeight" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="desiredClusterCountBase" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="matrixBuilder" type="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component.]]>
      </doc>
    </field>
    <field name="matrixReducer" type="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component.]]>
      </doc>
    </field>
    <field name="clusterBuilder" type="org.carrot2.clustering.lingo.ClusterBuilderDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.clustering.lingo.ClusterBuilder} component.]]>
      </doc>
    </field>
    <field name="labelFormatter" type="org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.LabelFormatter} component.]]>
      </doc>
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.clustering.MultilingualClustering} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.Keys -->
  <class name="LingoClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LingoClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#query}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <field name="SCORE_WEIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#scoreWeight}.]]>
      </doc>
    </field>
    <field name="DESIRED_CLUSTER_COUNT_BASE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#desiredClusterCountBase}.]]>
      </doc>
    </field>
    <field name="PREPROCESSING_PIPELINE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm#preprocessingPipeline}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.lingo.LingoClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoClusteringAlgorithmDescriptor.Keys -->
  <!-- start class org.carrot2.clustering.lingo.LingoProcessingContext -->
  <class name="LingoProcessingContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="preprocessingContext" type="org.carrot2.text.preprocessing.PreprocessingContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Preprocessing context]]>
      </doc>
    </field>
    <field name="vsmContext" type="org.carrot2.text.vsm.VectorSpaceModelContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vector space model context]]>
      </doc>
    </field>
    <field name="reducedVsmContext" type="org.carrot2.text.vsm.ReducedVectorSpaceModelContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vector space model context]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Stores intermediate data required during Lingo clustering.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.LingoProcessingContext -->
  <!-- start class org.carrot2.clustering.lingo.SimpleLabelAssigner -->
  <class name="SimpleLabelAssigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.clustering.lingo.ILabelAssigner"/>
    <constructor name="SimpleLabelAssigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="assignLabels"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.clustering.lingo.LingoProcessingContext"/>
      <param name="stemCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="filteredRowToStemIndex" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <param name="phraseCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[A simple and fast label assigner. For each base vector chooses the label that maximizes
 the base vector--label term vector cosine similarity. Different vectors can get the
 same label assigned, which means the number of final labels (after duplicate removal)
 may be smaller than the number of base vectors on input. 
 
 @see UniqueLabelAssigner]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.SimpleLabelAssigner -->
  <!-- start class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor -->
  <class name="SimpleLabelAssignerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SimpleLabelAssignerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.lingo.SimpleLabelAssigner} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor -->
  <!-- start class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.AttributeBuilder -->
  <class name="SimpleLabelAssignerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleLabelAssignerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.lingo.SimpleLabelAssigner} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.Attributes -->
  <class name="SimpleLabelAssignerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.lingo.SimpleLabelAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.Keys -->
  <class name="SimpleLabelAssignerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleLabelAssignerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.lingo.SimpleLabelAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.SimpleLabelAssignerDescriptor.Keys -->
  <!-- start class org.carrot2.clustering.lingo.UniqueLabelAssigner -->
  <class name="UniqueLabelAssigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.clustering.lingo.ILabelAssigner"/>
    <constructor name="UniqueLabelAssigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="assignLabels"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.clustering.lingo.LingoProcessingContext"/>
      <param name="stemCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="filteredRowToStemIndex" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <param name="phraseCos" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[Assigns unique labels to each base vector using a greedy algorithm. For each base
 vector chooses the label that maximizes the base vector--label term vector cosine
 similarity and has not been previously selected. Once a label is selected, it will not
 be used to label any other vector. This algorithm does not create duplicate cluster
 labels, which usually means that this assignment method will create more clusters than
 {@link SimpleLabelAssigner}. This method is slightly slower than
 {@link SimpleLabelAssigner}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.UniqueLabelAssigner -->
  <!-- start class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor -->
  <class name="UniqueLabelAssignerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="UniqueLabelAssignerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.lingo.UniqueLabelAssigner} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor -->
  <!-- start class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.AttributeBuilder -->
  <class name="UniqueLabelAssignerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UniqueLabelAssignerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.lingo.UniqueLabelAssigner} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.Attributes -->
  <class name="UniqueLabelAssignerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.lingo.UniqueLabelAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.Keys -->
  <class name="UniqueLabelAssignerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UniqueLabelAssignerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.lingo.UniqueLabelAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.lingo.UniqueLabelAssignerDescriptor.Keys -->
</package>
<package name="org.carrot2.clustering.stc">
  <!-- start class org.carrot2.clustering.stc.STCClusteringAlgorithm -->
  <class name="STCClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="STCClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs STC clustering of {@link #documents}.]]>
      </doc>
    </method>
    <method name="afterProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Memory cleanups.]]>
      </doc>
    </method>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
 better clusters. Therefore, providing the query is optional but desirable.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents to cluster.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.]]>
      </doc>
    </field>
    <field name="ignoreWordIfInFewerDocs" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum word-document recurrences.]]>
      </doc>
    </field>
    <field name="ignoreWordIfInHigherDocsPercent" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum word-document ratio. A number between 0 and 1, if a word exists in more
 snippets than this ratio, it is ignored.]]>
      </doc>
    </field>
    <field name="minBaseClusterScore" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum base cluster score.]]>
      </doc>
    </field>
    <field name="maxBaseClusters" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum base clusters count. Trims the base cluster array after N-th position for
 the merging phase.]]>
      </doc>
    </field>
    <field name="minBaseClusterSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum documents per base cluster.]]>
      </doc>
    </field>
    <field name="maxClusters" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum final clusters.]]>
      </doc>
    </field>
    <field name="mergeThreshold" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Base cluster merge threshold.]]>
      </doc>
    </field>
    <field name="maxPhraseOverlap" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum cluster phrase overlap.]]>
      </doc>
    </field>
    <field name="mostGeneralPhraseCoverage" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum general phrase coverage. Minimum phrase coverage to appear in cluster
 description.]]>
      </doc>
    </field>
    <field name="maxDescPhraseLength" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum words per label. Base clusters formed by phrases with more words than this
 ratio are trimmed.]]>
      </doc>
    </field>
    <field name="maxPhrases" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum phrases per label. Maximum number of phrases from base clusters promoted
 to the cluster's label.]]>
      </doc>
    </field>
    <field name="singleTermBoost" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Single term boost. A factor in calculation of the base cluster score. If greater
 then zero, single-term base clusters are assigned this value regardless of the
 penalty function.]]>
      </doc>
    </field>
    <field name="optimalPhraseLength" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optimal label length. A factor in calculation of the base cluster score.]]>
      </doc>
    </field>
    <field name="optimalPhraseLengthDev" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase length tolerance. A factor in calculation of the base cluster score.]]>
      </doc>
    </field>
    <field name="documentCountBoost" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document count boost. A factor in calculation of the base cluster score, boosting
 the score depending on the number of documents found in the base cluster.]]>
      </doc>
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Common preprocessing tasks handler.]]>
      </doc>
    </field>
    <field name="scoreWeight" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
 will sort clusters based only on cluster size. Value equal to 1.0
 will sort clusters based only on cluster score.]]>
      </doc>
    </field>
    <field name="mergeStemEquivalentBaseClusters" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Merge all stem-equivalent base clusters before running the merge phase.
 
 @see "http://issues.carrot2.org/browse/CARROT-1008"]]>
      </doc>
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClustering"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A helper for performing multilingual clustering.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Suffix Tree Clustering (STC) algorithm. Pretty much as described in: <i>Oren Zamir,
 Oren Etzioni, Grouper: A Dynamic Clustering Interface to Web Search Results, 1999.</i>
 Some liberties were taken wherever STC's description was not clear enough or where we
 thought some improvements could be made.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.stc.STCClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor -->
  <class name="STCClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="STCClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.stc.STCClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="STCClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="STCClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="query" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
better clusters. Therefore, providing the query is optional but desirable.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Query that produced the documents. The query will help the algorithm to create
better clusters. Therefore, providing the query is optional but desirable.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#query]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="ignoreWordIfInFewerDocs" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Minimum word-document recurrences.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInFewerDocs]]>
      </doc>
    </method>
    <method name="ignoreWordIfInFewerDocs" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Minimum word-document recurrences.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInFewerDocs]]>
      </doc>
    </method>
    <method name="ignoreWordIfInHigherDocsPercent" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Maximum word-document ratio. A number between 0 and 1, if a word exists in more
snippets than this ratio, it is ignored.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInHigherDocsPercent]]>
      </doc>
    </method>
    <method name="ignoreWordIfInHigherDocsPercent" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Maximum word-document ratio. A number between 0 and 1, if a word exists in more
snippets than this ratio, it is ignored.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInHigherDocsPercent]]>
      </doc>
    </method>
    <method name="minBaseClusterScore" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Minimum base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterScore]]>
      </doc>
    </method>
    <method name="minBaseClusterScore" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Minimum base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterScore]]>
      </doc>
    </method>
    <method name="maxBaseClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum base clusters count. Trims the base cluster array after N-th position for
the merging phase.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxBaseClusters]]>
      </doc>
    </method>
    <method name="maxBaseClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum base clusters count. Trims the base cluster array after N-th position for
the merging phase.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxBaseClusters]]>
      </doc>
    </method>
    <method name="minBaseClusterSize" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Minimum documents per base cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterSize]]>
      </doc>
    </method>
    <method name="minBaseClusterSize" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Minimum documents per base cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterSize]]>
      </doc>
    </method>
    <method name="maxClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum final clusters.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxClusters]]>
      </doc>
    </method>
    <method name="maxClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum final clusters.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxClusters]]>
      </doc>
    </method>
    <method name="mergeThreshold" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Base cluster merge threshold.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeThreshold]]>
      </doc>
    </method>
    <method name="mergeThreshold" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Base cluster merge threshold.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeThreshold]]>
      </doc>
    </method>
    <method name="maxPhraseOverlap" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Maximum cluster phrase overlap.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhraseOverlap]]>
      </doc>
    </method>
    <method name="maxPhraseOverlap" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Maximum cluster phrase overlap.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhraseOverlap]]>
      </doc>
    </method>
    <method name="mostGeneralPhraseCoverage" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Minimum general phrase coverage. Minimum phrase coverage to appear in cluster
description.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mostGeneralPhraseCoverage]]>
      </doc>
    </method>
    <method name="mostGeneralPhraseCoverage" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Minimum general phrase coverage. Minimum phrase coverage to appear in cluster
description.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mostGeneralPhraseCoverage]]>
      </doc>
    </method>
    <method name="maxDescPhraseLength" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum words per label. Base clusters formed by phrases with more words than this
ratio are trimmed.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxDescPhraseLength]]>
      </doc>
    </method>
    <method name="maxDescPhraseLength" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum words per label. Base clusters formed by phrases with more words than this
ratio are trimmed.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxDescPhraseLength]]>
      </doc>
    </method>
    <method name="maxPhrases" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum phrases per label. Maximum number of phrases from base clusters promoted
to the cluster's label.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhrases]]>
      </doc>
    </method>
    <method name="maxPhrases" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum phrases per label. Maximum number of phrases from base clusters promoted
to the cluster's label.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhrases]]>
      </doc>
    </method>
    <method name="singleTermBoost" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Single term boost. A factor in calculation of the base cluster score. If greater
then zero, single-term base clusters are assigned this value regardless of the
penalty function.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#singleTermBoost]]>
      </doc>
    </method>
    <method name="singleTermBoost" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Single term boost. A factor in calculation of the base cluster score. If greater
then zero, single-term base clusters are assigned this value regardless of the
penalty function.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#singleTermBoost]]>
      </doc>
    </method>
    <method name="optimalPhraseLength" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Optimal label length. A factor in calculation of the base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLength]]>
      </doc>
    </method>
    <method name="optimalPhraseLength" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Optimal label length. A factor in calculation of the base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLength]]>
      </doc>
    </method>
    <method name="optimalPhraseLengthDev" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Phrase length tolerance. A factor in calculation of the base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLengthDev]]>
      </doc>
    </method>
    <method name="optimalPhraseLengthDev" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Phrase length tolerance. A factor in calculation of the base cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLengthDev]]>
      </doc>
    </method>
    <method name="documentCountBoost" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Document count boost. A factor in calculation of the base cluster score, boosting
the score depending on the number of documents found in the base cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#documentCountBoost]]>
      </doc>
    </method>
    <method name="documentCountBoost" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Document count boost. A factor in calculation of the base cluster score, boosting
the score depending on the number of documents found in the base cluster.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#documentCountBoost]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.

 A class that extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline or appropriate IObjectFactory.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="preprocessingPipeline" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline&gt;"/>
      <doc>
      <![CDATA[Common preprocessing tasks handler.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#preprocessingPipeline]]>
      </doc>
    </method>
    <method name="scoreWeight" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
will sort clusters based only on cluster size. Value equal to 1.0
will sort clusters based only on cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#scoreWeight]]>
      </doc>
    </method>
    <method name="scoreWeight" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Balance between cluster score and size during cluster sorting. Value equal to 0.0
will sort clusters based only on cluster size. Value equal to 1.0
will sort clusters based only on cluster score.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#scoreWeight]]>
      </doc>
    </method>
    <method name="mergeStemEquivalentBaseClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Merge all stem-equivalent base clusters before running the merge phase.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeStemEquivalentBaseClusters]]>
      </doc>
    </method>
    <method name="mergeStemEquivalentBaseClusters" return="org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Merge all stem-equivalent base clusters before running the merge phase.
 
 @see org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeStemEquivalentBaseClusters]]>
      </doc>
    </method>
    <method name="multilingualClustering" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.clustering.MultilingualClustering} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.stc.STCClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.Attributes -->
  <class name="STCClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <field name="ignoreWordIfInFewerDocs" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ignoreWordIfInHigherDocsPercent" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="minBaseClusterScore" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxBaseClusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="minBaseClusterSize" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxClusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mergeThreshold" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxPhraseOverlap" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mostGeneralPhraseCoverage" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxDescPhraseLength" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxPhrases" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="singleTermBoost" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="optimalPhraseLength" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="optimalPhraseLengthDev" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documentCountBoost" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="preprocessingPipeline" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="scoreWeight" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mergeStemEquivalentBaseClusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="multilingualClustering" type="org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.clustering.MultilingualClustering} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.stc.STCClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.Keys -->
  <class name="STCClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="STCClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#query}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <field name="IGNORE_WORD_IF_IN_FEWER_DOCS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInFewerDocs}.]]>
      </doc>
    </field>
    <field name="IGNORE_WORD_IF_IN_HIGHER_DOCS_PERCENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#ignoreWordIfInHigherDocsPercent}.]]>
      </doc>
    </field>
    <field name="MIN_BASE_CLUSTER_SCORE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterScore}.]]>
      </doc>
    </field>
    <field name="MAX_BASE_CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#maxBaseClusters}.]]>
      </doc>
    </field>
    <field name="MIN_BASE_CLUSTER_SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#minBaseClusterSize}.]]>
      </doc>
    </field>
    <field name="MAX_CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#maxClusters}.]]>
      </doc>
    </field>
    <field name="MERGE_THRESHOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeThreshold}.]]>
      </doc>
    </field>
    <field name="MAX_PHRASE_OVERLAP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhraseOverlap}.]]>
      </doc>
    </field>
    <field name="MOST_GENERAL_PHRASE_COVERAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#mostGeneralPhraseCoverage}.]]>
      </doc>
    </field>
    <field name="MAX_DESC_PHRASE_LENGTH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#maxDescPhraseLength}.]]>
      </doc>
    </field>
    <field name="MAX_PHRASES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#maxPhrases}.]]>
      </doc>
    </field>
    <field name="SINGLE_TERM_BOOST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#singleTermBoost}.]]>
      </doc>
    </field>
    <field name="OPTIMAL_PHRASE_LENGTH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLength}.]]>
      </doc>
    </field>
    <field name="OPTIMAL_PHRASE_LENGTH_DEV" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#optimalPhraseLengthDev}.]]>
      </doc>
    </field>
    <field name="DOCUMENT_COUNT_BOOST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#documentCountBoost}.]]>
      </doc>
    </field>
    <field name="PREPROCESSING_PIPELINE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#preprocessingPipeline}.]]>
      </doc>
    </field>
    <field name="SCORE_WEIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#scoreWeight}.]]>
      </doc>
    </field>
    <field name="MERGE_STEM_EQUIVALENT_BASE_CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.stc.STCClusteringAlgorithm#mergeStemEquivalentBaseClusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.stc.STCClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.stc.STCClusteringAlgorithmDescriptor.Keys -->
</package>
<package name="org.carrot2.clustering.synthetic">
  <!-- start class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm -->
  <class name="ByFieldClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="ByFieldClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs by URL clustering.]]>
      </doc>
    </method>
    <method name="buildClusterLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="fieldValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[Builds cluster label based on the field value. This implementation returns
 <code>fieldValue.toString()</code>.]]>
      </doc>
    </method>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents to cluster.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.]]>
      </doc>
    </field>
    <field name="fieldName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the field to cluster by. Each non-null scalar field value with distinct
 hash code will give rise to a single cluster, named using the
 value returned by {@link #buildClusterLabel(Object)}. If the field value is a collection,
 the document will be assigned to all clusters corresponding to the values in the
 collection. Note that arrays will not be 'unfolded' in this way.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Clusters documents into a flat structure based on the values of some field of the
 documents. By default the {@link Document#SOURCES} field is used.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor -->
  <class name="ByFieldClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="ByFieldClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="ByFieldClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByFieldClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="documents" return="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.
 
 @see org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="fieldName" return="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Name of the field to cluster by. Each non-null scalar field value with distinct
hash code will give rise to a single cluster, named using the
value returned by {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#buildClusterLabel(Object)}. If the field value is a collection,
the document will be assigned to all clusters corresponding to the values in the
collection. Note that arrays will not be 'unfolded' in this way.
 
 @see org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#fieldName]]>
      </doc>
    </method>
    <method name="fieldName" return="org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Name of the field to cluster by. Each non-null scalar field value with distinct
hash code will give rise to a single cluster, named using the
value returned by {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#buildClusterLabel(Object)}. If the field value is a collection,
the document will be assigned to all clusters corresponding to the values in the
collection. Note that arrays will not be 'unfolded' in this way.
 
 @see org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#fieldName]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.Attributes -->
  <class name="ByFieldClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <field name="fieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.Keys -->
  <class name="ByFieldClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByFieldClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <field name="FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm#fieldName}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByFieldClusteringAlgorithmDescriptor.Keys -->
  <!-- start class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm -->
  <class name="ByUrlClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="ByUrlClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs by URL clustering.]]>
      </doc>
    </method>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents to cluster.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Hierarchically clusters documents according to their content URLs.
 {@link Document#CONTENT_URL} property will be used to obtain a document's URL.
 <p>
 Groups at the top level of the hierarchy will correspond to the last segments of the
 URLs, usually domain suffixes, such as ".com" or ".co.uk". Subgroups will be created
 based on further segments of the URLs, very often domains subdomains, e.g. "yahoo.com",
 "bbc.co.uk" and then e.g. "mail.yahoo.com", "news.yahoo.com". The "www" segment of the
 URLs will be ignored.
 <p>
 Clusters will be ordered by size (number of documents) descendingly; in case of equal
 sizes, alphabetically by URL, see {@link Cluster#BY_REVERSED_SIZE_AND_LABEL_COMPARATOR}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor -->
  <class name="ByUrlClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="ByUrlClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="ByUrlClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByUrlClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="documents" return="org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[Documents to cluster.
 
 @see org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the algorithm.
 
 @see org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.Attributes -->
  <class name="ByUrlClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.Keys -->
  <class name="ByUrlClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByUrlClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.ByUrlClusteringAlgorithmDescriptor.Keys -->
  <!-- start class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm -->
  <class name="PassthroughClusteringAlgorithm" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IClusteringAlgorithm"/>
    <constructor name="PassthroughClusteringAlgorithm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs by URL clustering.]]>
      </doc>
    </method>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Any clusters already provided by the predecessor components. If null,
 an empty array will be provided.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A do-nothing implementation of {@link IClusteringAlgorithm}. If no clusters are
 provided from predecessor components, it produces an empty set of clusters. Otherwise
 it just passes through the input cluster set.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm -->
  <!-- start class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor -->
  <class name="PassthroughClusteringAlgorithmDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="PassthroughClusteringAlgorithmDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor -->
  <!-- start class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.AttributeBuilder -->
  <class name="PassthroughClusteringAlgorithmDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PassthroughClusteringAlgorithmDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="clusters" return="org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Any clusters already provided by the predecessor components. If null,
an empty array will be provided.
 
 @see org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[Any clusters already provided by the predecessor components. If null,
an empty array will be provided.
 
 @see org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Any clusters already provided by the predecessor components. If null,
an empty array will be provided.
 
 @see org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm#clusters]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.Attributes -->
  <class name="PassthroughClusteringAlgorithmDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.Attributes -->
  <!-- start class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.Keys -->
  <class name="PassthroughClusteringAlgorithmDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PassthroughClusteringAlgorithmDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithm} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.clustering.synthetic.PassthroughClusteringAlgorithmDescriptor.Keys -->
</package>
<package name="org.carrot2.core">
  <!-- start class org.carrot2.core.CachingProcessingComponentManager -->
  <class name="CachingProcessingComponentManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponentManager"/>
    <implements name="org.carrot2.core.Controller.IControllerStatisticsProvider"/>
    <constructor name="CachingProcessingComponentManager" type="org.carrot2.core.IProcessingComponentManager, java.lang.Class[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link CachingProcessingComponentManager}.
 
 @param delegate the manager to handle the preparation of the actual processing
            component instances
 @param cachedComponentClasses classes of components whose output should be cached
            by the controller. If a superclass is provided here, e.g.
            {@link IDocumentSource}, all its subclasses will be subject to caching.
            If {@link IProcessingComponent} is provided here, output of all
            components will be cached.]]>
      </doc>
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="configurations" type="org.carrot2.core.ProcessingComponentConfiguration[]"/>
    </method>
    <method name="prepare" return="org.carrot2.core.IProcessingComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;"/>
      <param name="id" type="java.lang.String"/>
      <param name="inputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="outputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="component" type="org.carrot2.core.IProcessingComponent"/>
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatistics" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="CACHE_BYPASS_ATTR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Any values put under this attribute will cause a cache bypass (dropping of the stale value).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An {@link IProcessingComponentManager} that implements processing results caching
 functionality.
 <p>
 This manager wraps some delegate manager (e.g. a
 {@link SimpleProcessingComponentManager} or a {@link PoolingProcessingComponentManager}
 ) and wraps the components the delegate with a functionality that either returns the
 results from cache or performs the processing if the result are not yet cached.
 </p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.CachingProcessingComponentManager -->
  <!-- start class org.carrot2.core.Cluster -->
  <class name="Cluster" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Cluster"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Cluster} with an empty label, no documents and no subclusters.]]>
      </doc>
    </constructor>
    <constructor name="Cluster" type="java.lang.String, org.carrot2.core.Document[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link Cluster} with the provided <code>phrase</code> to be used as the
 cluster's label and <code>documents</code> contained in the cluster.
 
 @param phrase the phrase to form the cluster's label
 @param documents documents contained in the cluster]]>
      </doc>
    </constructor>
    <constructor name="Cluster" type="java.lang.Integer, java.lang.String, org.carrot2.core.Document[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Same as {@link #Cluster(String,Document...)} but allows specifying
 cluster identifier.]]>
      </doc>
    </constructor>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Formats this cluster's label. If there is more than one phrase describing this
 cluster, phrases will be separated by a comma followed by a space, e.g. "Phrase
 one, Phrase two". To format multi-phrase label in a different way, use
 {@link #getPhrases()}.
 
 @return formatted label of this cluster]]>
      </doc>
    </method>
    <method name="getPhrases" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all phrases describing this cluster. The returned list is unmodifiable.
 
 @return phrases describing this cluster]]>
      </doc>
    </method>
    <method name="getSubclusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all subclusters of this cluster. The returned list is unmodifiable.
 
 @return subclusters of this cluster]]>
      </doc>
    </method>
    <method name="getDocuments" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all documents contained in this cluster. The returned list is unmodifiable.
 
 @return documents contained in this cluster]]>
      </doc>
    </method>
    <method name="getAllDocuments" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all documents contained in this cluster and (recursively) all documents
 from this cluster's subclusters. The returned list contains unique documents, i.e.
 if a document is attached to multiple subclusters if this cluster, the document
 will appear only once on the list. The documents are enumerated in breadth first
 order, i.e. first come documents returned by {@link #getDocuments()} and then
 documents from subclusters.
 
 @return all documents from this cluster and its subclusters]]>
      </doc>
    </method>
    <method name="getAllDocuments" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="comparator" type="java.util.Comparator&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Returns all documents in this cluster ordered according to the provided comparator.
 See {@link Document} for common comparators.]]>
      </doc>
    </method>
    <method name="addPhrases" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="phrases" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Adds phrases to the description of this cluster.
 
 @param phrases to be added to the description of this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="addPhrases" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="phrases" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Adds phrases to the description of this cluster.
 
 @param phrases to be added to the description of this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="addDocuments" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="org.carrot2.core.Document[]"/>
      <doc>
      <![CDATA[Adds document to this cluster.
 
 @param documents to be added to this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="addDocument" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="org.carrot2.core.Document"/>
      <doc>
      <![CDATA[Method optimized for single document instead of a vararg.
 @see #addDocuments(Document...)]]>
      </doc>
    </method>
    <method name="addDocuments" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.lang.Iterable&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Adds document to this cluster.
 
 @param documents to be added to this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="addSubclusters" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subclusters" type="org.carrot2.core.Cluster[]"/>
      <doc>
      <![CDATA[Adds subclusters to this cluster
 
 @param subclusters to be added to this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="addSubcluster" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cluster" type="org.carrot2.core.Cluster"/>
      <doc>
      <![CDATA[Adds a subcluster to this cluster.
 @see #addSubclusters(Cluster...)]]>
      </doc>
    </method>
    <method name="addSubclusters" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clusters" type="java.lang.Iterable&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Adds subclusters to this cluster
 
 @param clusters to be added to this cluster
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="getScore" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this cluster's {@value #SCORE} field.]]>
      </doc>
    </method>
    <method name="setScore" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="score" type="java.lang.Double"/>
      <doc>
      <![CDATA[Sets this cluster's {@link #SCORE} field.
 
 @param score score to set
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="getAttribute" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the attribute associated with this cluster under the provided
 <code>key</code>. If there is no attribute under the provided <code>key</code>,
 <code>null</code> will be returned.
 
 @param key of the attribute
 @return attribute value of <code>null</code>]]>
      </doc>
    </method>
    <method name="setAttribute" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="T"/>
      <doc>
      <![CDATA[Associates an attribute with this cluster.
 
 @param key for the attribute
 @param value for the attribute
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="removeAttribute" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Unconditionally remove an attribute from this cluster, if it exists. If there
 is no such attribute, nothing happens.]]>
      </doc>
    </method>
    <method name="getAttributes" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all attributes of this cluster. The returned map is unmodifiable.
 
 @return all attributes of this cluster]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the size of the cluster calculated as the number of unique documents it
 contains, including its subclusters.
 
 @return size of the cluster]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Internal identifier of this cluster within the {@link ProcessingResult}. This
 identifier is assigned dynamically after clusters are passed to
 {@link ProcessingResult}.
 
 @see ProcessingResult]]>
      </doc>
    </method>
    <method name="isOtherTopics" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <code>true</code> if this cluster is the {@link #OTHER_TOPICS} cluster.]]>
      </doc>
    </method>
    <method name="setOtherTopics" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isOtherTopics" type="boolean"/>
      <doc>
      <![CDATA[Sets the {@link #OTHER_TOPICS} attribute of this cluster.
 
 @param isOtherTopics if <code>true</code>, this cluster will be marked as an
            <i>Other Topics</i> cluster.
 @return this cluster for convenience]]>
      </doc>
    </method>
    <method name="byReversedWeightedScoreAndSizeComparator" return="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scoreWeight" type="double"/>
      <doc>
      <![CDATA[Returns a comparator that compares clusters based on the aggregation of their size
 and score. If <code>scoreWeight</code> is 0.0, the order depends only on cluster
 sizes. If <code>scoreWeight</code> is 1.1, the order depends only on cluster
 scores. For <code>scoreWeight</code> values between 0.0 and 1.0, the higher the
 <code>scoreWeight</code>, the more contribution of cluster scores to the order. In
 case of a tie on the aggregated cluster size and score, clusters are compared by
 the natural order of their labels.
 <p>
 <b>Please note</b>: this is a reversed comparator, so "larger" clusters end up
 nearer the beginning of the list being sorted (which is usually the order in which
 the applications want to display clusters).
 </p>]]>
      </doc>
    </method>
    <method name="assignClusterIds"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clusters" type="java.util.Collection&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Assigns sequential identifiers to the provided <code>clusters</code> (and their
 sub-clusters). If any cluster already has an identifier, identifier will not be
 changed but all clusters must have unique identifiers.
 
 @param clusters Clusters to assign identifiers to.
 @throws IllegalArgumentException if the provided clusters contain non-unique
             identifiers.]]>
      </doc>
    </method>
    <method name="flatten" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hierarchical" type="java.util.Collection&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Flattens a hierarchy of clusters into a flat list.]]>
      </doc>
    </method>
    <method name="find" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <param name="clusters" type="java.util.Collection&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Locate the first cluster that has id equal to <code>id</code>. The search includes
 all the clusters in the input and their sub-clusters. The first cluster with
 matching identifier is returned or <code>null</code> if no such cluster could be
 found.]]>
      </doc>
    </method>
    <method name="buildOtherTopics" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allDocuments" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[Builds an "Other Topics" cluster that groups those documents from
 <code>allDocument</code> that were not referenced in any cluster in
 <code>clusters</code>.
 
 @param allDocuments all documents to check against
 @param clusters list of clusters with assigned documents
 @return the "Other Topics" cluster]]>
      </doc>
    </method>
    <method name="buildOtherTopics" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allDocuments" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <param name="label" type="java.lang.String"/>
      <doc>
      <![CDATA[Builds an "Other Topics" cluster that groups those documents from
 <code>allDocument</code> that were not referenced in any cluster in
 <code>clusters</code>.
 
 @param allDocuments all documents to check against
 @param clusters list of clusters with assigned documents
 @param label label for the "Other Topics" group
 @return the "Other Topics" cluster]]>
      </doc>
    </method>
    <method name="appendOtherTopics" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allDocuments" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[If there are unclustered documents, appends the "Other Topics" group to the
 <code>clusters</code>.
 
 @see #buildOtherTopics(List, List)]]>
      </doc>
    </method>
    <method name="appendOtherTopics" return="org.carrot2.core.Cluster"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allDocuments" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <param name="label" type="java.lang.String"/>
      <doc>
      <![CDATA[If there are unclustered documents, appends the "Other Topics" group to the
 <code>clusters</code>.
 
 @see #buildOtherTopics(List, List, String)]]>
      </doc>
    </method>
    <method name="remapDocumentReferences"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="docMapping" type="java.util.IdentityHashMap&lt;org.carrot2.core.Document, org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[An extremely dodgy method that remaps {@link Document} references 
 inside this cluster. This operation is allowed only when the cluster has not been
 assigned an ID yet (so theoretically before the {@link ProcessingResult} has been
 published. While there are theoretically other ways to achieve the same result (copying
 the entire set of clusters) this is the most memory and cpu efficient way.
 
 Only documents from this cluster are remapped, subclusters need to be processed separately.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="OTHER_TOPICS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates that the cluster is an <i>Other Topics</i> cluster. Such a cluster
 contains documents that remain unclustered at given level of cluster hierarchy.
 <p>
 Type of this attribute is {@link Boolean}.
 </p>
 
 @see #setAttribute(String, Object)
 @see #getAttribute(String)]]>
      </doc>
    </field>
    <field name="OTHER_TOPICS_LABEL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default label for the <i>Other Topics</i> cluster.]]>
      </doc>
    </field>
    <field name="SCORE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Score of this cluster that indicates the clustering algorithm's beliefs on the
 quality of this cluster. The exact semantics of the score varies across algorithms.
 <p>
 Type of this attribute is {@link Double}.
 </p>
 
 @see #setAttribute(String, Object)
 @see #getAttribute(String)]]>
      </doc>
    </field>
    <field name="BY_SIZE_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Compares clusters by size as returned by {@link #size()}. Clusters with more
 documents are larger.]]>
      </doc>
    </field>
    <field name="BY_SCORE_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Compares clusters by score as returned by {@link #SCORE}. Clusters with larger
 score are larger.]]>
      </doc>
    </field>
    <field name="BY_LABEL_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Compares clusters by the natural order of their labels as returned by
 {@link #getLabel()}.]]>
      </doc>
    </field>
    <field name="BY_REVERSED_SIZE_AND_LABEL_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Compares clusters first by their size as returned by {@link #size()} and labels as
 returned by {@link #getLabel()}. In case of equal sizes, natural order of the
 labels decides.
 <p>
 <b>Please note</b>: this is a reversed comparator, so "larger" clusters end up
 nearer the beginning of the list being sorted (which is usually the order in which
 the applications want to display clusters).
 </p>]]>
      </doc>
    </field>
    <field name="BY_REVERSED_SCORE_AND_LABEL_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Compares clusters first by their size as returned by {@link #SCORE} and labels as
 returned by {@link #getLabel()}. In case of equal scores, natural order of the
 labels decides.
 <p>
 <b>Please note</b>: this is a reversed comparator, so "larger" clusters end up
 nearer the beginning of the list being sorted (which is usually the order in which
 the applications want to display clusters).
 </p>]]>
      </doc>
    </field>
    <field name="OTHER_TOPICS_AT_THE_END" type="java.util.Comparator&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A comparator that puts {@link #OTHER_TOPICS} clusters at the end of the list. In
 other words, to this comparator an {@link #OTHER_TOPICS} topics cluster is "bigger"
 than a non-{{@link #OTHER_TOPICS} cluster.
 <p>
 <strong>Note:</strong> This comparator is designed for use in combination with
 other comparators, such as {@link #BY_REVERSED_SIZE_AND_LABEL_COMPARATOR}. If you
 only need to partition a list of clusters into regular and other topic ones, this
 is better done in linear time without resorting to {@link Collections#sort(List)}.
 </p>]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A cluster (group) of {@link Document}s. Each cluster has a human-readable label
 consisting of one or more phrases, a list of documents it contains and a list of its
 subclusters. Optionally, additional attributes can be associated with a cluster, e.g.
 {@link #OTHER_TOPICS}. This class is <strong>not</strong> thread-safe.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.Cluster -->
  <!-- start class org.carrot2.core.ComponentInitializationException -->
  <class name="ComponentInitializationException" extends="org.carrot2.core.ProcessingException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ComponentInitializationException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ComponentInitializationException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ComponentInitializationException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Exception thrown if component initialization was unsuccessful.

 @see IProcessingComponent#init(IControllerContext)]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ComponentInitializationException -->
  <!-- start class org.carrot2.core.Controller -->
  <class name="Controller" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Closeable"/>
    <constructor name="Controller" type="org.carrot2.core.IProcessingComponentManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a controller with a custom {@link IProcessingComponentManager}, for experts
 only. Use {@link ControllerFactory} to obtain controllers in typical
 configurations.]]>
      </doc>
    </constructor>
    <method name="init" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ComponentInitializationException" type="org.carrot2.core.ComponentInitializationException"/>
      <doc>
      <![CDATA[Initializes this controller with an empty {@link Init}-time attributes map. Calling
 this method is optional, if {@link #process(Map, Object...)} is called on an
 uninitialized controller, {@link #init()} will be called automatically.
 
 @return this controller for convenience]]>
      </doc>
    </method>
    <method name="init" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <exception name="ComponentInitializationException" type="org.carrot2.core.ComponentInitializationException"/>
      <doc>
      <![CDATA[Initializes this controller with the provided @{@link Init}-time attributes. The
 provided attributes will be applied to all processing components managed by this
 controller. {@link Init}-time attributes can be overridden at processing time, see
 {@link #process(Map, Class...)} or {@link #process(Map, Object...)}.
 
 @param attributes initialization-time attributes to be applied to all processing
            components in this controller
 @return this controller for convenience]]>
      </doc>
    </method>
    <method name="init" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="configurations" type="org.carrot2.core.ProcessingComponentConfiguration[]"/>
      <exception name="ComponentInitializationException" type="org.carrot2.core.ComponentInitializationException"/>
      <doc>
      <![CDATA[Initializes this controller with the provided {@link Init}-time attributes and
 additional component-specific {@link Init}-time attributes. {@link Init}-time
 attributes can be overridden at processing time, see
 {@link #process(Map, Class...)} or {@link #process(Map, Object...)}.
 
 @param attributes initialization-time attributes to be applied to all processing
            components in this controller
 @param configurations additional component-specific {@link Init}-time attributes
 @return this controller for convenience]]>
      </doc>
    </method>
    <method name="process" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="results" type="java.lang.Integer"/>
      <param name="processingComponentClasses" type="java.lang.Class[]"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Convenience method for performing processing with the provided query and number of
 results. The typical use cases for this method is fetching the specified number of
 results from an {@link IDocumentSource} and, optionally, clustering them with an
 {@link IClusteringAlgorithm}.
 <p>
 For a method allowing to pass more attributes, see: {@link #process(Map, Class...)}.
 </p>
 
 @param query the query to use during processing
 @param results the number of results to fetch. If <code>null</code> is provided,
            the default number of results will be requested.
 @param processingComponentClasses classes of components to perform processing in
            the order they should be arranged in the pipeline. Each provided class
            must implement {@link IProcessingComponent}.
 @return results of the processing]]>
      </doc>
    </method>
    <method name="process" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="queryHint" type="java.lang.String"/>
      <param name="processingComponentClasses" type="java.lang.Class[]"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Convenience method for clustering the provided list of {@link Document}s. If the
 query that generated the <code>documents</code> is available, it can be provided in
 the <code>queryHint</code> parameter to increase the quality of clusters.
 <p>
 For a method allowing to pass more attributes, see: {@link #process(Map, Class...)}.
 </p>
 
 @param documents the documents to cluster
 @param queryHint the query that generated the documents, optional, can be
            <code>null</code> if not available.
 @param processingComponentClasses classes of components to perform processing in
            the order they should be arranged in the pipeline. Each provided class
            must implement {@link IProcessingComponent}.
 @return results of the processing
 @throws ProcessingException]]>
      </doc>
    </method>
    <method name="process" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="processingComponentClasses" type="java.lang.Class[]"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs processing using components designated by their class. If you initialized
 this controller using {@link #init(Map, ProcessingComponentConfiguration...)} and
 would like to designate components by their identifiers, call
 {@link #process(Map, String...)} or {@link #process(Map, Object...)}.
 
 @param attributes attributes to be used during processing. {@link Input} attributes
            will be transferred from this map to the corresponding fields. Keys of
            the map are computed based on the <code>key</code> parameter of the
            {@link Attribute} annotation. Controller will not modify the provided
            map, processing results will be available in the returned
            {@link ProcessingResult}.
 @param processingComponentClasses classes of components to perform processing in
            the order they should be arranged in the pipeline. Each provided class
            must implement {@link IProcessingComponent}.
 @return results of the processing]]>
      </doc>
    </method>
    <method name="process" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="processingComponentIdsOrClassNames" type="java.lang.String[]"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs processing using components designated by their identifiers. Identifiers
 can be assigned to component configurations using the {@link #init()} method.
 
 @param attributes attributes to be used during processing. {@link Input} attributes
            will be transferred from this map to the corresponding fields. Keys of
            the map are computed based on the <code>key</code> parameter of the
            {@link Attribute} annotation. Controller will not modify the provided
            map, processing results will be available in the returned
            {@link ProcessingResult}.
 @param processingComponentIdsOrClassNames identifiers of components to perform
            processing in the order they should be arranged in the pipeline.
            Fully-qualified class names are also accepted. Each provided class must
            implement {@link IProcessingComponent}.
 @return results of the processing
 @see #init(Map, ProcessingComponentConfiguration...)]]>
      </doc>
    </method>
    <method name="process" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="processingComponentClassesOrIds" type="java.lang.Object[]"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs processing using components designated by their identifiers or classes.
 
 @param attributes attributes to be used during processing. {@link Input} attributes
            will be transferred from this map to the corresponding fields. Keys of
            the map are computed based on the <code>key</code> parameter of the
            {@link Attribute} annotation. Controller will not modify the provided
            map, processing results will be available in the returned
            {@link ProcessingResult}.
 @param processingComponentClassesOrIds classes or identifiers of components to
            perform processing in the order they should be arranged in the pipeline.
            Fully-qualified class names are also accepted. Each provided class must
            implement {@link IProcessingComponent}.
 @return results of the processing
 @see #init(Map, ProcessingComponentConfiguration...)]]>
      </doc>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Shuts down this controller. For proper shut down, make sure this method is called
 after all threads left the processing methods. No calls processing will be
 performed after invoking this method.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Implement closeable so that controller can be closed with Java 1.7 resource block.]]>
      </doc>
    </method>
    <method name="getStatistics" return="org.carrot2.core.ControllerStatistics"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns current statistics related to the processing performed in this controller,
 including: number of queries, number of successful queries, processing times, cache
 utilization if applicable.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A controller implementing the life cycle described in {@link IProcessingComponent}. Use
 {@link ControllerFactory} to obtain controllers with different characteristics, e.g.
 with or without pooling of {@link IProcessingComponent}, with or without caching of the
 processing results. If further customizations are needed, you can provide your own
 {@link IProcessingComponentManager} implementation.
 <p>
 Calls to {@link #process(Map, Class...)} are thread-safe, although some care should be
 given to initialization. Controller instance should be initialized (using any of the
 {@link #init()} methods) before other threads are allowed to see its instance.
 {@link #dispose()} should be called after all threads leave
 {@link #process(Map, Class...)} and {@link #process(Map, Object...)}.
 </p>
 <p>
 Notice for {@link IProcessingComponent} developers: if data caching is used, values of
 {@link Output} attributes produced by the components whose output is to be cached
 (e.g., the {@link Document} instances in case {@link IDocumentSource} output is cached)
 may be accessed concurrently and therefore must be thread-safe.
 </p>
 
 @see ControllerFactory]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.Controller -->
  <!-- start class org.carrot2.core.ControllerContextListenerAdapter -->
  <class name="ControllerContextListenerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IControllerContextListener"/>
    <constructor name="ControllerContextListenerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="beforeDisposal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
    </method>
    <doc>
    <![CDATA[An empty adapter implementation of {@link IControllerContextListener}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ControllerContextListenerAdapter -->
  <!-- start class org.carrot2.core.ControllerFactory -->
  <class name="ControllerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="createSimple" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a controller with no processing component pooling and no results caching.
 The returned controller will instantiate new processing component instances for each
 processing request and will not perform any caching of the processing results.
 <p>
 This controller is useful for one-time processing or fast experiments with the
 code. For long-running applications (e.g. web applications), consider using a
 controller with component pooling and/or caching.
 </p>
 
 @see #createPooling()
 @see #createCaching(Class...)
 @see #create(boolean, Class...)]]>
      </doc>
    </method>
    <method name="createPooling" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a controller with processing component pooling but with no results caching.
 The returned controller will maintain an internal pool of processing components, so
 that they are reused between processing requests. Soft references are used to cache
 component instances. There is no upper bound on the number of instances the pool
 may cache.
 <p>
 Use this controller in long-running applications and when your processing
 components are expensive to create. For applications that handle large numbers of
 repeated requests, consider using a caching and pooling controller.
 </p>
 
 @see #create(boolean, Class...)
 @see #createPooling(int)]]>
      </doc>
    </method>
    <method name="createPooling" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="instancePoolSize" type="int"/>
      <doc>
      <![CDATA[Creates a controller with processing component pooling but with no results caching.
 The returned controller will maintain an internal fixed-size, hard-referenced
 pool of processing components, so that they are reused between processing requests.
 <p>
 Use this controller in long-running applications and when your processing
 components are expensive to create. For applications that handle large numbers of
 repeated requests, consider using a caching and pooling controller.
 </p>
 
 @param instancePoolSize Number of instances created for a single component 
 class-ID pair. For computational components it is sensible to set this pool to the
 number of CPU cores available on the machine. 
 
 @see #create(int, Class...)
 @see #createPooling()
 @see Runtime#availableProcessors()]]>
      </doc>
    </method>
    <method name="createCaching" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cachedProcessingComponents" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Creates a controller with no processing component pooling but with results caching.
 The returned controller will maintain a cache of the processing results. For each
 component whose results are to be cached, if there comes a repeated request for
 processing with that component with the same set of input attributes, the result
 will be returned from the cache. The returned controller will instantiate new
 processing components object for each processing request whose result has not yet
 been cached.
 <p>
 Uses of this specific controller are rather limited. Use it if your application is
 handling large numbers of repeated requests but you don't want to have the
 components pooled for some reason. Make sure the processing components are cheap to
 create, otherwise performance will suffer.
 </p>
 
 @param cachedProcessingComponents classes of components whose output should be cached
            by the controller. If a superclass is provided here, e.g.
            {@link IDocumentSource}, all its subclasses will be subject to caching.
            If {@link IProcessingComponent} is provided here, output of all
            components will be cached.]]>
      </doc>
    </method>
    <method name="createCachingPooling" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cachedProcessingComponents" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Creates a controller with processing component pooling and results caching. The
 returned controller combines processing component pooling and processing results
 caching.
 <p>
 Use this component in long-running applications that handle repeated requests.
 </p>
 
 @param cachedProcessingComponents classes of components whose output should be cached
            by the controller. If a superclass is provided here, e.g.
            {@link IDocumentSource}, all its subclasses will be subject to caching.
            If {@link IProcessingComponent} is provided here, output of all
            components will be cached.]]>
      </doc>
    </method>
    <method name="create" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="componentPooling" type="boolean"/>
      <param name="cachedProcessingComponents" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Creates a controller with the specified pooling and caching settings.
 
 @param componentPooling if <code>true</code>, component pooling 
      will be performed (soft pool), otherwise no component pool will be used.
 @param cachedProcessingComponents classes of components whose output should be cached
            by the controller. If a superclass is provided here, e.g.
            {@link IDocumentSource}, all its subclasses will be subject to caching.
            If {@link IProcessingComponent} is provided here, output of all
            components will be cached.]]>
      </doc>
    </method>
    <method name="create" return="org.carrot2.core.Controller"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="instancePoolSize" type="int"/>
      <param name="cachedProcessingComponents" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Creates a controller with the specified fixed-size pooling and caching settings.
 
 @param instancePoolSize Number of instances created for a single component class-ID
            pair. For computational components it is sensible to set this pool to
            the number of CPU cores available on the machine.
 @param cachedProcessingComponents classes of components whose output should be
            cached by the controller. If a superclass is provided here, e.g.
            {@link IDocumentSource}, all its subclasses will be subject to caching.
            If {@link IProcessingComponent} is provided here, output of all
            components will be cached.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Creates {@link Controller}s in a number of common configurations. The most useful
 configurations are:
 <ul>
 <li>{@link #createSimple()}: for one-time processing and quick experiments with the
 code;</li>
 <li>{@link #createCachingPooling(Class...)}: for long-running applications (e.g. web
 applications) handling repeated (cacheable) requests.</li>
 </ul>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ControllerFactory -->
  <!-- start class org.carrot2.core.ControllerStatistics -->
  <class name="ControllerStatistics" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this statistics object as XML stream.]]>
      </doc>
    </method>
    <field name="totalQueries" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Total number of queries handled, including queries resulting in an exception.]]>
      </doc>
    </field>
    <field name="goodQueries" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of queries handled without an exception.]]>
      </doc>
    </field>
    <field name="algorithmTimeAverageInWindow" type="double"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average clustering time measured within the {@link #algorithmTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="algorithmTimeMeasurementsInWindow" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of algorithm time measurements within the {@link #algorithmTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="algorithmTimeWindowSize" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clustering average time measurement window, in milliseconds.]]>
      </doc>
    </field>
    <field name="sourceTimeAverageInWindow" type="double"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average document source processing time measured within the
 {@link #sourceTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="sourceTimeMeasurementsInWindow" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of document source processing time measurements within the
 {@link #sourceTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="sourceTimeWindowSize" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document source average processing time measurement window, in milliseconds.]]>
      </doc>
    </field>
    <field name="totalTimeAverageInWindow" type="double"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average total processing time measured within the {@link #totalTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="totalTimeMeasurementsInWindow" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of total processing time measurements within the
 {@link #totalTimeWindowSize}.]]>
      </doc>
    </field>
    <field name="totalTimeWindowSize" type="long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Total average processing time measurement window, in milliseconds.]]>
      </doc>
    </field>
    <field name="cacheMisses" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of requests that generated cache misses. May be null if the controller does
 not perform caching.]]>
      </doc>
    </field>
    <field name="cacheHitsTotal" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of requests served from cache. May be null if the controller does not
 perform caching.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Provides some statistics about processing performed in a {@link Controller}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ControllerStatistics -->
  <!-- start class org.carrot2.core.Document -->
  <class name="Document" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="Document"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty document with no fields.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code>.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code> and <code>summary</code>.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String, java.lang.String, org.carrot2.core.LanguageCode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code>, <code>summary</code> and
 <code>language</code>.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code>, <code>summary</code> and
 <code>contentUrl</code>.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String, java.lang.String, java.lang.String, org.carrot2.core.LanguageCode"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code>, <code>summary</code>,
 <code>contentUrl</code> and <code>language</code>.]]>
      </doc>
    </constructor>
    <constructor name="Document" type="java.lang.String, java.lang.String, java.lang.String, org.carrot2.core.LanguageCode, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a document with the provided <code>title</code>, <code>summary</code>,
 <code>contentUrl</code> and <code>language</code> and ID. IDs should be unique
 for clustering. If all documents passed for clustering have null IDs then
 IDs are automatically generated.]]>
      </doc>
    </constructor>
    <method name="getId" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="please use {@link #getStringId()} instead. Currently, this method
             attempts to parse the string identifier returned by
             {@link #getStringId()} into an integer.">
      <doc>
      <![CDATA[@deprecated please use {@link #getStringId()} instead. Currently, this method
             attempts to parse the string identifier returned by
             {@link #getStringId()} into an integer.
 @throws NumberFormatException if the identifier could not be converted to an integer
             number]]>
      </doc>
    </method>
    <method name="getStringId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of this document. The semantics of the identifier varies depending on
 the {@link IDocumentSource} that produced the documents.
 <p>
 When processing documents produced by Carrot2-provided {@link IDocumentSource}, the
 framework generates unique integer identifiers for all the documents. However, when
 XML document sets are loaded using the
 {@link ProcessingResult#deserialize(java.io.InputStream)} or
 {@link ProcessingResult#deserialize(CharSequence)} methods, the original document
 identifiers are preserved, which means they may be non-unique or not present at all.
 </p>
 
 @return identifier of this document, possibly <code>null</code>]]>
      </doc>
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #TITLE} field.]]>
      </doc>
    </method>
    <method name="setTitle" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this document's {@link #TITLE} field.
 
 @param title title to set
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="getSummary" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #SUMMARY} field.]]>
      </doc>
    </method>
    <method name="setSummary" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="summary" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this document's {@link #SUMMARY} field.
 
 @param summary summary to set
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="getContentUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #CONTENT_URL} field.]]>
      </doc>
    </method>
    <method name="setContentUrl" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this document's {@link #CONTENT_URL} field.
 
 @param contentUrl content URL to set
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="getSources" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #SOURCES} field.]]>
      </doc>
    </method>
    <method name="setSources" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sources" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets this document's {@link #SOURCES} field.
 
 @param sources the sources list to set
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="getLanguage" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #LANGUAGE}.]]>
      </doc>
    </method>
    <method name="setLanguage" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="language" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Sets this document's {@link #LANGUAGE}.
 
 @param language the language to set
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="getScore" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this document's {@link #SCORE}.
 
 @return this document's {@link #SCORE}.]]>
      </doc>
    </method>
    <method name="setScore" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="score" type="java.lang.Double"/>
      <doc>
      <![CDATA[Sets this document's {@link #SCORE}.
 
 @param score the {@link #SCORE} to set
 @return this document for convenience.]]>
      </doc>
    </method>
    <method name="getFields" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all fields of this document. The returned map is unmodifiable.
 
 @return all fields of this document]]>
      </doc>
    </method>
    <method name="getField" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns value of the specified field of this document. If no field corresponds to
 the provided <code>name</code>, <code>null</code> will be returned.
 
 @param name of the field to be returned
 @return value of the field or <code>null</code>]]>
      </doc>
    </method>
    <method name="setField" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets a field in this document.
 
 @param name of the field to set
 @param value value of the field
 @return this document for convenience]]>
      </doc>
    </method>
    <method name="clone" return="org.carrot2.core.Document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a <strong>shallow</strong> clone of itself. The identifier
 and the fields map is copied but values inside fields are not cloned.]]>
      </doc>
    </method>
    <method name="assignDocumentIds"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.Collection&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Assigns sequential identifiers to the provided <code>documents</code>. If any
 document in the set has a non-empty identifier, no identifiers will be generated at
 all.
 
 @param documents documents to assign identifiers to.
 @throws IllegalArgumentException Thrown if the collection of documents already contains
              identifiers and they are not unique.]]>
      </doc>
    </method>
    <method name="addSerializationListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.carrot2.core.Document.IDocumentSerializationListener"/>
      <doc>
      <![CDATA[Adds a serialization listener to this document.
 
 @param listener the listener to add]]>
      </doc>
    </method>
    <field name="TITLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for the title of the document.]]>
      </doc>
    </field>
    <field name="SUMMARY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for a short summary of the document, e.g. the snippet returned by the
 search engine.]]>
      </doc>
    </field>
    <field name="CONTENT_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for an URL pointing to the full version of the document.]]>
      </doc>
    </field>
    <field name="CLICK_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Click URL. The URL that should be placed in the anchor to the document instead of
 the value returned in {@link #CONTENT_URL}.]]>
      </doc>
    </field>
    <field name="THUMBNAIL_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for an URL pointing to the thumbnail image associated with the document.]]>
      </doc>
    </field>
    <field name="SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document size.]]>
      </doc>
    </field>
    <field name="SCORE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document score. The semantics of the score depends on the specific document source.
 Some document sources may not provide document scores at all.]]>
      </doc>
    </field>
    <field name="SOURCES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for a list of sources the document was found in. Value type:
 <code>List&lt;String&gt;</code>]]>
      </doc>
    </field>
    <field name="LANGUAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Field name for the language in which the document is written. Value type:
 {@link LanguageCode}. If the <code>language</code> field is not defined or is
 <code>null</code>, it means the language of the document is unknown or it is
 outside of the list defined in {@link LanguageCode}.]]>
      </doc>
    </field>
    <field name="PARTITIONS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifiers of reference clustering partitions this document belongs to. Currently,
 this field is used only to calculate various clustering quality metrics. In the
 future, clustering algorithms may be able to use values of this field to increase
 the quality of clustering.
 <p>
 Value type: <code>Collection&lt;Object&gt;</code>. There is no constraint on the
 actual type of the partition identifier in the collection. Identifiers are assumed
 to correctly implement the {@link #equals(Object)} and {@link #hashCode()} methods.
 </p>]]>
      </doc>
    </field>
    <field name="BY_ID_COMPARATOR" type="java.util.Comparator&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="semantics of the identifiers depends on the document source, please
             roll your own comparator that is aware of the actual id semantics.">
      <doc>
      <![CDATA[Compares {@link Document}s by their identifiers {@link #getId()}, which effectively
 gives the original order in which they were returned by the document source.
 
 @deprecated semantics of the identifiers depends on the document source, please
             roll your own comparator that is aware of the actual id semantics.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A document that to be processed by the framework. Each document is a collection of
 fields carrying different bits of information, e.g. {@link #TITLE} or
 {@link #CONTENT_URL}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.Document -->
  <!-- start class org.carrot2.core.Document.DocumentToId -->
  <class name="Document.DocumentToId" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="Please use #getStringId() directly or use your own {@link Function}
             implementation.">
    <implements name="com.google.common.base.Function&lt;org.carrot2.core.Document, java.lang.Integer&gt;"/>
    <method name="apply" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="org.carrot2.core.Document"/>
    </method>
    <field name="INSTANCE" type="org.carrot2.core.Document.DocumentToId"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Transforms a {@link Document} to its identifier returned by
 {@link Document#getId()}.
 
 @deprecated Please use #getStringId() directly or use your own {@link Function}
             implementation.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.Document.DocumentToId -->
  <!-- start interface org.carrot2.core.Document.IDocumentSerializationListener -->
  <interface name="Document.IDocumentSerializationListener"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="beforeSerialization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="org.carrot2.core.Document"/>
      <param name="otherFieldsForSerialization" type="java.util.Map&lt;java.lang.String, ?&gt;"/>
      <doc>
      <![CDATA[Called before a {@link Document} gets serialized to XML or JSON. Specific
 implementations may want to modify some properties of the document before it
 gets serialized
 
 @param document the documents being serialized. Note: changes to the document
            will not be undone after serialization completes.
 @param otherFieldsForSerialization custom fields that are about to be
            serialized. Changes made on this map will not affect the contents of
            the document.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Enables listening to events related to XML/JSON serialization of {@link Document}s.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.Document.IDocumentSerializationListener -->
  <!-- start class org.carrot2.core.HttpAuthHub -->
  <class name="HttpAuthHub" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpAuthHub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPassword" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="USERNAME_PROPERTY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PASSWORD_PROPERTY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="once" type="java.util.concurrent.atomic.AtomicBoolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[HTTP authentication hub. It's not the best fix for CARROT-1072 (a better one would somehow
 consolidate all URI resolution), but at least it should work for now.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.HttpAuthHub -->
  <!-- start interface org.carrot2.core.IClusteringAlgorithm -->
  <interface name="IClusteringAlgorithm"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponent"/>
    <doc>
    <![CDATA[A marker interface for processing components performing clustering of documents.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IClusteringAlgorithm -->
  <!-- start interface org.carrot2.core.IControllerContext -->
  <interface name="IControllerContext"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="setAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Atomically binds the given key to the value. Component implementors are encouraged
 to use custom namespaces to avoid conflicts.]]>
      </doc>
    </method>
    <method name="getAttribute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Atomically retrieves the value for a given key. Component implementors are
 encouraged to use custom namespaces to avoid conflicts.]]>
      </doc>
    </method>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.carrot2.core.IControllerContextListener"/>
      <doc>
      <![CDATA[Adds a {@link IControllerContextListener} to this context.]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.carrot2.core.IControllerContextListener"/>
      <doc>
      <![CDATA[Removes a {@link IControllerContextListener} from this context.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 The controller context is a map of key-value pairs, attached to an initialized
 {@link Controller} instance. The context is created in
 {@link Controller#init()} methods and remains valid until
 {@link Controller#dispose()} is invoked.
 </p>
 <p>
 The context instance is passed to all components that take part in query processing
 inside the controller object ({@link IProcessingComponent#init(IControllerContext)}).
 {@link IProcessingComponent} implementations may use the context object to store data
 shared between <i>all</i> component instances (such as thread pools, counters, etc.).
 In such scenario it is essential to remember to attach a
 {@link IControllerContextListener} and clean up any resources when the controller is
 destroyed.
 </p>
 
 @see Controller#init()
 @see Controller#dispose()
 @see IProcessingComponent#init(IControllerContext)]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IControllerContext -->
  <!-- start interface org.carrot2.core.IControllerContextListener -->
  <interface name="IControllerContextListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="beforeDisposal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
      <doc>
      <![CDATA[Invoked before the context is disposed and any keys (values) should be cleaned up
 to allow garbage collection.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A listener receiving events related to a {@link IControllerContext}.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IControllerContextListener -->
  <!-- start interface org.carrot2.core.IDocumentSource -->
  <interface name="IDocumentSource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponent"/>
    <doc>
    <![CDATA[A marker interface for processing components providing documents for further
 processing. The general process of implementing {@link IDocumentSource}s is the
 following following:
 <ol>
 <li>Create a class that implements {@link IDocumentSource} and annotate it with
 {@link Bindable}. You may want to extend {@link ProcessingComponentBase} to get empty
 implementations of the {@link IProcessingComponent} life cycle methods.</li>
 <li>For each input parameter of your document source (e.g. query, number of results,
 custom filtering etc.) declare a field and annotate it with {@link Attribute} and
 {@link Input}. Also, add either {@link Init} or {@link Processing} annotation depending
 on the intended scope of the parameter. See {@link IProcessingComponent} for
 information when these fields will be populated with values passed by the caller.</li>
 <li>For each output value produced by your document source declare a field and annotate
 it with {@link Attribute}, {@link Output} and {@link Processing} annotations. For the
 {@link Document}s fetched by your source declare a {@link List}&lt; {@link Document}
 &gt; field whose {@link Attribute#key()} is {@link AttributeNames#DOCUMENTS}</li>
 <li>Implement the {@link IProcessingComponent#process()} method to fetch the documents
 (based on the values read from fields annotated with {@link Input} which will have
 already been populated with values passed by the caller) and assign the results to the
 fields annotated with {@link Output} (which Carrot<sup>2</sup> core will collect and
 pass for further processing).</li>
 </ol>]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IDocumentSource -->
  <!-- start interface org.carrot2.core.IProcessingComponent -->
  <interface name="IProcessingComponent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="org.carrot2.core.IControllerContext"/>
      <exception name="ComponentInitializationException" type="org.carrot2.core.ComponentInitializationException"/>
      <doc>
      <![CDATA[Invoked after component's attributes marked with {@link Init} and {@link Input}
 annotations have been bound, but before calls to any other methods of this
 component. After a call to this method completes without an exception, attributes
 marked with {@link Init} {@link Output} will be collected. In this method,
 components should perform initializations based on the initialization-time
 attributes. This method is called <b>once</b> in the life time of a processing
 component instance.
 
 @param ctx An instance of {@link IControllerContext} of the controller to which this
            component instance will be bound.
 @throws ComponentInitializationException when initialization failed. If thrown, the
             {@link #dispose()} method will be called on this component instance to
             allow clean-up actions. The instance will not be used for any further
             processing and should be made reclaimable to the garbage collector.
             Finally, the exception will be rethrown from the controller method that
             caused the component to initialize.]]>
      </doc>
    </method>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Invoked after the attributes marked with {@link Processing} and {@link Input}
 annotations have been bound, but before a call to {@link #process()}. In this
 method, the processing component should perform any initializations based on the
 runtime attributes. This method is called once per request.
 
 @throws ProcessingException when processing cannot start, e.g. because some
             attributes were not bound. If thrown, the {@link #process()} method
             will not be called. Instead, {@link #afterProcessing()} will be called
             immediately to allow clean-up actions, and the component will be ready
             to accept further requests or to be disposed of. Finally, the exception
             will be rethrown from the controller method that caused the component
             to perform processing.]]>
      </doc>
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Performs the processing required to fulfill the request. This method is called once
 per request.
 
 @throws ProcessingException when processing failed. If thrown, the
             {@link #afterProcessing()} method will be called and the component will
             be ready to accept further requests or to be disposed of. Finally, the
             exception will be rethrown from the controller method that caused the
             component to perform processing.]]>
      </doc>
    </method>
    <method name="afterProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked after the processing has finished, no matter whether an exception has been
 thrown or not. After a call to this method completes, attributes marked with
 {@link Processing} and {@link Output} annotations will be collected. In this
 method, the processing component should dispose of any resources it has allocated
 to fulfill the request. No matter whether a call to this method completes
 successfully or with an exception, the component will be ready to accept further
 requests or to be disposed of. This method is called once per request.]]>
      </doc>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked before this processing component is about to be destroyed. In this method,
 the processing component should release any resources it allocated during
 initialization. After the call to this method, no other method of this processing
 component will be called and the component should be made reclaimable to the
 garbage collector. Exceptions thrown by this method will be ignored. This method is
 called once in the life time of a processing component instance.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Defines the life cycle of a Carrot<sup>2</sup> processing component. The life cycle
 governs how {@link IProcessingComponent} instances are initialized and disposed of ({@link #init(IControllerContext)},
 {@link #dispose()}) and how processing proceeds ({@link #beforeProcessing()},
 {@link #process()}, {@link #afterProcessing()}). See {@link Controller} for a
 reference implementation of this life cycle.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IProcessingComponent -->
  <!-- start interface org.carrot2.core.IProcessingComponentManager -->
  <interface name="IProcessingComponentManager"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="configurations" type="org.carrot2.core.ProcessingComponentConfiguration[]"/>
      <doc>
      <![CDATA[Called upon initialization of the {@link Controller}.
 
 @param context controller context
 @param attributes global initialization attributes provided to the controller
 @param configurations component configurations provided to the controller]]>
      </doc>
    </method>
    <method name="prepare" return="org.carrot2.core.IProcessingComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;"/>
      <param name="id" type="java.lang.String"/>
      <param name="inputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="outputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Prepares a component for processing. Specific managers may simply instantiate a new
 component object, fetch a component from a pool or wrap a component prepared by a
 delegate manager etc.
 
 @param clazz class of the component to prepare
 @param id Identifier of the component to prepare. May be <code>null</code>.
 @param inputAttributes input attributes for all components requested to perform
            processing. Both {@link Init}- and {@link Processing}-time attributes
            will be provided. Managers must not modify this map.
 @param outputAttributes storage for output attributes]]>
      </doc>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="component" type="org.carrot2.core.IProcessingComponent"/>
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Called after processing completed. This method is called regardless of whether the
 processing completed successfully or with an error.

 @param component Component instance returned from {@link #prepare}.
 @param id The same identifier of the component as used in the call to 
           {@link #prepare}. May be <code>null</code>.]]>
      </doc>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Called upon disposal of the controller.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A component management strategy used by a {@link Controller}.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.core.IProcessingComponentManager -->
  <!-- start class org.carrot2.core.LanguageCode -->
  <class name="LanguageCode" extends="java.lang.Enum&lt;org.carrot2.core.LanguageCode&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.core.LanguageCode[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getIsoCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return ISO code for this language.]]>
      </doc>
    </method>
    <method name="getLocale" return="java.util.Locale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Returns {@link Locale} associated with the given 
 language.]]>
      </doc>
    </method>
    <method name="forISOCode" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="language" type="java.lang.String"/>
      <doc>
      <![CDATA[Return a {@link LanguageCode} constant for a given ISO code (or <code>null</code>)
 if not available.]]>
      </doc>
    </method>
    <method name="usesSpaceDelimiters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <code>true</code> if this language uses space delimiters between words.
 This is a hint for formatting cluster labels.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Codes for languages for which linguistic resources are available 
 in <code>DefaultLanguageModelFactory</code>.
 <p>
 Notes about third-party or extra implementation needs.
 <ul>
  <li>{@link #POLISH} makes use of Morfologik stemming library
  if it is available in the classpath.</li>
  <li>{@link #CHINESE_SIMPLIFIED} makes use of Lucene's <code>smartcn</code> tokenizer
  if it is available in the classpath.</li>
  <li>{@link #THAI} makes use of Lucene's <code>ThaiWordFilter</code>
  if it is available in the classpath.</li>
 </ul>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.LanguageCode -->
  <!-- start class org.carrot2.core.Platform -->
  <class name="Platform" extends="java.lang.Enum&lt;org.carrot2.core.Platform&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.core.Platform[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.core.Platform"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getPlatform" return="org.carrot2.core.Platform"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current execution platform (hardcoded at build time).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides the runtime execution platform environment information. 
 
 <p>Carrot2 is cross-compiled (with many adaptations) to .NET using IKVM and this switch
 permits us omit certain irrelevant tests.</p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.Platform -->
  <!-- start class org.carrot2.core.PoolingProcessingComponentManager -->
  <class name="PoolingProcessingComponentManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponentManager"/>
    <constructor name="PoolingProcessingComponentManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link PoolingProcessingComponentManager} using the default pool
 implementation {@link SoftUnboundedPool}).]]>
      </doc>
    </constructor>
    <constructor name="PoolingProcessingComponentManager" type="org.carrot2.util.pool.IParameterizedPool&lt;org.carrot2.core.IProcessingComponent, java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new {@link PoolingProcessingComponentManager} with a custom pool
 implementation.
 
 @param componentPool the pool to be used by this manager]]>
      </doc>
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="configurations" type="org.carrot2.core.ProcessingComponentConfiguration[]"/>
    </method>
    <method name="prepare" return="org.carrot2.core.IProcessingComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;"/>
      <param name="id" type="java.lang.String"/>
      <param name="inputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="outputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="component" type="org.carrot2.core.IProcessingComponent"/>
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An {@link IProcessingComponentManager} that pools instances of processing components.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.PoolingProcessingComponentManager -->
  <!-- start class org.carrot2.core.ProcessingComponentBase -->
  <class name="ProcessingComponentBase" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponent"/>
    <constructor name="ProcessingComponentBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
    </method>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="afterProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContext" return="org.carrot2.core.IControllerContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the {@link IControllerContext} passed in {@link #init(IControllerContext)}.]]>
      </doc>
    </method>
    <method name="getSharedExecutor" return="java.util.concurrent.ExecutorService"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="maxConcurrentThreads" type="int"/>
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A base class for implementation of the {@link IProcessingComponent} interface that
 provides empty implementations of all life cycle methods.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ProcessingComponentBase -->
  <!-- start class org.carrot2.core.ProcessingComponentConfiguration -->
  <class name="ProcessingComponentConfiguration" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProcessingComponentConfiguration" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;, java.lang.String, java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new component configuration.
 
 @param componentClass the specific {@link IProcessingComponent} class.
 @param componentId identifier of the component.
 @param attributes initialization attributes for this component configuration.]]>
      </doc>
    </constructor>
    <constructor name="ProcessingComponentConfiguration" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new component configuration with an empty set of initialization
 attributes.
 
 @param componentClass the specific {@link IProcessingComponent} class.
 @param componentId identifier of the component.]]>
      </doc>
    </constructor>
    <field name="componentClass" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The specific {@link IProcessingComponent} class.]]>
      </doc>
    </field>
    <field name="componentId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Identifier of the component.]]>
      </doc>
    </field>
    <field name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initialization attributes for this component configuration.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Represents a specific configuration of a {@link IProcessingComponent}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ProcessingComponentConfiguration -->
  <!-- start class org.carrot2.core.ProcessingComponentSuite -->
  <class name="ProcessingComponentSuite" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProcessingComponentSuite"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ProcessingComponentSuite" type="java.util.ArrayList&lt;org.carrot2.core.DocumentSourceDescriptor&gt;, java.util.ArrayList&lt;org.carrot2.core.ProcessingComponentDescriptor&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSources" return="java.util.List&lt;org.carrot2.core.DocumentSourceDescriptor&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the internal list of document sources. Changes to this list will affect the
 suite.]]>
      </doc>
    </method>
    <method name="getAlgorithms" return="java.util.List&lt;org.carrot2.core.ProcessingComponentDescriptor&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the internal list of algorithms. Changes to this list will affect the
 suite.]]>
      </doc>
    </method>
    <method name="getOtherComponents" return="java.util.List&lt;org.carrot2.core.ProcessingComponentDescriptor&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return a list of other components (not algorithms, not sources).]]>
      </doc>
    </method>
    <method name="getComponents" return="java.util.List&lt;org.carrot2.core.ProcessingComponentDescriptor&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all components available in this suite, including data sources, algorithms
 and any other types.]]>
      </doc>
    </method>
    <method name="deserialize" return="org.carrot2.core.ProcessingComponentSuite"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="org.carrot2.util.resource.IResource"/>
      <param name="resourceLookup" type="org.carrot2.util.resource.ResourceLookup"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Deserializes component suite information from an XML stream.
 
 @param resource The resource to be deserialized (must not be null).
 @param resourceLookup Resource lookup utilities for potential included resources.]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this component suite as an UTF-8 encoded XML.]]>
      </doc>
    </method>
    <method name="removeUnavailableComponents" return="java.util.List&lt;org.carrot2.core.ProcessingComponentDescriptor&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove components marked as unavailable from the suite.
 
 @see ProcessingComponentDescriptor#isComponentAvailable()]]>
      </doc>
    </method>
    <method name="getComponentConfigurations" return="org.carrot2.core.ProcessingComponentConfiguration[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all processing component configurations available in this suite.
 
 @see Controller#init(Map, ProcessingComponentConfiguration...)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A set of {@link IProcessingComponent}s used in Carrot2 applications.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ProcessingComponentSuite -->
  <!-- start class org.carrot2.core.ProcessingException -->
  <class name="ProcessingException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProcessingException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ProcessingException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ProcessingException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[An exception thrown if processing failed. For certain specific failure reasons,
 subclasses of this exception have been defined.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ProcessingException -->
  <!-- start class org.carrot2.core.ProcessingResult -->
  <class name="ProcessingResult" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getAttributes" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns attributes fed-in and collected during processing. The returned map is
 unmodifiable.
 
 @return attributes fed-in and collected during processing]]>
      </doc>
    </method>
    <method name="getAttribute" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a specific attribute of this result set. This method is equivalent to
 calling {@link #getAttributes()} and then getting the required attribute from the
 map.
 
 @param key key of the attribute to return
 @return value of the attribute]]>
      </doc>
    </method>
    <method name="getDocuments" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the documents that have been processed. The returned collection is
 unmodifiable.
 
 @return documents that have been processed or <code>null</code> if no documents are
         present in the result.]]>
      </doc>
    </method>
    <method name="getClusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the clusters that have been created during processing. The returned list is
 unmodifiable.
 
 @return clusters created during processing or <code>null</code> if no clusters were
         present in the result.]]>
      </doc>
    </method>
    <method name="serialize" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Serializes this {@link ProcessingResult} to an XML string.]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this {@link ProcessingResult} to an XML stream. The output includes all
 documents, clusters and other attributes.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param stream the stream to serialize this {@link ProcessingResult} to. The stream
            will <strong>not</strong> be closed.
 @throws Exception in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <param name="saveDocuments" type="boolean"/>
      <param name="saveClusters" type="boolean"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this {@link ProcessingResult} to a byte stream. Documents and clusters
 can be included or skipped in the output as requested. Other attributes are always
 included.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param stream the stream to serialize this {@link ProcessingResult} to. The stream
            will <strong>not</strong> be closed.
 @param saveDocuments if <code>false</code>, documents will not be serialized.
            Notice that when deserializing XML containing clusters but not
            documents, document references in {@link Cluster#getDocuments()} will
            not be restored.
 @param saveClusters if <code>false</code>, clusters will not be serialized
 @throws Exception in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <param name="saveDocuments" type="boolean"/>
      <param name="saveClusters" type="boolean"/>
      <param name="saveOtherAttributes" type="boolean"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this {@link ProcessingResult} to a byte stream. Documents, clusters and
 other attributes can be included or skipped in the output as requested.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param stream the stream to serialize this {@link ProcessingResult} to. The stream
            will <strong>not</strong> be closed.
 @param saveDocuments if <code>false</code>, documents will not be serialized.
            Notice that when deserializing XML containing clusters but not
            documents, document references in {@link Cluster#getDocuments()} will
            not be restored.
 @param saveClusters if <code>false</code>, clusters will not be serialized
 @param saveOtherAttributes if <code>false</code>, other attributes will not be
            serialized
 @throws Exception in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="deserialize" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Deserialize from an input stream of characters.]]>
      </doc>
    </method>
    <method name="deserialize" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.InputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Deserializes a {@link ProcessingResult} from an XML stream.
 
 @param input the input XML stream to deserialize a {@link ProcessingResult} from.
            The stream will <strong>not</strong> be closed.
 @return deserialized {@link ProcessingResult}
 @throws Exception is case of any problems with deserialization]]>
      </doc>
    </method>
    <method name="serializeJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes this processing result as JSON to the provided <code>writer</code>. The
 output includes all documents, clusters and other attributes.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param writer the writer to serialize this processing result to. The writer will
            <strong>not</strong> be closed.
 @throws IOException in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serializeJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <param name="callback" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes this processing result as JSON to the provided <code>writer</code>. The
 output includes all documents, clusters and other attributes.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param writer the writer to serialize this processing result to. The writer will
            <strong>not</strong> be closed.
 @param callback JavaScript function name in which to wrap the JSON response or
            <code>null</code>.
 @throws IOException in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serializeJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <param name="callback" type="java.lang.String"/>
      <param name="saveDocuments" type="boolean"/>
      <param name="saveClusters" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes this processing result as JSON to the provided <code>writer</code>.
 Documents and clusters can be included or skipped in the output as requested. Other
 attributes are always included.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param writer the writer to serialize this processing result to. The writer will
            <strong>not</strong> be closed.
 @param callback JavaScript function name in which to wrap the JSON response or
            <code>null</code>.
 @param saveDocuments if <code>false</code>, documents will not be serialized.
 @param saveClusters if <code>false</code>, clusters will not be serialized
 @throws IOException in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serializeJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <param name="callback" type="java.lang.String"/>
      <param name="indent" type="boolean"/>
      <param name="saveDocuments" type="boolean"/>
      <param name="saveClusters" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes this processing result as JSON to the provided <code>writer</code>.
 <p>
 This method is not thread-safe, external synchronization must be applied if needed.
 </p>
 
 @param writer the writer to serialize this processing result to. The writer will
            <strong>not</strong> be closed.
 @param callback JavaScript function name in which to wrap the JSON response or
            <code>null</code>.
 @param indent if <code>true</code>, the output JSON will be pretty-printed
 @param saveDocuments if <code>false</code>, documents will not be serialized.
 @param saveClusters if <code>false</code>, clusters will not be serialized
 @throws IOException in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="serializeJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <param name="callback" type="java.lang.String"/>
      <param name="indent" type="boolean"/>
      <param name="saveDocuments" type="boolean"/>
      <param name="saveClusters" type="boolean"/>
      <param name="saveOtherAttributes" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes this processing result as JSON to the provided <code>writer</code>.
 Documents, clusters and other attributes can be included or skipped in the output
 as requested.
 
 @param writer the writer to serialize this processing result to. The writer will
            <strong>not</strong> be closed.
 @param callback JavaScript function name in which to wrap the JSON response or
            <code>null</code>.
 @param indent if <code>true</code>, the output JSON will be pretty-printed
 @param saveDocuments if <code>false</code>, documents will not be serialized.
 @param saveClusters if <code>false</code>, clusters will not be serialized
 @param saveOtherAttributes if <code>false</code>, other attributes will not be
            serialized
 @throws IOException in case of any problems with serialization]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Encapsulates the results of processing. Provides access to the values of attributes
 collected after processing and utility methods for obtaining processed documents (
 {@link #getDocuments()})) and the created clusters ({@link #getClusters()}).]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.ProcessingResult -->
  <!-- start class org.carrot2.core.SimpleProcessingComponentManager -->
  <class name="SimpleProcessingComponentManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IProcessingComponentManager"/>
    <constructor name="SimpleProcessingComponentManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="configurations" type="org.carrot2.core.ProcessingComponentConfiguration[]"/>
    </method>
    <method name="prepare" return="org.carrot2.core.IProcessingComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;? extends org.carrot2.core.IProcessingComponent&gt;"/>
      <param name="id" type="java.lang.String"/>
      <param name="inputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="outputAttributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="component" type="org.carrot2.core.IProcessingComponent"/>
      <param name="id" type="java.lang.String"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An {@link IProcessingComponentManager} that creates a new component for each processing
 request.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.SimpleProcessingComponentManager -->
</package>
<package name="org.carrot2.core.attribute">
  <!-- start class org.carrot2.core.attribute.AttributeNames -->
  <class name="AttributeNames" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="START" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#START]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#RESULTS]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#QUERY]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#RESULTS_TOTAL]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#DOCUMENTS]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#CLUSTERS]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#PROCESSING_TIME_TOTAL]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_SOURCE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#PROCESSING_TIME_SOURCE]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_ALGORITHM" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#PROCESSING_TIME_ALGORITHM]]>
      </doc>
    </field>
    <field name="PROCESSING_RESULT_TITLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see CommonAttributesDescriptor.Keys#PROCESSING_RESULT_TITLE]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for common attribute names, only for the use in Carrot2 core code. When
 calling Carrot2 APIs, use {@link CommonAttributesDescriptor.Keys}.
 
 @see CommonAttributesDescriptor.Keys]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.AttributeNames -->
  <!-- start class org.carrot2.core.attribute.CommonAttributes -->
  <class name="CommonAttributes" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="start" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Index of the first document/ search result to fetch. The index starts at zero.]]>
      </doc>
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum number of documents/ search results to fetch. The query hint can be used
 by clustering algorithms to avoid creating trivial clusters (combination of query words).]]>
      </doc>
    </field>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Query to perform.]]>
      </doc>
    </field>
    <field name="resultsTotal" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Estimated total number of matching documents.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents returned by the search engine/ document retrieval system or
 documents passed as input to the clustering algorithm.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the clustering algorithm.]]>
      </doc>
    </field>
    <field name="processingTimeTotal" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Total processing time in milliseconds. A sum of processing times of all components in the chain.
 Total processing time may be greater than the sum of
 {@link #processingTimeTotal} and {@link #processingTimeAlgorithm}.]]>
      </doc>
    </field>
    <field name="processingTimeSource" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Data source processing time in milliseconds. A sum of processing times of all
 {@link org.carrot2.core.IDocumentSource}s in the chain, including the
 {@link org.carrot2.core.IProcessingComponent#beforeProcessing()} and
 {@link org.carrot2.core.IProcessingComponent#afterProcessing()} hooks.]]>
      </doc>
    </field>
    <field name="processingTimeAlgorithm" type="java.lang.Long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Algorithm processing time in milliseconds. A sum of processing times of all
 {@link org.carrot2.core.IClusteringAlgorithm}s in the chain, including the
 {@link org.carrot2.core.IProcessingComponent#beforeProcessing()} and
 {@link org.carrot2.core.IProcessingComponent#afterProcessing()} hooks.]]>
      </doc>
    </field>
    <field name="processingResultTitle" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Processing result title. A typical title for a processing result will be the query
 used to fetch documents from that source. For certain document sources the query
 may not be needed (on-disk XML, feed of syndicated news); in such cases, the input
 component should set its title properly for visual interfaces such as the
 workbench.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attributes shared and inherited by many clustering algorithms. Extracted for consistency.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.CommonAttributes -->
  <!-- start class org.carrot2.core.attribute.CommonAttributesDescriptor -->
  <class name="CommonAttributesDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="CommonAttributesDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.core.attribute.CommonAttributesDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.core.attribute.CommonAttributes} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.CommonAttributesDescriptor -->
  <!-- start class org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder -->
  <class name="CommonAttributesDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonAttributesDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="start" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Index of the first document/ search result to fetch. The index starts at zero.
 
 @see org.carrot2.core.attribute.CommonAttributes#start]]>
      </doc>
    </method>
    <method name="start" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Index of the first document/ search result to fetch. The index starts at zero.
 
 @see org.carrot2.core.attribute.CommonAttributes#start]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum number of documents/ search results to fetch. The query hint can be used
by clustering algorithms to avoid creating trivial clusters (combination of query words).
 
 @see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum number of documents/ search results to fetch. The query hint can be used
by clustering algorithms to avoid creating trivial clusters (combination of query words).
 
 @see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Query to perform.
 
 @see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Query to perform.
 
 @see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </method>
    <method name="resultsTotal" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Estimated total number of matching documents.
 
 @see org.carrot2.core.attribute.CommonAttributes#resultsTotal]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[Documents returned by the search engine/ document retrieval system or
documents passed as input to the clustering algorithm.
 
 @see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[Documents returned by the search engine/ document retrieval system or
documents passed as input to the clustering algorithm.
 
 @see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </method>
    <method name="documents" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents returned by the search engine/ document retrieval system or
documents passed as input to the clustering algorithm.
 
 @see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clusters created by the clustering algorithm.
 
 @see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </method>
    <method name="processingTimeTotal" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Total processing time in milliseconds. A sum of processing times of all components in the chain.
Total processing time may be greater than the sum of
{@link org.carrot2.core.attribute.CommonAttributes#processingTimeTotal} and {@link org.carrot2.core.attribute.CommonAttributes#processingTimeAlgorithm}.
 
 @see org.carrot2.core.attribute.CommonAttributes#processingTimeTotal]]>
      </doc>
    </method>
    <method name="processingTimeSource" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Data source processing time in milliseconds. A sum of processing times of all
{@link org.carrot2.core.IDocumentSource}s in the chain, including the
{@link org.carrot2.core.IProcessingComponent#beforeProcessing()} and
{@link org.carrot2.core.IProcessingComponent#afterProcessing()} hooks.
 
 @see org.carrot2.core.attribute.CommonAttributes#processingTimeSource]]>
      </doc>
    </method>
    <method name="processingTimeAlgorithm" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Algorithm processing time in milliseconds. A sum of processing times of all
{@link org.carrot2.core.IClusteringAlgorithm}s in the chain, including the
{@link org.carrot2.core.IProcessingComponent#beforeProcessing()} and
{@link org.carrot2.core.IProcessingComponent#afterProcessing()} hooks.
 
 @see org.carrot2.core.attribute.CommonAttributes#processingTimeAlgorithm]]>
      </doc>
    </method>
    <method name="processingResultTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Processing result title. A typical title for a processing result will be the query
used to fetch documents from that source. For certain document sources the query
may not be needed (on-disk XML, feed of syndicated news); in such cases, the input
component should set its title properly for visual interfaces such as the
workbench.
 
 @see org.carrot2.core.attribute.CommonAttributes#processingResultTitle]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.core.attribute.CommonAttributes} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.CommonAttributesDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.core.attribute.CommonAttributesDescriptor.Attributes -->
  <class name="CommonAttributesDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="start" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="processingTimeTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="processingTimeSource" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="processingTimeAlgorithm" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="processingResultTitle" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.core.attribute.CommonAttributes} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.CommonAttributesDescriptor.Attributes -->
  <!-- start class org.carrot2.core.attribute.CommonAttributesDescriptor.Keys -->
  <class name="CommonAttributesDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommonAttributesDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="START" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#start}.]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#results}.]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#query}.]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#resultsTotal}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#clusters}.]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#processingTimeTotal}.]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_SOURCE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#processingTimeSource}.]]>
      </doc>
    </field>
    <field name="PROCESSING_TIME_ALGORITHM" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#processingTimeAlgorithm}.]]>
      </doc>
    </field>
    <field name="PROCESSING_RESULT_TITLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.core.attribute.CommonAttributes#processingResultTitle}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.core.attribute.CommonAttributes} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.CommonAttributesDescriptor.Keys -->
  <!-- start class org.carrot2.core.attribute.Init -->
  <class name="Init"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Marks attributes that will be bound upon initialization of a Carrot<sup>2</sup>
 component instance. Please see
 {@link IProcessingComponent#init(IControllerContext)} for details.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.Init -->
  <!-- start class org.carrot2.core.attribute.Internal -->
  <class name="Internal"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Denotes attributes the end-user applications may not want to display in their User
 Interfaces.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.Internal -->
  <!-- start class org.carrot2.core.attribute.InternalAttributePredicate -->
  <class name="InternalAttributePredicate" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Predicate&lt;org.carrot2.util.attribute.AttributeDescriptor&gt;"/>
    <constructor name="InternalAttributePredicate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Evaluates to <code>true</code> for attributes that have the {@link Internal}
 annotation, no matter the {@link Internal#configuration()} value.]]>
      </doc>
    </constructor>
    <constructor name="InternalAttributePredicate" type="java.lang.Boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Evaluates to <code>true</code> for attributes that have the {@link Internal}
 annotation whose {@link Internal#configuration()} is set to the provided value.]]>
      </doc>
    </constructor>
    <method name="apply" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="descriptor" type="org.carrot2.util.attribute.AttributeDescriptor"/>
    </method>
    <doc>
    <![CDATA[A predicate that tests whether an {@link AttributeDescriptor} refers to an
 {@link Internal} attribute.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.InternalAttributePredicate -->
  <!-- start class org.carrot2.core.attribute.Processing -->
  <class name="Processing"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Marks attributes that will be bound before and after Carrot<sup>2</sup> component
 performs processing. Please see {@link IProcessingComponent#beforeProcessing()} and
 {@link IProcessingComponent#afterProcessing()} for details.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.core.attribute.Processing -->
</package>
<package name="org.carrot2.log4j">
  <!-- start class org.carrot2.log4j.BufferingAppender -->
  <class name="BufferingAppender" extends="org.apache.log4j.WriterAppender"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BufferingAppender"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attach" return="org.carrot2.log4j.BufferingAppender"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <doc>
      <![CDATA[@param loggerName Attach to the logger with the given name. <code>null</code> indicates
 root logger.]]>
      </doc>
    </method>
    <method name="attachToRootLogger" return="org.carrot2.log4j.BufferingAppender"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new buffering appender and attaches it to the root logger.]]>
      </doc>
    </method>
    <method name="detach"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <param name="appender" type="org.carrot2.log4j.BufferingAppender"/>
      <doc>
      <![CDATA[@param loggerName Detach from the logger with the given name. <code>null</code> indicates
 root logger.]]>
      </doc>
    </method>
    <method name="detachFromRootLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appender" type="org.carrot2.log4j.BufferingAppender"/>
      <doc>
      <![CDATA[Detaches the provided appender from the root logger.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear the log buffer.]]>
      </doc>
    </method>
    <method name="getBuffer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Buffering appender used for assertions on log streams.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.log4j.BufferingAppender -->
</package>
<package name="org.carrot2.matrix">
  <!-- start class org.carrot2.matrix.MatrixUtils -->
  <class name="MatrixUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MatrixUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="normalizeColumnL2" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="work" type="double[]"/>
      <doc>
      <![CDATA[Normalizes column vectors of matrix <code>A</code> so that their L2 norm (Euclidean
 distance) is equal to 1.0.
 
 @param A matrix to normalize
 @param work a temporary array of <code>A.columns()</code> doubles that will be
            overwritten with column's original L2 norms. Supply a non-null pointer
            to avoid continuous allocation/freeing of memory when doing calculations
            in a loop. If this parameter is <code>null</code>, a new array will be
            allocated every time this method is called.
 @return A with length-normalized columns (for convenience only)]]>
      </doc>
    </method>
    <method name="normalizeSparseColumnL2" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="work" type="double[]"/>
      <doc>
      <![CDATA[Normalizes column vectors of a sparse matrix <code>A</code> so that their L2 norm
 (Euclidean distance) is equal to 1.0.
 
 @param A matrix to normalize
 @param work a temporary array of <code>A.columns()</code> doubles that will be
            overwritten with column's original L2 norms. Supply a non-null pointer
            to avoid continuous allocation/freeing of memory when doing calculations
            in a loop. If this parameter is <code>null</code>, a new array will be
            allocated every time this method is called.
 @return A with length-normalized columns (for convenience only)]]>
      </doc>
    </method>
    <method name="normalizeColumnL1" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="work" type="double[]"/>
      <doc>
      <![CDATA[Normalizes column vectors of matrix <code>A</code> so that their L1 norm is equal
 to 1.0.
 
 @param A matrix to normalize
 @param work a temporary array of <code>A.columns()</code> doubles that will be
            overwritten with column's original L1 norms. Supply a non-null pointer
            to avoid continuous allocation/freeing of memory when doing calculations
            in a loop. If this parameter is <code>null</code>, a new array will be
            allocated every time this method is called.
 @return A with L1-normalized columns (for convenience only)]]>
      </doc>
    </method>
    <method name="computeOrthogonality" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Computes the orthogonality of matrix A. The orthogonality is computed as a sum of
 k*(k-1)/2 inner products of A's column vectors, k being the number of columns of A,
 and then normalized to the 0.0 - 1.0 range.
 
 @param A matrix to compute orthogonality for, must be column length-normalized
 @return orthogonality of matrix A. 0.0 denotes a perfect orthogonality between
         every pair of A's column. 1.0 indicates that all columns of A are parallel.]]>
      </doc>
    </method>
    <method name="computeSparseness" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Computers sparseness of matrix <code>A</code> as a fraction of non-zero elements to
 the total number of elements.
 
 @return sparseness of <code>A</code>, which is a value between 0.0 (all elements
         are zero) and 1.0 (all elements are non-zero)]]>
      </doc>
    </method>
    <method name="minInColumns" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="indices" type="int[]"/>
      <param name="minValues" type="double[]"/>
      <doc>
      <![CDATA[Finds the first minimum element in each column of matrix A. When calculating
 minimum values for each column this version should perform better than scanning
 each column separately.
 
 @param indices an array of <code>A.columns()</code> integers in which indices of
            the first minimum element will be stored. If this parameter is
            <code>null</code> a new array will be allocated.
 @param minValues an array of <code>A.columns()</code> doubles in which values of
            each column's minimum elements will be stored. If this parameter is
            <code>null</code> a new array will be allocated.
 @return for each column of A the index of the minimum element]]>
      </doc>
    </method>
    <method name="maxInColumns" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="indices" type="int[]"/>
      <param name="maxValues" type="double[]"/>
      <doc>
      <![CDATA[Finds the first maximum element in each column of matrix A. When calculating
 maximum values for each column this version should perform better than scanning
 each column separately.
 
 @param A
 @param indices an array of <code>A.columns()</code> integers in which indices of
            the first maximum element will be stored. If this parameter is
            <code>null</code> a new array will be allocated.
 @param maxValues an array of <code>A.columns()</code> doubles in which values of
            each column's maximum elements will be stored. If this parameter is
            <code>null</code> a new array will be 
            allocated.
 @return for each column of A the index of the maximum element]]>
      </doc>
    </method>
    <method name="maxInColumns" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="indices" type="int[]"/>
      <param name="maxValues" type="double[]"/>
      <param name="transform" type="org.apache.mahout.math.function.DoubleFunction"/>
    </method>
    <method name="maxInRow" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="row" type="int"/>
      <doc>
      <![CDATA[Finds the index of the first maximum element in given row of <code>A</code>.
 
 @param A the matrix to search
 @param row the row to search
 @return index of the first maximum element or -1 if the input matrix is
         <code>null</code> or has zero size.]]>
      </doc>
    </method>
    <method name="sumRows" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="sums" type="double[]"/>
      <doc>
      <![CDATA[Calculates the sum of rows of matrix <code>A</code>.
 
 @param sums an array to store the results. If the array is <code>null</code> or
            does not match the number of rows in matrix <code>A</code>, a new array
            will be created.
 @return sums of rows of <code>A</code>]]>
      </doc>
    </method>
    <method name="frobeniusNorm" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Calculates the Frobenius norm of a matrix.
 
 @see <a href="http://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm">Frobenius
      norm</a>]]>
      </doc>
    </method>
    <method name="sortedRowsView" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="comparator" type="com.carrotsearch.hppc.sorting.IndirectComparator"/>
      <doc>
      <![CDATA[Returns view of the provided matrix with rows permuted according to the order
 defined by the provided comparator.
 
 @param matrix to permute
 @param comparator to use
 @return view of the provided matrix with rows permuted according to the order
         defined by the provided comparator.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A set of <code>DoubleMatrix2D</code> shorthands and utility methods.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.MatrixUtils -->
</package>
<package name="org.carrot2.matrix.factorization">
  <!-- start interface org.carrot2.matrix.factorization.IIterativeMatrixFactorization -->
  <interface name="IIterativeMatrixFactorization"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.IMatrixFactorization"/>
    <method name="getApproximationError" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns approximation error achieved after the last iteration of the
 algorithm or -1 if the approximation error is not available.
 
 @return approximation error or -1]]>
      </doc>
    </method>
    <method name="getIterationsCompleted" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of iterations the algorithm has completed.
 
 @return the number of iterations the algorithm has completed]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Performs an iterative matrix factorization.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.matrix.factorization.IIterativeMatrixFactorization -->
  <!-- start interface org.carrot2.matrix.factorization.IMatrixFactorization -->
  <interface name="IMatrixFactorization"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getU" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the U matrix (base vectors matrix).
 
 @return U matrix]]>
      </doc>
    </method>
    <method name="getV" return="org.apache.mahout.math.matrix.DoubleMatrix2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the V matrix (coefficient matrix)
 
 @return V matrix]]>
      </doc>
    </method>
    <doc>
    <![CDATA[For an <i>m</i> &times; <i>n</i> matrix <i>A</i> and given <i>k</i>, computes an <i>m
 </i> &times; <i>k</i> matrix <i>U</i> and <i>k</i> &times; <i>n</i> matrix <i>V'</i>
 such that <i>A ~= UV'</i>.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.matrix.factorization.IMatrixFactorization -->
  <!-- start interface org.carrot2.matrix.factorization.IMatrixFactorizationFactory -->
  <interface name="IMatrixFactorizationFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Factorizes matrix <code>A</code>.
 
 @param A matrix to be factorized.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory of {@link IMatrixFactorization}s.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.matrix.factorization.IMatrixFactorizationFactory -->
  <!-- start class org.carrot2.matrix.factorization.IterationNumberGuesser -->
  <class name="IterationNumberGuesser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IterationNumberGuesser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setEstimatedIterationsNumber" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="factory" type="org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory"/>
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="qualityLevel" type="org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality"/>
      <doc>
      <![CDATA[Sets the guesstimated iterations number in the <code>factory</code>. Different
 models are used depending on the actual factorization algorithm, the seeding
 strategy and the <code>qualityLevel</code>. For the time being a crude linear model
 is assumed based on:
 <ul>
 <li>the number of columns in <code>A</code>. The number of rows is assumed to be
 2.8 bigger than the number of rows (2.8 is pretty much random, the value is taken
 from an application to search results clustering). In case matrix has different
 proportions, the size will be scaled so that the cardinality of the matrix (total
 number of elements) is maintained. The model supports column counts (after scaling)
 ranging from 50 to 400.
 <li>the number of requested base vectors (read from the factorization factory). The
 model supports k = 5 ... 50.
 </ul>
 A new maximum number of iterations will be set in the factory <b>only </b> if the
 requested parameters fall within the ranges supported by the model. In this case
 <code>true</code> will be returned.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class helps to guesstimate the number of iterations for iterative factorization
 algorithms. Note: for the time being it uses a very simple linear model with lots of
 dodgy assumptions.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.IterationNumberGuesser -->
  <!-- start class org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality -->
  <class name="IterationNumberGuesser.FactorizationQuality" extends="java.lang.Enum&lt;org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Factorization quality.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality -->
  <!-- start class org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory -->
  <class name="IterativeMatrixFactorizationFactory" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.IMatrixFactorizationFactory"/>
    <constructor name="IterativeMatrixFactorizationFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setK"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="int"/>
      <doc>
      <![CDATA[Sets the number of base vectors <i>k </i>.
 
 @param k the number of base vectors]]>
      </doc>
    </method>
    <method name="getK" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of base vectors <i>k </i>.]]>
      </doc>
    </method>
    <method name="createSeedingStrategy" return="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@link RandomSeedingStrategy} with constant seed.]]>
      </doc>
    </method>
    <method name="getMaxIterations" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum number of iterations used by this factory.]]>
      </doc>
    </method>
    <method name="setMaxIterations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxIterations" type="int"/>
      <doc>
      <![CDATA[Sets the maximum number of iterations to be used by this factory.]]>
      </doc>
    </method>
    <method name="getStopThreshold" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the stop threshold used by this factory.]]>
      </doc>
    </method>
    <method name="setStopThreshold"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stopThreshold" type="double"/>
      <doc>
      <![CDATA[Sets the stop threshold to be used by this factory.]]>
      </doc>
    </method>
    <method name="getSeedingFactory" return="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link ISeedingStrategyFactory} used by this factory.]]>
      </doc>
    </method>
    <method name="setSeedingFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seedingFactory" type="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"/>
      <doc>
      <![CDATA[Sets the {@link ISeedingStrategyFactory} to be used by this factory.
 
 @param seedingFactory]]>
      </doc>
    </method>
    <method name="isOrdered" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <code>true</code> when the factorization is set to generate an ordered
 basis.]]>
      </doc>
    </method>
    <method name="setOrdered"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ordered" type="boolean"/>
      <doc>
      <![CDATA[Set to <code>true</code> to generate an ordered basis.
 
 @param ordered]]>
      </doc>
    </method>
    <field name="k" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The number of base vectors]]>
      </doc>
    </field>
    <field name="DEFAULT_K" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default number of base vectors]]>
      </doc>
    </field>
    <field name="maxIterations" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The maximum number of iterations the algorithm is allowed to complete]]>
      </doc>
    </field>
    <field name="DEFAULT_MAX_ITERATIONS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default number of maximum iterations]]>
      </doc>
    </field>
    <field name="stopThreshold" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The algorithm's stop threshold]]>
      </doc>
    </field>
    <field name="DEFAULT_STOP_THRESHOLD" type="double"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default stop threshold]]>
      </doc>
    </field>
    <field name="seedingFactory" type="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Matrix seeding strategy factory]]>
      </doc>
    </field>
    <field name="DEFAULT_SEEDING_FACTORY" type="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default matrix seeding strategy factory]]>
      </doc>
    </field>
    <field name="ordered" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Order base vectors according to their 'activity']]>
      </doc>
    </field>
    <field name="DEFAULT_ORDERED" type="boolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A factory for {@link IMatrixFactorization}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory -->
  <!-- start class org.carrot2.matrix.factorization.KMeansMatrixFactorization -->
  <class name="KMeansMatrixFactorization" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KMeansMatrixFactorization" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the KMeansMatrixFactorization object for matrix A. Before accessing
 results, perform computations by calling the {@link #compute()} method.
 
 @param A matrix to be factorized. The matrix must have Euclidean length-normalized
            columns.]]>
      </doc>
    </constructor>
    <method name="compute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Performs matrix factorization using the K-means clustering algorithm. This kind of
 factorization is sometimes referred to as Concept Decomposition Factorization.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.KMeansMatrixFactorization -->
  <!-- start class org.carrot2.matrix.factorization.KMeansMatrixFactorizationFactory -->
  <class name="KMeansMatrixFactorizationFactory" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KMeansMatrixFactorizationFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[{@link KMeansMatrixFactorization} factory.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.KMeansMatrixFactorizationFactory -->
  <!-- start class org.carrot2.matrix.factorization.LocalNonnegativeMatrixFactorization -->
  <class name="LocalNonnegativeMatrixFactorization" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalNonnegativeMatrixFactorization" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the LocalNonnegativeMatrixFactorization object for matrix A. Before
 accessing results, perform computations by calling the {@link #compute()}method.
 
 @param A matrix to be factorized]]>
      </doc>
    </constructor>
    <method name="compute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Performs matrix factorization using the Local Non-negative Matrix Factorization
 algorithm with minimization of the Kullback-Leibler divergence between A and UV' and
 multiplicative updating.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.LocalNonnegativeMatrixFactorization -->
  <!-- start class org.carrot2.matrix.factorization.LocalNonnegativeMatrixFactorizationFactory -->
  <class name="LocalNonnegativeMatrixFactorizationFactory" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LocalNonnegativeMatrixFactorizationFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[{@link LocalNonnegativeMatrixFactorization} factory.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.LocalNonnegativeMatrixFactorizationFactory -->
  <!-- start class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationED -->
  <class name="NonnegativeMatrixFactorizationED" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NonnegativeMatrixFactorizationED" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the NNINonnegativeMatrixFactorizationED object for matrix A. Before
 accessing results, perform computations by calling the {@link #compute()}method.
 
 @param A matrix to be factorized]]>
      </doc>
    </constructor>
    <method name="compute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Performs matrix factorization using the Non-negative Matrix Factorization algorithm
 with minimization of Euclidean Distance between A and UV' and multiplicative updating.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationED -->
  <!-- start class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationEDFactory -->
  <class name="NonnegativeMatrixFactorizationEDFactory" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NonnegativeMatrixFactorizationEDFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[A factory for {@link NonnegativeMatrixFactorizationED}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationEDFactory -->
  <!-- start class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationKL -->
  <class name="NonnegativeMatrixFactorizationKL" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NonnegativeMatrixFactorizationKL" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the NonnegativeMatrixFactorizationKL object for matrix A. Before accessing
 results, perform computations by calling the {@link #compute()} method.
 
 @param A matrix to be factorized]]>
      </doc>
    </constructor>
    <method name="compute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Performs matrix factorization using the Non-negative Matrix Factorization by
 minimization of Kullback-Leibler divergence between A and UV' and multiplicative
 updating.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationKL -->
  <!-- start class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationKLFactory -->
  <class name="NonnegativeMatrixFactorizationKLFactory" extends="org.carrot2.matrix.factorization.IterativeMatrixFactorizationFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NonnegativeMatrixFactorizationKLFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <doc>
    <![CDATA[Factory for {@link NonnegativeMatrixFactorizationKL}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.NonnegativeMatrixFactorizationKLFactory -->
  <!-- start class org.carrot2.matrix.factorization.PartialSingularValueDecomposition -->
  <class name="PartialSingularValueDecomposition" extends="org.carrot2.matrix.factorization.MatrixFactorizationBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.IMatrixFactorization"/>
    <constructor name="PartialSingularValueDecomposition" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Computes a partial SVD of a matrix. Before accessing results, perform computations
 by calling the {@link #compute()}method.
 
 @param A matrix to be factorized]]>
      </doc>
    </constructor>
    <method name="compute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSingularValues" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns singular values of the matrix.]]>
      </doc>
    </method>
    <method name="setK"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="int"/>
      <doc>
      <![CDATA[Sets the number of base vectors <i>k </i>.
 
 @param k the number of base vectors]]>
      </doc>
    </method>
    <method name="getK" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of base vectors <i>k </i>.]]>
      </doc>
    </method>
    <field name="k" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The desired number of base vectors]]>
      </doc>
    </field>
    <field name="DEFAULT_K" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default number of desired base vectors]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs matrix factorization using the Singular Value Decomposition algorithm.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.PartialSingularValueDecomposition -->
  <!-- start class org.carrot2.matrix.factorization.PartialSingularValueDecompositionFactory -->
  <class name="PartialSingularValueDecompositionFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.IMatrixFactorizationFactory"/>
    <constructor name="PartialSingularValueDecompositionFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the factory that creates factorizations that compute the maximum number of
 base vectors.]]>
      </doc>
    </constructor>
    <method name="factorize" return="org.carrot2.matrix.factorization.IMatrixFactorization"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <method name="setK"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="k" type="int"/>
      <doc>
      <![CDATA[Sets the number of base vectors <i>k </i>.
 
 @param k the number of base vectors]]>
      </doc>
    </method>
    <method name="getK" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of base vectors <i>k </i>.]]>
      </doc>
    </method>
    <field name="k" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The desired number of base vectors]]>
      </doc>
    </field>
    <field name="DEFAULT_K" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default desired number of base vectors]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Factory for {@link PartialSingularValueDecomposition}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.PartialSingularValueDecompositionFactory -->
</package>
<package name="org.carrot2.matrix.factorization.seeding">
  <!-- start interface org.carrot2.matrix.factorization.seeding.ISeedingStrategy -->
  <interface name="ISeedingStrategy"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="seed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="U" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="V" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <doc>
      <![CDATA[Initializes values of the provided U and V matrices. The A matrix is the
 input matrix to be factorized.
 
 @param A matrix to be factorized
 @param U left factorized matrix to be seeded
 @param V right factorized matrix to be seeded]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Defines the seeding routine to be used as part of a matrix factorization
 algorithm.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.matrix.factorization.seeding.ISeedingStrategy -->
  <!-- start interface org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory -->
  <interface name="ISeedingStrategyFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createSeedingStrategy" return="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link ISeedingStrategy}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A factory that produces objects implementing the {@link ISeedingStrategy}
 interface.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory -->
  <!-- start class org.carrot2.matrix.factorization.seeding.KMeansSeedingStrategy -->
  <class name="KMeansSeedingStrategy" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"/>
    <constructor name="KMeansSeedingStrategy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the KMeansSeedingStrategy.]]>
      </doc>
    </constructor>
    <constructor name="KMeansSeedingStrategy" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the KMeansSeedingStrategy.
 
 @param maxIterations maximum number of KMeans iterations.]]>
      </doc>
    </constructor>
    <method name="seed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="U" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="V" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Matrix seeding based on the k-means algorithms.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.seeding.KMeansSeedingStrategy -->
  <!-- start class org.carrot2.matrix.factorization.seeding.KMeansSeedingStrategyFactory -->
  <class name="KMeansSeedingStrategyFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"/>
    <constructor name="KMeansSeedingStrategyFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createSeedingStrategy" return="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMaxIterations" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum number of iterations the k-means algorithm is allowed
 to perform.]]>
      </doc>
    </method>
    <method name="setMaxIterations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxIterations" type="int"/>
      <doc>
      <![CDATA[Sets the maximum number of iterations the k-means algorithm is allowed to
 perform.
 
 @param maxIterations]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Seeding based on a k-means clustering algorithm.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.seeding.KMeansSeedingStrategyFactory -->
  <!-- start class org.carrot2.matrix.factorization.seeding.RandomSeedingStrategy -->
  <class name="RandomSeedingStrategy" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"/>
    <constructor name="RandomSeedingStrategy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates RandomSeedingStrategy with seed based on current time.]]>
      </doc>
    </constructor>
    <constructor name="RandomSeedingStrategy" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates RandomSeedingStrategy with given random seed.
 
 @param seed]]>
      </doc>
    </constructor>
    <method name="seed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="A" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="U" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
      <param name="V" type="org.apache.mahout.math.matrix.DoubleMatrix2D"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Random matrix factorization seeding.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.seeding.RandomSeedingStrategy -->
  <!-- start class org.carrot2.matrix.factorization.seeding.RandomSeedingStrategyFactory -->
  <class name="RandomSeedingStrategyFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.matrix.factorization.seeding.ISeedingStrategyFactory"/>
    <constructor name="RandomSeedingStrategyFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the factory with seeding based on current system time.]]>
      </doc>
    </constructor>
    <constructor name="RandomSeedingStrategyFactory" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates the factory with given seed value.]]>
      </doc>
    </constructor>
    <method name="createSeedingStrategy" return="org.carrot2.matrix.factorization.seeding.ISeedingStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSeed" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the random seed to be used.]]>
      </doc>
    </method>
    <method name="setSeed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seed" type="int"/>
      <doc>
      <![CDATA[Sets the random seed to be used. Disables seeding with current system
 time.
 
 @param seed]]>
      </doc>
    </method>
    <method name="getDateSeed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the current system time is used to generate seed.]]>
      </doc>
    </method>
    <method name="setDateSeed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dateSeed" type="boolean"/>
      <doc>
      <![CDATA[Set date seed to true to use current system time as random seed.
 
 @param dateSeed]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Creates random seeding strategies.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.matrix.factorization.seeding.RandomSeedingStrategyFactory -->
</package>
<package name="org.carrot2.output.metrics">
  <!-- start class org.carrot2.output.metrics.ClusteringMetricsCalculator -->
  <class name="ClusteringMetricsCalculator" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusteringMetricsCalculator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <field name="contamination" type="org.carrot2.output.metrics.ContaminationMetric"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Contamination metric.]]>
      </doc>
    </field>
    <field name="precisionRecall" type="org.carrot2.output.metrics.PrecisionRecallMetric"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Precision and recall based metrics.]]>
      </doc>
    </field>
    <field name="normalizedMutualInformation" type="org.carrot2.output.metrics.NormalizedMutualInformationMetric"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Normalized Mutual Information metric.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Calculates a set of quality metrics for clusters.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ClusteringMetricsCalculator -->
  <!-- start class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor -->
  <class name="ClusteringMetricsCalculatorDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="ClusteringMetricsCalculatorDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.output.metrics.ClusteringMetricsCalculator} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor -->
  <!-- start class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.AttributeBuilder -->
  <class name="ClusteringMetricsCalculatorDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusteringMetricsCalculatorDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.output.metrics.ClusteringMetricsCalculator} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.Attributes -->
  <class name="ClusteringMetricsCalculatorDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.output.metrics.ClusteringMetricsCalculator} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.Attributes -->
  <!-- start class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.Keys -->
  <class name="ClusteringMetricsCalculatorDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ClusteringMetricsCalculatorDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.output.metrics.ClusteringMetricsCalculator} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ClusteringMetricsCalculatorDescriptor.Keys -->
  <!-- start class org.carrot2.output.metrics.ContaminationMetric -->
  <class name="ContaminationMetric" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetric"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ContaminationMetric"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="CONTAMINATION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Key for the contamination value of a cluster.]]>
      </doc>
    </field>
    <field name="weightedAverageContamination" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average contamination of the whole cluster set, weighted by the size of cluster.]]>
      </doc>
    </field>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Calculate contamination metric.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Computes cluster contamination. If a cluster groups documents found in the same
 {@link Document#PARTITIONS}, its contamination is 0. If a cluster groups an equally
 distributed mix of all partitions, its contamination is 1.0. For a full definition,
 please see section 4.4.1 of <a
 href="http://project.carrot2.org/publications/osinski04-dimensionality.pdf">this
 work</a>.
 <p>
 Contamination is calculated for top-level clusters only, taking into account documents
 from the cluster and all subclusters. Finally, contamination will be calculated only if
 all input documents have non-blank {@link Document#PARTITIONS}s.
 </p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ContaminationMetric -->
  <!-- start class org.carrot2.output.metrics.ContaminationMetricDescriptor -->
  <class name="ContaminationMetricDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="ContaminationMetricDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.output.metrics.ContaminationMetricDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.output.metrics.ContaminationMetric} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ContaminationMetricDescriptor -->
  <!-- start class org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder -->
  <class name="ContaminationMetricDescriptor.AttributeBuilder" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ContaminationMetricDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="weightedAverageContamination" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average contamination of the whole cluster set, weighted by the size of cluster.
 
 @see org.carrot2.output.metrics.ContaminationMetric#weightedAverageContamination]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Calculate contamination metric.
 
 @see org.carrot2.output.metrics.ContaminationMetric#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Calculate contamination metric.
 
 @see org.carrot2.output.metrics.ContaminationMetric#enabled]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.ContaminationMetric#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.ContaminationMetric#documents]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.ContaminationMetric#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.ContaminationMetric#clusters]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.output.metrics.ContaminationMetric} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ContaminationMetricDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.output.metrics.ContaminationMetricDescriptor.Attributes -->
  <class name="ContaminationMetricDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="weightedAverageContamination" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.output.metrics.ContaminationMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ContaminationMetricDescriptor.Attributes -->
  <!-- start class org.carrot2.output.metrics.ContaminationMetricDescriptor.Keys -->
  <class name="ContaminationMetricDescriptor.Keys" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ContaminationMetricDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="WEIGHTED_AVERAGE_CONTAMINATION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.ContaminationMetric#weightedAverageContamination}.]]>
      </doc>
    </field>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.ContaminationMetric#enabled}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.ContaminationMetric#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.ContaminationMetric#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.output.metrics.ContaminationMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.ContaminationMetricDescriptor.Keys -->
  <!-- start interface org.carrot2.output.metrics.IClusteringMetric -->
  <interface name="IClusteringMetric"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="calculate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Triggers calculation of the metric. All {@link Processing} {@link Input} attributes
 will have been bound before a call to this method.]]>
      </doc>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return <code>true</code> if this metric should be calculated.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A clustering quality metric. Calculates some metric reflecting the quality of
 clustering. This interface does not impose any specific constraints on the values of
 the metric, such as type and range. Instead, specific implementations should annotate
 the values to be returned with {@link Output} {@link Processing} {@link Attribute}.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.output.metrics.IClusteringMetric -->
  <!-- start class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor -->
  <class name="IdealPartitioningBasedMetricDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="IdealPartitioningBasedMetricDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.output.metrics.IdealPartitioningBasedMetric} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor -->
  <!-- start class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder -->
  <class name="IdealPartitioningBasedMetricDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdealPartitioningBasedMetricDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="partitionIdFieldName" return="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Partition id field name.
 
 @see org.carrot2.output.metrics.IdealPartitioningBasedMetric#partitionIdFieldName]]>
      </doc>
    </method>
    <method name="partitionIdFieldName" return="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Partition id field name.
 
 @see org.carrot2.output.metrics.IdealPartitioningBasedMetric#partitionIdFieldName]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.output.metrics.IdealPartitioningBasedMetric} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Attributes -->
  <class name="IdealPartitioningBasedMetricDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="partitionIdFieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.output.metrics.IdealPartitioningBasedMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Attributes -->
  <!-- start class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Keys -->
  <class name="IdealPartitioningBasedMetricDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdealPartitioningBasedMetricDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="PARTITION_ID_FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.IdealPartitioningBasedMetric#partitionIdFieldName}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.output.metrics.IdealPartitioningBasedMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Keys -->
  <!-- start class org.carrot2.output.metrics.NormalizedMutualInformationMetric -->
  <class name="NormalizedMutualInformationMetric" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetric"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NormalizedMutualInformationMetric"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="normalizedMutualInformation" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Normalized Mutual Information of the whole cluster set.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Calculate Normalized Mutual Information metric.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Computes Normalized Mutual Information (NMI) metric for the cluster set.
 <p>
 Metrics will be calculated only if all input documents have non-blank
 {@link Document#PARTITIONS}.
 </p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.NormalizedMutualInformationMetric -->
  <!-- start class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor -->
  <class name="NormalizedMutualInformationMetricDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="NormalizedMutualInformationMetricDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor -->
  <!-- start class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder -->
  <class name="NormalizedMutualInformationMetricDescriptor.AttributeBuilder" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NormalizedMutualInformationMetricDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="normalizedMutualInformation" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Normalized Mutual Information of the whole cluster set.
 
 @see org.carrot2.output.metrics.NormalizedMutualInformationMetric#normalizedMutualInformation]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.NormalizedMutualInformationMetric#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.NormalizedMutualInformationMetric#documents]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.NormalizedMutualInformationMetric#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.NormalizedMutualInformationMetric#clusters]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Calculate Normalized Mutual Information metric.
 
 @see org.carrot2.output.metrics.NormalizedMutualInformationMetric#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Calculate Normalized Mutual Information metric.
 
 @see org.carrot2.output.metrics.NormalizedMutualInformationMetric#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.Attributes -->
  <class name="NormalizedMutualInformationMetricDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="normalizedMutualInformation" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.Attributes -->
  <!-- start class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.Keys -->
  <class name="NormalizedMutualInformationMetricDescriptor.Keys" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NormalizedMutualInformationMetricDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="NORMALIZED_MUTUAL_INFORMATION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric#normalizedMutualInformation}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric#clusters}.]]>
      </doc>
    </field>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.output.metrics.NormalizedMutualInformationMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.NormalizedMutualInformationMetricDescriptor.Keys -->
  <!-- start class org.carrot2.output.metrics.PrecisionRecallMetric -->
  <class name="PrecisionRecallMetric" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetric"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PrecisionRecallMetric"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="BEST_F_MEASURE_PARTITION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Partition on which the cluster achieved best F-Score value. Value type:
 <code>Object</code>. See {@link Document#PARTITIONS} for more information.]]>
      </doc>
    </field>
    <field name="weightedAveragePrecision" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average precision of the whole cluster set, weighted by cluster size.]]>
      </doc>
    </field>
    <field name="weightedAverageRecall" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average recall of the whole cluster set, weighted by cluster size.]]>
      </doc>
    </field>
    <field name="weightedAverageFMeasure" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average F-measure of the whole cluster set, weighted by cluster size.]]>
      </doc>
    </field>
    <field name="precisionByPartition" type="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Precision by partition.]]>
      </doc>
    </field>
    <field name="recallByPartition" type="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Recall by partition.]]>
      </doc>
    </field>
    <field name="fMeasureByPartition" type="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[F-measure by partition.]]>
      </doc>
    </field>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Calculate F-measure.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Computes precision, recall and F-metric for all partitions against the provided
 clusters.
 <p>
 Metrics will be calculated only if all input documents have non-blank
 {@link Document#PARTITIONS}.
 </p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.PrecisionRecallMetric -->
  <!-- start class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor -->
  <class name="PrecisionRecallMetricDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="PrecisionRecallMetricDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.output.metrics.PrecisionRecallMetric} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor -->
  <!-- start class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder -->
  <class name="PrecisionRecallMetricDescriptor.AttributeBuilder" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PrecisionRecallMetricDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="weightedAveragePrecision" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average precision of the whole cluster set, weighted by cluster size.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#weightedAveragePrecision]]>
      </doc>
    </method>
    <method name="weightedAverageRecall" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average recall of the whole cluster set, weighted by cluster size.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#weightedAverageRecall]]>
      </doc>
    </method>
    <method name="weightedAverageFMeasure" return="java.lang.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Average F-measure of the whole cluster set, weighted by cluster size.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#weightedAverageFMeasure]]>
      </doc>
    </method>
    <method name="precisionByPartition" return="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Precision by partition.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#precisionByPartition]]>
      </doc>
    </method>
    <method name="recallByPartition" return="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Recall by partition.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#recallByPartition]]>
      </doc>
    </method>
    <method name="fMeasureByPartition" return="java.util.Map&lt;java.lang.Object, java.lang.Double&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[F-measure by partition.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#fMeasureByPartition]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Calculate F-measure.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Calculate F-measure.
 
 @see org.carrot2.output.metrics.PrecisionRecallMetric#enabled]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.PrecisionRecallMetric#documents]]>
      </doc>
    </method>
    <method name="documents" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Document&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.PrecisionRecallMetric#documents]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.PrecisionRecallMetric#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.output.metrics.PrecisionRecallMetric#clusters]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.output.metrics.PrecisionRecallMetric} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.Attributes -->
  <class name="PrecisionRecallMetricDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="weightedAveragePrecision" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="weightedAverageRecall" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="weightedAverageFMeasure" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="precisionByPartition" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="recallByPartition" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="fMeasureByPartition" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.output.metrics.PrecisionRecallMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.Attributes -->
  <!-- start class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.Keys -->
  <class name="PrecisionRecallMetricDescriptor.Keys" extends="org.carrot2.output.metrics.IdealPartitioningBasedMetricDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PrecisionRecallMetricDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="WEIGHTED_AVERAGE_PRECISION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#weightedAveragePrecision}.]]>
      </doc>
    </field>
    <field name="WEIGHTED_AVERAGE_RECALL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#weightedAverageRecall}.]]>
      </doc>
    </field>
    <field name="WEIGHTED_AVERAGE_F_MEASURE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#weightedAverageFMeasure}.]]>
      </doc>
    </field>
    <field name="PRECISION_BY_PARTITION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#precisionByPartition}.]]>
      </doc>
    </field>
    <field name="RECALL_BY_PARTITION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#recallByPartition}.]]>
      </doc>
    </field>
    <field name="F_MEASURE_BY_PARTITION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#fMeasureByPartition}.]]>
      </doc>
    </field>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#enabled}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.output.metrics.PrecisionRecallMetric#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.output.metrics.PrecisionRecallMetric} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.output.metrics.PrecisionRecallMetricDescriptor.Keys -->
</package>
<package name="org.carrot2.source">
  <!-- start class org.carrot2.source.MultipageSearchEngine -->
  <class name="MultipageSearchEngine" extends="org.carrot2.source.SearchEngineBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipageSearchEngine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="metadata" type="org.carrot2.source.MultipageSearchEngineMetadata"/>
      <param name="executor" type="java.util.concurrent.ExecutorService"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Run a request the search engine's API, setting <code>documents</code> to the set of
 returned documents.]]>
      </doc>
    </method>
    <method name="createFetcher" return="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="bucket" type="org.carrot2.source.MultipageSearchEngine.SearchRange"/>
      <doc>
      <![CDATA[Subclasses should override this method and return a {@link Callable} instance that
 fetches search results in the given range.
 <p>
 Note the query (if any is required) should be passed at the concrete class level.
 We are not concerned with it here.
 
 @param bucket The search range to fetch.]]>
      </doc>
    </method>
    <method name="collectDocuments"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="collector" type="java.util.Collection&lt;org.carrot2.core.Document&gt;"/>
      <param name="responses" type="org.carrot2.source.SearchEngineResponse[]"/>
      <doc>
      <![CDATA[Collects documents from an array of search engine's responses.]]>
      </doc>
    </method>
    <method name="runQuery" return="org.carrot2.source.SearchEngineResponse[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="query" type="java.lang.String"/>
      <param name="start" type="int"/>
      <param name="results" type="int"/>
      <param name="metadata" type="org.carrot2.source.MultipageSearchEngineMetadata"/>
      <param name="executor" type="java.util.concurrent.ExecutorService"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[This method implements the logic of querying a typical search engine. If the number
 of requested results is higher than the number of results on one response page,
 then multiple (possibly concurrent) requests are issued via the provided
 {@link ExecutorService}.]]>
      </doc>
    </method>
    <field name="searchMode" type="org.carrot2.source.MultipageSearchEngine.SearchMode"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Search mode defines how fetchers returned from {@link #createFetcher}
 are called.
 @see SearchMode]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A base class facilitating implementation of {@link IDocumentSource}s wrapping external
 search engines with remote/ network-based interfaces. This class implements helper
 methods for concurrent querying of search services that limit the number of search
 results returned in one request.
 
 @see SimpleSearchEngine]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngine -->
  <!-- start class org.carrot2.source.MultipageSearchEngine.SearchEngineResponseCallable -->
  <class name="MultipageSearchEngine.SearchEngineResponseCallable" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="protected"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"/>
    <constructor name="MultipageSearchEngine.SearchEngineResponseCallable"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="call" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="search" return="org.carrot2.source.SearchEngineResponse"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Performs the actual search and returns the response.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An implementation of {@link Callable} that increments page request count statistics
 before the actual search is made.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngine.SearchEngineResponseCallable -->
  <!-- start class org.carrot2.source.MultipageSearchEngine.SearchMode -->
  <class name="MultipageSearchEngine.SearchMode" extends="java.lang.Enum&lt;org.carrot2.source.MultipageSearchEngine.SearchMode&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.MultipageSearchEngine.SearchMode[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.MultipageSearchEngine.SearchMode"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Search mode for data source components that implement parallel request to some
 search service.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngine.SearchMode -->
  <!-- start class org.carrot2.source.MultipageSearchEngine.SearchRange -->
  <class name="MultipageSearchEngine.SearchRange" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="protected"
    deprecated="not deprecated">
    <constructor name="MultipageSearchEngine.SearchRange" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a new search range.
 
 @param start Start index of the first result to return (0-based).
 @param results The number of results to return. The actual number of results
            returned by a search service may be lower than this number.]]>
      </doc>
    </constructor>
    <method name="getSearchRanges" return="org.carrot2.source.MultipageSearchEngine.SearchRange[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="start" type="int"/>
      <param name="results" type="int"/>
      <param name="maxIndex" type="int"/>
      <param name="resultsPerPage" type="int"/>
      <param name="incrementByPage" type="boolean"/>
      <doc>
      <![CDATA[Given an unconstrained start and results count, adjust it to the allowed window
 and split into page buckets if necessary.]]>
      </doc>
    </method>
    <field name="start" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Start index from which to search (inclusive).]]>
      </doc>
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[How many results to fetch.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A single result window to fetch.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngine.SearchRange -->
  <!-- start class org.carrot2.source.MultipageSearchEngineDescriptor -->
  <class name="MultipageSearchEngineDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="MultipageSearchEngineDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.MultipageSearchEngineDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.MultipageSearchEngine} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngineDescriptor -->
  <!-- start class org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder -->
  <class name="MultipageSearchEngineDescriptor.AttributeBuilder" extends="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipageSearchEngineDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="searchMode" return="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.MultipageSearchEngine.SearchMode"/>
      <doc>
      <![CDATA[Search mode defines how fetchers returned from {@link org.carrot2.source.MultipageSearchEngine#createFetcher}
are called.
 
 @see org.carrot2.source.MultipageSearchEngine#searchMode]]>
      </doc>
    </method>
    <method name="searchMode" return="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.MultipageSearchEngine.SearchMode&gt;"/>
      <doc>
      <![CDATA[Search mode defines how fetchers returned from {@link org.carrot2.source.MultipageSearchEngine#createFetcher}
are called.
 
 @see org.carrot2.source.MultipageSearchEngine#searchMode]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.MultipageSearchEngine} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.MultipageSearchEngineDescriptor.Attributes -->
  <class name="MultipageSearchEngineDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="searchMode" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.MultipageSearchEngine} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngineDescriptor.Attributes -->
  <!-- start class org.carrot2.source.MultipageSearchEngineDescriptor.Keys -->
  <class name="MultipageSearchEngineDescriptor.Keys" extends="org.carrot2.source.SearchEngineBaseDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipageSearchEngineDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SEARCH_MODE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.MultipageSearchEngine#searchMode}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.MultipageSearchEngine} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngineDescriptor.Keys -->
  <!-- start class org.carrot2.source.MultipageSearchEngineMetadata -->
  <class name="MultipageSearchEngineMetadata" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipageSearchEngineMetadata" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates search engine metadata with {@link #incrementByPage} set to
 <code>false</code>.]]>
      </doc>
    </constructor>
    <constructor name="MultipageSearchEngineMetadata" type="int, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="resultsPerPage" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum number of results returned per page.]]>
      </doc>
    </field>
    <field name="maxResultIndex" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum reachable result index.]]>
      </doc>
    </field>
    <field name="incrementByPage" type="boolean"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If <code>false</code>, the start position of the search is determined by the
 result index, which is the case for most search engines. If <code>true</code>,
 the start position is determined by the page index.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata describing {@link MultipageSearchEngine} characteristics.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.MultipageSearchEngineMetadata -->
  <!-- start class org.carrot2.source.SearchEngineBase -->
  <class name="SearchEngineBase" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IDocumentSource"/>
    <constructor name="SearchEngineBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
      <param name="keepHighlights" type="boolean"/>
      <param name="fields" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Unescape HTML entities and tags from a given set of <code>fields</code> of all
 documents in the provided <code>response</code>.
 
 @param response the search engine response to clean
 @param keepHighlights set to <code>true</code> to keep query terms highlights
 @param fields names of fields to clean]]>
      </doc>
    </method>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
      <doc>
      <![CDATA[Called after a single search engine response has been fetched. The concrete
 implementation may want to override this empty implementation to e.g., clean or
 otherwise postprocess the returned results.]]>
      </doc>
    </method>
    <method name="urlEncode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[URL-encodes a string into UTF-8.]]>
      </doc>
    </method>
    <field name="SERVICE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Group} name.]]>
      </doc>
    </field>
    <field name="POSTPROCESSING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Group} name.]]>
      </doc>
    </field>
    <field name="start" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsTotal" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="java.util.Collection&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="compressed" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether the search engine returned a compressed result stream.]]>
      </doc>
    </field>
    <field name="statistics" type="org.carrot2.source.SearchEngineStats"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This component usage statistics.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A base class facilitating implementation of {@link IDocumentSource}s wrapping external
 search engines with remote/ network-based interfaces. The base class defines the common
 attribute fields used by more specific base classes and concrete implementations.
 
 @see SimpleSearchEngine
 @see MultipageSearchEngine]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineBase -->
  <!-- start class org.carrot2.source.SearchEngineBaseDescriptor -->
  <class name="SearchEngineBaseDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SearchEngineBaseDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.SearchEngineBaseDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.SearchEngineBase} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineBaseDescriptor -->
  <!-- start class org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder -->
  <class name="SearchEngineBaseDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineBaseDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="start" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#start]]>
      </doc>
    </method>
    <method name="start" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#start]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#results]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#query]]>
      </doc>
    </method>
    <method name="resultsTotal" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#resultsTotal]]>
      </doc>
    </method>
    <method name="documents" return="java.util.Collection&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.SearchEngineBase#documents]]>
      </doc>
    </method>
    <method name="compressed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether the search engine returned a compressed result stream.
 
 @see org.carrot2.source.SearchEngineBase#compressed]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.SearchEngineBase} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.SearchEngineBaseDescriptor.Attributes -->
  <class name="SearchEngineBaseDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="start" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#start]]>
      </doc>
    </field>
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </field>
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </field>
    <field name="resultsTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#resultsTotal]]>
      </doc>
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="compressed" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.SearchEngineBase} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineBaseDescriptor.Attributes -->
  <!-- start class org.carrot2.source.SearchEngineBaseDescriptor.Keys -->
  <class name="SearchEngineBaseDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineBaseDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="START" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#start}.]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#results}.]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#query}.]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#resultsTotal}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#documents}.]]>
      </doc>
    </field>
    <field name="COMPRESSED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineBase#compressed}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.SearchEngineBase} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineBaseDescriptor.Keys -->
  <!-- start class org.carrot2.source.SearchEngineResponse -->
  <class name="SearchEngineResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getResultsTotal" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Returns an estimate of the total number of results or <b>-1</b> if not
         available.]]>
      </doc>
    </method>
    <field name="RESULTS_TOTAL_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Total number of results available in the source (possibly an approximation).]]>
      </doc>
    </field>
    <field name="COMPRESSION_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Metadata key for the compression algorithm used to decompress the returned stream.]]>
      </doc>
    </field>
    <field name="metadata" type="java.util.HashMap&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[All meta data returned in the response.]]>
      </doc>
    </field>
    <field name="results" type="java.util.ArrayList&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[All documents returned in the response.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A single search engine response. This includes typical information returned by a search
 engine: documents, total number of results, time of processing the query, etc.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineResponse -->
  <!-- start class org.carrot2.source.SearchEngineStats -->
  <class name="SearchEngineStats" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineStats"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="incrQueryCount"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="incrPageRequestCount"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="queries" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number queries handled successfully by this data source.]]>
      </doc>
    </field>
    <field name="pageRequests" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of individual page requests issued by this data source.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Usage statistics for an instance of {@link MultipageSearchEngine}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineStats -->
  <!-- start class org.carrot2.source.SearchEngineStatsDescriptor -->
  <class name="SearchEngineStatsDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SearchEngineStatsDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.SearchEngineStatsDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.SearchEngineStatsDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.SearchEngineStats} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineStatsDescriptor -->
  <!-- start class org.carrot2.source.SearchEngineStatsDescriptor.AttributeBuilder -->
  <class name="SearchEngineStatsDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineStatsDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="queries" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number queries handled successfully by this data source.
 
 @see org.carrot2.source.SearchEngineStats#queries]]>
      </doc>
    </method>
    <method name="pageRequests" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of individual page requests issued by this data source.
 
 @see org.carrot2.source.SearchEngineStats#pageRequests]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.SearchEngineStats} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineStatsDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.SearchEngineStatsDescriptor.Attributes -->
  <class name="SearchEngineStatsDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="queries" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="pageRequests" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.SearchEngineStats} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineStatsDescriptor.Attributes -->
  <!-- start class org.carrot2.source.SearchEngineStatsDescriptor.Keys -->
  <class name="SearchEngineStatsDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SearchEngineStatsDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="QUERIES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineStats#queries}.]]>
      </doc>
    </field>
    <field name="PAGE_REQUESTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.SearchEngineStats#pageRequests}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.SearchEngineStats} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SearchEngineStatsDescriptor.Keys -->
  <!-- start class org.carrot2.source.SimpleSearchEngine -->
  <class name="SimpleSearchEngine" extends="org.carrot2.source.SearchEngineBase"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleSearchEngine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fetchSearchResponse" return="org.carrot2.source.SearchEngineResponse"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Requests and returns results from the underlying search engine.
 
 @throws Exception in case of problems with the underlying search engine]]>
      </doc>
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <doc>
    <![CDATA[A base class facilitating implementation of {@link IDocumentSource}s wrapping external
 search engines with remote/ network-based interfaces. This implementation assumes that
 all requested results can be fetched from the search engine using one request.
 
 @see MultipageSearchEngine]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SimpleSearchEngine -->
  <!-- start class org.carrot2.source.SimpleSearchEngineDescriptor -->
  <class name="SimpleSearchEngineDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SimpleSearchEngineDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.SimpleSearchEngineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.SimpleSearchEngineDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.SimpleSearchEngine} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SimpleSearchEngineDescriptor -->
  <!-- start class org.carrot2.source.SimpleSearchEngineDescriptor.AttributeBuilder -->
  <class name="SimpleSearchEngineDescriptor.AttributeBuilder" extends="org.carrot2.source.SearchEngineBaseDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleSearchEngineDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.SimpleSearchEngine} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SimpleSearchEngineDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.SimpleSearchEngineDescriptor.Attributes -->
  <class name="SimpleSearchEngineDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.SimpleSearchEngine} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SimpleSearchEngineDescriptor.Attributes -->
  <!-- start class org.carrot2.source.SimpleSearchEngineDescriptor.Keys -->
  <class name="SimpleSearchEngineDescriptor.Keys" extends="org.carrot2.source.SearchEngineBaseDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleSearchEngineDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.SimpleSearchEngine} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.SimpleSearchEngineDescriptor.Keys -->
</package>
<package name="org.carrot2.source.ambient">
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSource -->
  <class name="AmbientDocumentSource" extends="org.carrot2.source.ambient.FubDocumentSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AmbientDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="getTopicLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="topicId" type="java.lang.String"/>
    </method>
    <field name="topic" type="org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Ambient Topic. The Ambient Topic to load documents from.]]>
      </doc>
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsTotal" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Serves documents from the Ambient test set. Ambient (AMBIgous ENTries) is a data set
 designed for evaluating subtopic information retrieval. It consists of 44 topics, each
 with a set of subtopics and a list of 100 ranked documents. For more information,
 please see <a href="http://credo.fub.it/ambient/">Ambient home page</a>.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSource -->
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic -->
  <class name="AmbientDocumentSource.AmbientTopic" extends="java.lang.Enum&lt;org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getTopicId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[All available Ambient topics.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic -->
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor -->
  <class name="AmbientDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="AmbientDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.ambient.AmbientDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder -->
  <class name="AmbientDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AmbientDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="topic" return="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic"/>
      <doc>
      <![CDATA[Ambient Topic. The Ambient Topic to load documents from.
 
 @see org.carrot2.source.ambient.AmbientDocumentSource#topic]]>
      </doc>
    </method>
    <method name="topic" return="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.ambient.AmbientDocumentSource.AmbientTopic&gt;"/>
      <doc>
      <![CDATA[Ambient Topic. The Ambient Topic to load documents from.
 
 @see org.carrot2.source.ambient.AmbientDocumentSource#topic]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.AmbientDocumentSource#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.AmbientDocumentSource#results]]>
      </doc>
    </method>
    <method name="resultsTotal" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.AmbientDocumentSource#resultsTotal]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.ambient.AmbientDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.Attributes -->
  <class name="AmbientDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="topic" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </field>
    <field name="resultsTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#resultsTotal]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.ambient.AmbientDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.Keys -->
  <class name="AmbientDocumentSourceDescriptor.Keys" extends="org.carrot2.source.ambient.FubDocumentSourceDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AmbientDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TOPIC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.AmbientDocumentSource#topic}.]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.AmbientDocumentSource#results}.]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.AmbientDocumentSource#resultsTotal}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.ambient.AmbientDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.AmbientDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.ambient.FubDocumentSource -->
  <class name="FubDocumentSource" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IDocumentSource"/>
    <constructor name="FubDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="processInternal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="data" type="org.carrot2.source.ambient.FubTestCollection"/>
      <param name="topicId" type="int"/>
      <param name="requestedResults" type="int"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <field name="TOPIC_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Group} name.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="topicIds" type="java.util.Set&lt;java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Topics and subtopics covered in the output documents. The set is computed for the
 output {@link #documents} and it may vary for the same main topic based e.g. on the
 requested number of requested results or {@link #minTopicSize}.]]>
      </doc>
    </field>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="minTopicSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum topic size. Documents belonging to a topic with fewer documents than
 minimum topic size will not be returned.]]>
      </doc>
    </field>
    <field name="includeDocumentsWithoutTopic" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Include documents without topics.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A base document source for test collections developed at Fondazione Ugo Bordoni.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.FubDocumentSource -->
  <!-- start class org.carrot2.source.ambient.FubDocumentSourceDescriptor -->
  <class name="FubDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="FubDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.ambient.FubDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.ambient.FubDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.FubDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder -->
  <class name="FubDocumentSourceDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FubDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="documents" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.FubDocumentSource#documents]]>
      </doc>
    </method>
    <method name="topicIds" return="java.util.Set&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Topics and subtopics covered in the output documents. The set is computed for the
output {@link org.carrot2.source.ambient.FubDocumentSource#documents} and it may vary for the same main topic based e.g. on the
requested number of requested results or {@link org.carrot2.source.ambient.FubDocumentSource#minTopicSize}.
 
 @see org.carrot2.source.ambient.FubDocumentSource#topicIds]]>
      </doc>
    </method>
    <method name="query" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.FubDocumentSource#query]]>
      </doc>
    </method>
    <method name="minTopicSize" return="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Minimum topic size. Documents belonging to a topic with fewer documents than
minimum topic size will not be returned.
 
 @see org.carrot2.source.ambient.FubDocumentSource#minTopicSize]]>
      </doc>
    </method>
    <method name="minTopicSize" return="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Minimum topic size. Documents belonging to a topic with fewer documents than
minimum topic size will not be returned.
 
 @see org.carrot2.source.ambient.FubDocumentSource#minTopicSize]]>
      </doc>
    </method>
    <method name="includeDocumentsWithoutTopic" return="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Include documents without topics.
 
 @see org.carrot2.source.ambient.FubDocumentSource#includeDocumentsWithoutTopic]]>
      </doc>
    </method>
    <method name="includeDocumentsWithoutTopic" return="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Include documents without topics.
 
 @see org.carrot2.source.ambient.FubDocumentSource#includeDocumentsWithoutTopic]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.ambient.FubDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.ambient.FubDocumentSourceDescriptor.Attributes -->
  <class name="FubDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="topicIds" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </field>
    <field name="minTopicSize" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="includeDocumentsWithoutTopic" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.ambient.FubDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.FubDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.ambient.FubDocumentSourceDescriptor.Keys -->
  <class name="FubDocumentSourceDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FubDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.FubDocumentSource#documents}.]]>
      </doc>
    </field>
    <field name="TOPIC_IDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.FubDocumentSource#topicIds}.]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.FubDocumentSource#query}.]]>
      </doc>
    </field>
    <field name="MIN_TOPIC_SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.FubDocumentSource#minTopicSize}.]]>
      </doc>
    </field>
    <field name="INCLUDE_DOCUMENTS_WITHOUT_TOPIC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.FubDocumentSource#includeDocumentsWithoutTopic}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.ambient.FubDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.FubDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSource -->
  <class name="Odp239DocumentSource" extends="org.carrot2.source.ambient.FubDocumentSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Odp239DocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="getTopicLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="topicId" type="java.lang.String"/>
    </method>
    <field name="topic" type="org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[ODP239 Topic. The ODP239 Topic to load documents from.]]>
      </doc>
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsTotal" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Serves documents from the ODP239 test set. For more details, please see:
 http://credo.fub.it/odp239/.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSource -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic -->
  <class name="Odp239DocumentSource.Odp239Topic" extends="java.lang.Enum&lt;org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getTopicId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[All available ODP239 topics.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor -->
  <class name="Odp239DocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="Odp239DocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.ambient.Odp239DocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder -->
  <class name="Odp239DocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.ambient.FubDocumentSourceDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Odp239DocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="topic" return="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic"/>
      <doc>
      <![CDATA[ODP239 Topic. The ODP239 Topic to load documents from.
 
 @see org.carrot2.source.ambient.Odp239DocumentSource#topic]]>
      </doc>
    </method>
    <method name="topic" return="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.ambient.Odp239DocumentSource.Odp239Topic&gt;"/>
      <doc>
      <![CDATA[ODP239 Topic. The ODP239 Topic to load documents from.
 
 @see org.carrot2.source.ambient.Odp239DocumentSource#topic]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.Odp239DocumentSource#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.Odp239DocumentSource#results]]>
      </doc>
    </method>
    <method name="resultsTotal" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.ambient.Odp239DocumentSource#resultsTotal]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.ambient.Odp239DocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.Attributes -->
  <class name="Odp239DocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="topic" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </field>
    <field name="resultsTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#resultsTotal]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.ambient.Odp239DocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.Keys -->
  <class name="Odp239DocumentSourceDescriptor.Keys" extends="org.carrot2.source.ambient.FubDocumentSourceDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Odp239DocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TOPIC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.Odp239DocumentSource#topic}.]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.Odp239DocumentSource#results}.]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.ambient.Odp239DocumentSource#resultsTotal}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.ambient.Odp239DocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.ambient.Odp239DocumentSourceDescriptor.Keys -->
</package>
<package name="org.carrot2.source.etools">
  <!-- start class org.carrot2.source.etools.EToolsDocumentSource -->
  <class name="EToolsDocumentSource" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EToolsDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getXsltResource" return="org.carrot2.util.resource.IResource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="buildServiceUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="fetchSearchResponse" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
    </method>
    <field name="serviceUrlBase" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Base URL for the eTools service]]>
      </doc>
    </field>
    <field name="country" type="org.carrot2.source.etools.EToolsDocumentSource.Country"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines the country of origin for the returned search results.]]>
      </doc>
    </field>
    <field name="language" type="org.carrot2.source.etools.EToolsDocumentSource.Language"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines the language of the returned search results.]]>
      </doc>
    </field>
    <field name="timeout" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum time in milliseconds to wait for all data sources to return results.]]>
      </doc>
    </field>
    <field name="dataSources" type="org.carrot2.source.etools.EToolsDocumentSource.DataSources"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines which data sources to search.]]>
      </doc>
    </field>
    <field name="safeSearch" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If enabled, excludes offensive content from the results.]]>
      </doc>
    </field>
    <field name="site" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Site URL or comma-separated list of site site URLs to which the returned results
 should be restricted. For example: <tt>wikipedia.org</tt> or
 <tt>en.wikipedia.org,de.wikipedia.org</tt>. Very larger lists of site restrictions
 (larger than 2000 characters) may result in a processing exception.]]>
      </doc>
    </field>
    <field name="partnerId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[eTools partner identifier. If you have commercial arrangements with eTools, specify
 your partner id here.]]>
      </doc>
    </field>
    <field name="customerId" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[eTools customer identifier. For commercial use of eTools, please e-mail: 
 <code>contact@comcepta.com</code> to obtain your customer identifier.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A Carrot2 input component for the eTools service (http://www.etools.ch). For commercial
 licensing of the eTools feed, please e-mail: <code>contact@comcepta.com</code>.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSource -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSource.Country -->
  <class name="EToolsDocumentSource.Country" extends="java.lang.Enum&lt;org.carrot2.source.etools.EToolsDocumentSource.Country&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.etools.EToolsDocumentSource.Country[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.etools.EToolsDocumentSource.Country"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Enumeration for countries supported by {@link EToolsDocumentSource}, see
 {@link EToolsDocumentSource#country}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSource.Country -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSource.DataSources -->
  <class name="EToolsDocumentSource.DataSources" extends="java.lang.Enum&lt;org.carrot2.source.etools.EToolsDocumentSource.DataSources&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.etools.EToolsDocumentSource.DataSources[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.etools.EToolsDocumentSource.DataSources"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Enumeration for the data sources modes supported by {@link EToolsDocumentSource},
 see {@link EToolsDocumentSource#dataSources}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSource.DataSources -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSource.Language -->
  <class name="EToolsDocumentSource.Language" extends="java.lang.Enum&lt;org.carrot2.source.etools.EToolsDocumentSource.Language&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.etools.EToolsDocumentSource.Language[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.etools.EToolsDocumentSource.Language"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toLanguageCode" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a corresponding {@link LanguageCode} or <code>null</code> if no
 {@link LanguageCode} corresponds to this {@link Language} constant.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Enumeration for languages supported by {@link EToolsDocumentSource}, see
 {@link EToolsDocumentSource#language}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSource.Language -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSourceDescriptor -->
  <class name="EToolsDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="EToolsDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.etools.EToolsDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder -->
  <class name="EToolsDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EToolsDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="serviceUrlBase" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Base URL for the eTools service
 
 @see org.carrot2.source.etools.EToolsDocumentSource#serviceUrlBase]]>
      </doc>
    </method>
    <method name="serviceUrlBase" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Base URL for the eTools service
 
 @see org.carrot2.source.etools.EToolsDocumentSource#serviceUrlBase]]>
      </doc>
    </method>
    <method name="country" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.etools.EToolsDocumentSource.Country"/>
      <doc>
      <![CDATA[Determines the country of origin for the returned search results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#country]]>
      </doc>
    </method>
    <method name="country" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.etools.EToolsDocumentSource.Country&gt;"/>
      <doc>
      <![CDATA[Determines the country of origin for the returned search results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#country]]>
      </doc>
    </method>
    <method name="language" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.etools.EToolsDocumentSource.Language"/>
      <doc>
      <![CDATA[Determines the language of the returned search results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#language]]>
      </doc>
    </method>
    <method name="language" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.etools.EToolsDocumentSource.Language&gt;"/>
      <doc>
      <![CDATA[Determines the language of the returned search results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#language]]>
      </doc>
    </method>
    <method name="timeout" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum time in milliseconds to wait for all data sources to return results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#timeout]]>
      </doc>
    </method>
    <method name="timeout" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum time in milliseconds to wait for all data sources to return results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#timeout]]>
      </doc>
    </method>
    <method name="dataSources" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.etools.EToolsDocumentSource.DataSources"/>
      <doc>
      <![CDATA[Determines which data sources to search.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#dataSources]]>
      </doc>
    </method>
    <method name="dataSources" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.etools.EToolsDocumentSource.DataSources&gt;"/>
      <doc>
      <![CDATA[Determines which data sources to search.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#dataSources]]>
      </doc>
    </method>
    <method name="safeSearch" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[If enabled, excludes offensive content from the results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#safeSearch]]>
      </doc>
    </method>
    <method name="safeSearch" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[If enabled, excludes offensive content from the results.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#safeSearch]]>
      </doc>
    </method>
    <method name="site" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Site URL or comma-separated list of site site URLs to which the returned results
should be restricted. For example: <tt>wikipedia.org</tt> or
<tt>en.wikipedia.org,de.wikipedia.org</tt>. Very larger lists of site restrictions
(larger than 2000 characters) may result in a processing exception.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#site]]>
      </doc>
    </method>
    <method name="site" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Site URL or comma-separated list of site site URLs to which the returned results
should be restricted. For example: <tt>wikipedia.org</tt> or
<tt>en.wikipedia.org,de.wikipedia.org</tt>. Very larger lists of site restrictions
(larger than 2000 characters) may result in a processing exception.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#site]]>
      </doc>
    </method>
    <method name="partnerId" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[eTools partner identifier. If you have commercial arrangements with eTools, specify
your partner id here.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#partnerId]]>
      </doc>
    </method>
    <method name="partnerId" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[eTools partner identifier. If you have commercial arrangements with eTools, specify
your partner id here.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#partnerId]]>
      </doc>
    </method>
    <method name="customerId" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[eTools customer identifier. For commercial use of eTools, please e-mail: 
<code>contact@comcepta.com</code> to obtain your customer identifier.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#customerId]]>
      </doc>
    </method>
    <method name="customerId" return="org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[eTools customer identifier. For commercial use of eTools, please e-mail: 
<code>contact@comcepta.com</code> to obtain your customer identifier.
 
 @see org.carrot2.source.etools.EToolsDocumentSource#customerId]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.etools.EToolsDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.Attributes -->
  <class name="EToolsDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="serviceUrlBase" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="country" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="language" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="timeout" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="dataSources" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="safeSearch" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="site" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="partnerId" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="customerId" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.etools.EToolsDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.Keys -->
  <class name="EToolsDocumentSourceDescriptor.Keys" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EToolsDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SERVICE_URL_BASE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#serviceUrlBase}.]]>
      </doc>
    </field>
    <field name="COUNTRY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#country}.]]>
      </doc>
    </field>
    <field name="LANGUAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#language}.]]>
      </doc>
    </field>
    <field name="TIMEOUT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#timeout}.]]>
      </doc>
    </field>
    <field name="DATA_SOURCES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#dataSources}.]]>
      </doc>
    </field>
    <field name="SAFE_SEARCH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#safeSearch}.]]>
      </doc>
    </field>
    <field name="SITE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#site}.]]>
      </doc>
    </field>
    <field name="PARTNER_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#partnerId}.]]>
      </doc>
    </field>
    <field name="CUSTOMER_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.etools.EToolsDocumentSource#customerId}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.etools.EToolsDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.etools.EToolsDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.etools.IpBannedException -->
  <class name="IpBannedException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IpBannedException" type="java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.carrot2.source.etools.IpBannedException -->
</package>
<package name="org.carrot2.source.google">
  <!-- start class org.carrot2.source.google.GoogleDocumentSource -->
  <class name="GoogleDocumentSource" extends="org.carrot2.source.MultipageSearchEngine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="createFetcher" return="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="bucket" type="org.carrot2.source.MultipageSearchEngine.SearchRange"/>
    </method>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
    </method>
    <field name="serviceUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Service URL. Google web search service URL.]]>
      </doc>
    </field>
    <field name="referer" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Request referrer. Please do not use the default value when deploying this
 component in production environments. Instead, put the URL to your application
 here.]]>
      </doc>
    </field>
    <field name="keepHighlights" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Keep query word highlighting. Google by default highlights query words in snippets
 using the bold HTML tag. Set this attribute to <code>true</code> to keep these
 highlights.]]>
      </doc>
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.httpclient.HttpRedirectStrategy"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@link IDocumentSource} fetching search results from Google JSON API. Please note
 that this document source cannot deliver more than 32 search results.
 
 @see <a href="http://code.google.com/apis/ajaxsearch/documentation/">Google AJAX API</a>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.google.GoogleDocumentSource -->
  <!-- start class org.carrot2.source.google.GoogleDocumentSourceDescriptor -->
  <class name="GoogleDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="GoogleDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.google.GoogleDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.google.GoogleDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.google.GoogleDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder -->
  <class name="GoogleDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="serviceUrl" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Service URL. Google web search service URL.
 
 @see org.carrot2.source.google.GoogleDocumentSource#serviceUrl]]>
      </doc>
    </method>
    <method name="serviceUrl" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Service URL. Google web search service URL.
 
 @see org.carrot2.source.google.GoogleDocumentSource#serviceUrl]]>
      </doc>
    </method>
    <method name="referer" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Request referrer. Please do not use the default value when deploying this
component in production environments. Instead, put the URL to your application
here.
 
 @see org.carrot2.source.google.GoogleDocumentSource#referer]]>
      </doc>
    </method>
    <method name="referer" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Request referrer. Please do not use the default value when deploying this
component in production environments. Instead, put the URL to your application
here.
 
 @see org.carrot2.source.google.GoogleDocumentSource#referer]]>
      </doc>
    </method>
    <method name="keepHighlights" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Keep query word highlighting. Google by default highlights query words in snippets
using the bold HTML tag. Set this attribute to <code>true</code> to keep these
highlights.
 
 @see org.carrot2.source.google.GoogleDocumentSource#keepHighlights]]>
      </doc>
    </method>
    <method name="keepHighlights" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Keep query word highlighting. Google by default highlights query words in snippets
using the bold HTML tag. Set this attribute to <code>true</code> to keep these
highlights.
 
 @see org.carrot2.source.google.GoogleDocumentSource#keepHighlights]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.httpclient.HttpRedirectStrategy"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.google.GoogleDocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.httpclient.HttpRedirectStrategy&gt;"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.google.GoogleDocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.google.GoogleDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.google.GoogleDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.google.GoogleDocumentSourceDescriptor.Attributes -->
  <class name="GoogleDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="serviceUrl" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="referer" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="keepHighlights" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.google.GoogleDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.google.GoogleDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.google.GoogleDocumentSourceDescriptor.Keys -->
  <class name="GoogleDocumentSourceDescriptor.Keys" extends="org.carrot2.source.MultipageSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GoogleDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SERVICE_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.google.GoogleDocumentSource#serviceUrl}.]]>
      </doc>
    </field>
    <field name="REFERER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.google.GoogleDocumentSource#referer}.]]>
      </doc>
    </field>
    <field name="KEEP_HIGHLIGHTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.google.GoogleDocumentSource#keepHighlights}.]]>
      </doc>
    </field>
    <field name="REDIRECT_STRATEGY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.google.GoogleDocumentSource#redirectStrategy}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.google.GoogleDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.google.GoogleDocumentSourceDescriptor.Keys -->
</package>
<package name="org.carrot2.source.idol">
  <!-- start class org.carrot2.source.idol.IdolDocumentSource -->
  <class name="IdolDocumentSource" extends="org.carrot2.source.MultipageSearchEngine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdolDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="createFetcher" return="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="bucket" type="org.carrot2.source.MultipageSearchEngine.SearchRange"/>
    </method>
    <field name="idolServerName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL of the IDOL Server.]]>
      </doc>
    </field>
    <field name="idolServerPort" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[IDOL Server Port.]]>
      </doc>
    </field>
    <field name="xslTemplateName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[IDOL XSL Template Name. The Reference of an IDOL XSL template that outputs the
 results in OpenSearch format.]]>
      </doc>
    </field>
    <field name="otherSearchAttributes" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Any other search attributes (separated by &amp;) from the Autonomy Query Search
 API's Ensure all the attributes are entered to satisfy XSL that will be applied.]]>
      </doc>
    </field>
    <field name="resultsPerPage" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
 the feed to return.]]>
      </doc>
    </field>
    <field name="minScore" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Minimum IDOL Score. The minimum score of the results returned by IDOL.]]>
      </doc>
    </field>
    <field name="maximumResults" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
 deliver.]]>
      </doc>
    </field>
    <field name="userAgent" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
 requests to the feed URL. If empty or <code>null</code> value is provided, the
 following User-Agent will be sent:
 <code>Rome Client (http://tinyurl.com/64t5n) Ver: UNKNOWN</code>.]]>
      </doc>
    </field>
    <field name="userName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User name to use for authentication.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@link IDocumentSource} fetching {@link Document}s (search results) from an IDOL
 Search Engine. Please note that you will need to install an XSLT stylesheet in your 
 IDOL instance that transforms the search results into the OpenSearch format. The XSLT 
 stylesheet is available under the <tt>org.carrot2.source.idol</tt> package, next to
 the binaries of this class.
 
 <p>
 Based on code donated by Julien Nioche. Autonomy IDOL support contributed by James
 Sealey.
 </p>
 
 @see "http://www.autonomy.com/content/Products/products-idol-server/index.en.html"]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.idol.IdolDocumentSource -->
  <!-- start class org.carrot2.source.idol.IdolDocumentSourceDescriptor -->
  <class name="IdolDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="IdolDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.idol.IdolDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.idol.IdolDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.idol.IdolDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder -->
  <class name="IdolDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdolDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="idolServerName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[URL of the IDOL Server.
 
 @see org.carrot2.source.idol.IdolDocumentSource#idolServerName]]>
      </doc>
    </method>
    <method name="idolServerName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[URL of the IDOL Server.
 
 @see org.carrot2.source.idol.IdolDocumentSource#idolServerName]]>
      </doc>
    </method>
    <method name="idolServerPort" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[IDOL Server Port.
 
 @see org.carrot2.source.idol.IdolDocumentSource#idolServerPort]]>
      </doc>
    </method>
    <method name="idolServerPort" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[IDOL Server Port.
 
 @see org.carrot2.source.idol.IdolDocumentSource#idolServerPort]]>
      </doc>
    </method>
    <method name="xslTemplateName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[IDOL XSL Template Name. The Reference of an IDOL XSL template that outputs the
results in OpenSearch format.
 
 @see org.carrot2.source.idol.IdolDocumentSource#xslTemplateName]]>
      </doc>
    </method>
    <method name="xslTemplateName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[IDOL XSL Template Name. The Reference of an IDOL XSL template that outputs the
results in OpenSearch format.
 
 @see org.carrot2.source.idol.IdolDocumentSource#xslTemplateName]]>
      </doc>
    </method>
    <method name="otherSearchAttributes" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Any other search attributes (separated by &amp;) from the Autonomy Query Search
API's Ensure all the attributes are entered to satisfy XSL that will be applied.
 
 @see org.carrot2.source.idol.IdolDocumentSource#otherSearchAttributes]]>
      </doc>
    </method>
    <method name="otherSearchAttributes" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Any other search attributes (separated by &amp;) from the Autonomy Query Search
API's Ensure all the attributes are entered to satisfy XSL that will be applied.
 
 @see org.carrot2.source.idol.IdolDocumentSource#otherSearchAttributes]]>
      </doc>
    </method>
    <method name="resultsPerPage" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
the feed to return.
 
 @see org.carrot2.source.idol.IdolDocumentSource#resultsPerPage]]>
      </doc>
    </method>
    <method name="resultsPerPage" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
the feed to return.
 
 @see org.carrot2.source.idol.IdolDocumentSource#resultsPerPage]]>
      </doc>
    </method>
    <method name="minScore" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Minimum IDOL Score. The minimum score of the results returned by IDOL.
 
 @see org.carrot2.source.idol.IdolDocumentSource#minScore]]>
      </doc>
    </method>
    <method name="minScore" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Minimum IDOL Score. The minimum score of the results returned by IDOL.
 
 @see org.carrot2.source.idol.IdolDocumentSource#minScore]]>
      </doc>
    </method>
    <method name="maximumResults" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
deliver.
 
 @see org.carrot2.source.idol.IdolDocumentSource#maximumResults]]>
      </doc>
    </method>
    <method name="maximumResults" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
deliver.
 
 @see org.carrot2.source.idol.IdolDocumentSource#maximumResults]]>
      </doc>
    </method>
    <method name="userAgent" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
requests to the feed URL. If empty or <code>null</code> value is provided, the
following User-Agent will be sent:
<code>Rome Client (http://tinyurl.com/64t5n) Ver: UNKNOWN</code>.
 
 @see org.carrot2.source.idol.IdolDocumentSource#userAgent]]>
      </doc>
    </method>
    <method name="userAgent" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
requests to the feed URL. If empty or <code>null</code> value is provided, the
following User-Agent will be sent:
<code>Rome Client (http://tinyurl.com/64t5n) Ver: UNKNOWN</code>.
 
 @see org.carrot2.source.idol.IdolDocumentSource#userAgent]]>
      </doc>
    </method>
    <method name="userName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[User name to use for authentication.
 
 @see org.carrot2.source.idol.IdolDocumentSource#userName]]>
      </doc>
    </method>
    <method name="userName" return="org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[User name to use for authentication.
 
 @see org.carrot2.source.idol.IdolDocumentSource#userName]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.idol.IdolDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.idol.IdolDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.idol.IdolDocumentSourceDescriptor.Attributes -->
  <class name="IdolDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="idolServerName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="idolServerPort" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xslTemplateName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="otherSearchAttributes" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsPerPage" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="minScore" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maximumResults" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="userAgent" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="userName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.idol.IdolDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.idol.IdolDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.idol.IdolDocumentSourceDescriptor.Keys -->
  <class name="IdolDocumentSourceDescriptor.Keys" extends="org.carrot2.source.MultipageSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdolDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="IDOL_SERVER_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#idolServerName}.]]>
      </doc>
    </field>
    <field name="IDOL_SERVER_PORT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#idolServerPort}.]]>
      </doc>
    </field>
    <field name="XSL_TEMPLATE_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#xslTemplateName}.]]>
      </doc>
    </field>
    <field name="OTHER_SEARCH_ATTRIBUTES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#otherSearchAttributes}.]]>
      </doc>
    </field>
    <field name="RESULTS_PER_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#resultsPerPage}.]]>
      </doc>
    </field>
    <field name="MIN_SCORE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#minScore}.]]>
      </doc>
    </field>
    <field name="MAXIMUM_RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#maximumResults}.]]>
      </doc>
    </field>
    <field name="USER_AGENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#userAgent}.]]>
      </doc>
    </field>
    <field name="USER_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.idol.IdolDocumentSource#userName}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.idol.IdolDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.idol.IdolDocumentSourceDescriptor.Keys -->
</package>
<package name="org.carrot2.source.lucene">
  <!-- start class org.carrot2.source.lucene.FSDirectoryWrapper -->
  <class name="FSDirectoryWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.simplexml.ISimpleXmlWrapper&lt;org.apache.lucene.store.FSDirectory&gt;"/>
    <constructor name="FSDirectoryWrapper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValue" return="org.apache.lucene.store.FSDirectory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.lucene.store.FSDirectory"/>
    </method>
    <doc>
    <![CDATA[Wraps {@link FSDirectory} for serialization with SimpleXML.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.FSDirectoryWrapper -->
  <!-- start interface org.carrot2.source.lucene.IFieldMapper -->
  <interface name="IFieldMapper"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSearchFields" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the names of search fields in the index.]]>
      </doc>
    </method>
    <method name="map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="luceneQuery" type="org.apache.lucene.search.Query"/>
      <param name="analyzer" type="org.apache.lucene.analysis.Analyzer"/>
      <param name="luceneDoc" type="org.apache.lucene.document.Document"/>
      <param name="doc" type="org.carrot2.core.Document"/>
      <doc>
      <![CDATA[Map Lucene index's fields onto Carrot2 {@link org.carrot2.core.Document} instance.
 It is sensible to map at least {@link org.carrot2.core.Document#CONTENT_URL},
 {@link org.carrot2.core.Document#TITLE} and
 {@link org.carrot2.core.Document#SUMMARY}.
 
 @param luceneQuery {@link Query} used to fetch Lucene document from the index. It
            is advised to cache any query-related data internally and if this
            parameter does not change, reuse that data.
 @param analyzer {@link Analyzer} used for creating the index.
 @param luceneDoc Lucene hit.
 @param doc Target Carrot2 document.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Maps Lucene index's fields onto Carrot2 {@link Document} fields. You can provide your
 own field mapper to {@link LuceneDocumentSource} using the
 {@link LuceneDocumentSource#fieldMapper} attribute.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.source.lucene.IFieldMapper -->
  <!-- start class org.carrot2.source.lucene.LuceneDocumentSource -->
  <class name="LuceneDocumentSource" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IDocumentSource"/>
    <constructor name="LuceneDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="fetchSearchResponse" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Fetch search engine response.]]>
      </doc>
    </method>
    <field name="INDEX_PROPERTIES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsTotal" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="documents" type="java.util.Collection&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="directory" type="org.apache.lucene.store.Directory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Search index {@link org.apache.lucene.store.Directory}. Must be unlocked for
 reading.]]>
      </doc>
    </field>
    <field name="analyzer" type="org.apache.lucene.analysis.Analyzer"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link org.apache.lucene.analysis.Analyzer} used at indexing time. The same
 analyzer should be used for querying.]]>
      </doc>
    </field>
    <field name="fieldMapper" type="org.carrot2.source.lucene.IFieldMapper"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link IFieldMapper} provides the link between Carrot2
 {@link org.carrot2.core.Document} fields and Lucene index fields.]]>
      </doc>
    </field>
    <field name="query" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A pre-parsed {@link org.apache.lucene.search.Query} object or a {@link String}
 parsed using the built-in classic QueryParser over a
 set of search fields returned from the {@link #fieldMapper}.]]>
      </doc>
    </field>
    <field name="keepLuceneDocuments" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Keeps references to Lucene document instances in Carrot2 documents. Please bear in
 mind two limitations:
 <ul>
 <li><strong>Lucene documents will not be serialized to XML/JSON.</strong>
 Therefore, they can only be accessed when invoking clustering through Carrot2 Java
 API. To pass some of the fields of Lucene documents to Carrot2 XML/JSON output,
 implement a custom {@link IFieldMapper} that will store those fields as regular
 Carrot2 fields.</li>
 <li><strong>Increased memory usage</strong> when using a {@link org.carrot2.core.Controller}
 {@link org.carrot2.core.ControllerFactory#createCachingPooling(Class...) configured to cache} the
 output from {@link LuceneDocumentSource}.</li>
 </ul>]]>
      </doc>
    </field>
    <field name="LUCENE_DOCUMENT_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Carrot2 {@link Document} field that stores the original Lucene document instance.
 Keeping of Lucene document instances is disabled by default. Enable it using the
 {@link #keepLuceneDocuments} attribute.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@link IDocumentSource} fetching {@link Document}s from a local Apache Lucene index.
 The index should be binary-compatible with the Lucene version actually imported by this
 plugin.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.LuceneDocumentSource -->
  <!-- start class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor -->
  <class name="LuceneDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LuceneDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.lucene.LuceneDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder -->
  <class name="LuceneDocumentSourceDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LuceneDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="results" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[@see org.carrot2.source.lucene.LuceneDocumentSource#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.source.lucene.LuceneDocumentSource#results]]>
      </doc>
    </method>
    <method name="resultsTotal" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.lucene.LuceneDocumentSource#resultsTotal]]>
      </doc>
    </method>
    <method name="documents" return="java.util.Collection&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.source.lucene.LuceneDocumentSource#documents]]>
      </doc>
    </method>
    <method name="directory" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.lucene.store.Directory"/>
      <doc>
      <![CDATA[Search index {@link org.apache.lucene.store.Directory}. Must be unlocked for
reading.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#directory]]>
      </doc>
    </method>
    <method name="directory" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Search index {@link org.apache.lucene.store.Directory}. Must be unlocked for
reading.

 A class that extends org.apache.lucene.store.Directory or appropriate IObjectFactory.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#directory]]>
      </doc>
    </method>
    <method name="directory" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.apache.lucene.store.Directory&gt;"/>
      <doc>
      <![CDATA[Search index {@link org.apache.lucene.store.Directory}. Must be unlocked for
reading.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#directory]]>
      </doc>
    </method>
    <method name="analyzer" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.lucene.analysis.Analyzer"/>
      <doc>
      <![CDATA[{@link org.apache.lucene.analysis.Analyzer} used at indexing time. The same
analyzer should be used for querying.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#analyzer]]>
      </doc>
    </method>
    <method name="analyzer" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[{@link org.apache.lucene.analysis.Analyzer} used at indexing time. The same
analyzer should be used for querying.

 A class that extends org.apache.lucene.analysis.Analyzer or appropriate IObjectFactory.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#analyzer]]>
      </doc>
    </method>
    <method name="analyzer" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.apache.lucene.analysis.Analyzer&gt;"/>
      <doc>
      <![CDATA[{@link org.apache.lucene.analysis.Analyzer} used at indexing time. The same
analyzer should be used for querying.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#analyzer]]>
      </doc>
    </method>
    <method name="fieldMapper" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.lucene.IFieldMapper"/>
      <doc>
      <![CDATA[{@link IFieldMapper} provides the link between Carrot2
{@link org.carrot2.core.Document} fields and Lucene index fields.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper]]>
      </doc>
    </method>
    <method name="fieldMapper" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[{@link IFieldMapper} provides the link between Carrot2
{@link org.carrot2.core.Document} fields and Lucene index fields.

 A class that extends org.carrot2.source.lucene.IFieldMapper or appropriate IObjectFactory.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper]]>
      </doc>
    </method>
    <method name="fieldMapper" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.lucene.IFieldMapper&gt;"/>
      <doc>
      <![CDATA[{@link IFieldMapper} provides the link between Carrot2
{@link org.carrot2.core.Document} fields and Lucene index fields.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[A pre-parsed {@link org.apache.lucene.search.Query} object or a {@link String}
parsed using the built-in classic QueryParser over a
set of search fields returned from the {@link org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper}.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Object&gt;"/>
      <doc>
      <![CDATA[A pre-parsed {@link org.apache.lucene.search.Query} object or a {@link String}
parsed using the built-in classic QueryParser over a
set of search fields returned from the {@link org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper}.
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#query]]>
      </doc>
    </method>
    <method name="keepLuceneDocuments" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Keeps references to Lucene document instances in Carrot2 documents. Please bear in
mind two limitations:
<ul>
<li><strong>Lucene documents will not be serialized to XML/JSON.</strong>
Therefore, they can only be accessed when invoking clustering through Carrot2 Java
API. To pass some of the fields of Lucene documents to Carrot2 XML/JSON output,
implement a custom {@link IFieldMapper} that will store those fields as regular
Carrot2 fields.</li>
<li><strong>Increased memory usage</strong> when using a {@link org.carrot2.core.Controller}
{@link org.carrot2.core.ControllerFactory#createCachingPooling(Class...) configured to cache} the
output from {@link LuceneDocumentSource}.</li>
</ul>
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#keepLuceneDocuments]]>
      </doc>
    </method>
    <method name="keepLuceneDocuments" return="org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Keeps references to Lucene document instances in Carrot2 documents. Please bear in
mind two limitations:
<ul>
<li><strong>Lucene documents will not be serialized to XML/JSON.</strong>
Therefore, they can only be accessed when invoking clustering through Carrot2 Java
API. To pass some of the fields of Lucene documents to Carrot2 XML/JSON output,
implement a custom {@link IFieldMapper} that will store those fields as regular
Carrot2 fields.</li>
<li><strong>Increased memory usage</strong> when using a {@link org.carrot2.core.Controller}
{@link org.carrot2.core.ControllerFactory#createCachingPooling(Class...) configured to cache} the
output from {@link LuceneDocumentSource}.</li>
</ul>
 
 @see org.carrot2.source.lucene.LuceneDocumentSource#keepLuceneDocuments]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.lucene.LuceneDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.Attributes -->
  <class name="LuceneDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </field>
    <field name="resultsTotal" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#resultsTotal]]>
      </doc>
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="directory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="analyzer" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="fieldMapper" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="keepLuceneDocuments" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.lucene.LuceneDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.Keys -->
  <class name="LuceneDocumentSourceDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LuceneDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#results}.]]>
      </doc>
    </field>
    <field name="RESULTS_TOTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#resultsTotal}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#documents}.]]>
      </doc>
    </field>
    <field name="DIRECTORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#directory}.]]>
      </doc>
    </field>
    <field name="ANALYZER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#analyzer}.]]>
      </doc>
    </field>
    <field name="FIELD_MAPPER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#fieldMapper}.]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#query}.]]>
      </doc>
    </field>
    <field name="KEEP_LUCENE_DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.LuceneDocumentSource#keepLuceneDocuments}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.lucene.LuceneDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.LuceneDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.lucene.PlainTextFormatter -->
  <class name="PlainTextFormatter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.apache.lucene.search.highlight.Formatter"/>
    <constructor name="PlainTextFormatter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="highlightTerm" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="originalText" type="java.lang.String"/>
      <param name="tokengroup" type="org.apache.lucene.search.highlight.TokenGroup"/>
    </method>
    <doc>
    <![CDATA[An implementation of the Lucene highlighter's {@link Formatter} interface that doesn't
 do any highlighting and just returns the original text.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.PlainTextFormatter -->
  <!-- start class org.carrot2.source.lucene.SimpleFieldMapper -->
  <class name="SimpleFieldMapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.source.lucene.IFieldMapper"/>
    <constructor name="SimpleFieldMapper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSearchFields" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="luceneQuery" type="org.apache.lucene.search.Query"/>
      <param name="analyzer" type="org.apache.lucene.analysis.Analyzer"/>
      <param name="luceneDoc" type="org.apache.lucene.document.Document"/>
      <param name="doc" type="org.carrot2.core.Document"/>
    </method>
    <field name="titleField" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document title field name.]]>
      </doc>
    </field>
    <field name="contentField" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document content field name.]]>
      </doc>
    </field>
    <field name="urlField" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document URL field name.]]>
      </doc>
    </field>
    <field name="searchFields" type="java.util.List&lt;java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Index search field names. If not specified, title and content fields are used.]]>
      </doc>
    </field>
    <field name="formatter" type="org.apache.lucene.search.highlight.Formatter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Snippet formatter for the highlighter. Highlighter is not used if <code>null</code>.]]>
      </doc>
    </field>
    <field name="contextFragments" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Number of context fragments for the highlighter.]]>
      </doc>
    </field>
    <field name="fragmentJoin" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string used to join context fragments when highlighting.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A simple {@link IFieldMapper} with one-to-one mapping between the default title, url
 and summary fields.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.SimpleFieldMapper -->
  <!-- start class org.carrot2.source.lucene.SimpleFieldMapperDescriptor -->
  <class name="SimpleFieldMapperDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SimpleFieldMapperDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.lucene.SimpleFieldMapper} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.SimpleFieldMapperDescriptor -->
  <!-- start class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder -->
  <class name="SimpleFieldMapperDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleFieldMapperDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="titleField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Document title field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#titleField]]>
      </doc>
    </method>
    <method name="titleField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Document title field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#titleField]]>
      </doc>
    </method>
    <method name="contentField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Document content field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#contentField]]>
      </doc>
    </method>
    <method name="contentField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Document content field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#contentField]]>
      </doc>
    </method>
    <method name="urlField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Document URL field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#urlField]]>
      </doc>
    </method>
    <method name="urlField" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Document URL field name.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#urlField]]>
      </doc>
    </method>
    <method name="searchFields" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Index search field names. If not specified, title and content fields are used.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#searchFields]]>
      </doc>
    </method>
    <method name="searchFields" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;java.lang.String&gt;&gt;"/>
      <doc>
      <![CDATA[Index search field names. If not specified, title and content fields are used.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#searchFields]]>
      </doc>
    </method>
    <method name="formatter" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.apache.lucene.search.highlight.Formatter"/>
      <doc>
      <![CDATA[Snippet formatter for the highlighter. Highlighter is not used if <code>null</code>.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#formatter]]>
      </doc>
    </method>
    <method name="formatter" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Snippet formatter for the highlighter. Highlighter is not used if <code>null</code>.

 A class that extends org.apache.lucene.search.highlight.Formatter or appropriate IObjectFactory.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#formatter]]>
      </doc>
    </method>
    <method name="formatter" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.apache.lucene.search.highlight.Formatter&gt;"/>
      <doc>
      <![CDATA[Snippet formatter for the highlighter. Highlighter is not used if <code>null</code>.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#formatter]]>
      </doc>
    </method>
    <method name="contextFragments" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Number of context fragments for the highlighter.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#contextFragments]]>
      </doc>
    </method>
    <method name="contextFragments" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Number of context fragments for the highlighter.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#contextFragments]]>
      </doc>
    </method>
    <method name="fragmentJoin" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[A string used to join context fragments when highlighting.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#fragmentJoin]]>
      </doc>
    </method>
    <method name="fragmentJoin" return="org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[A string used to join context fragments when highlighting.
 
 @see org.carrot2.source.lucene.SimpleFieldMapper#fragmentJoin]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.lucene.SimpleFieldMapper} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.Attributes -->
  <class name="SimpleFieldMapperDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="titleField" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="contentField" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="urlField" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="searchFields" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="formatter" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="contextFragments" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="fragmentJoin" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.lucene.SimpleFieldMapper} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.Attributes -->
  <!-- start class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.Keys -->
  <class name="SimpleFieldMapperDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleFieldMapperDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TITLE_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#titleField}.]]>
      </doc>
    </field>
    <field name="CONTENT_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#contentField}.]]>
      </doc>
    </field>
    <field name="URL_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#urlField}.]]>
      </doc>
    </field>
    <field name="SEARCH_FIELDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#searchFields}.]]>
      </doc>
    </field>
    <field name="FORMATTER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#formatter}.]]>
      </doc>
    </field>
    <field name="CONTEXT_FRAGMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#contextFragments}.]]>
      </doc>
    </field>
    <field name="FRAGMENT_JOIN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.lucene.SimpleFieldMapper#fragmentJoin}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.lucene.SimpleFieldMapper} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.lucene.SimpleFieldMapperDescriptor.Keys -->
</package>
<package name="org.carrot2.source.microsoft">
  <!-- start class org.carrot2.source.microsoft.AdultOption -->
  <class name="AdultOption" extends="java.lang.Enum&lt;org.carrot2.source.microsoft.AdultOption&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.microsoft.AdultOption[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.microsoft.AdultOption"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Safe search modes for Bing API.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.AdultOption -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource -->
  <class name="Bing3DocumentSource" extends="org.carrot2.source.MultipageSearchEngine"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource" type="org.carrot2.source.microsoft.SourceType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initialize with a fixed source type.]]>
      </doc>
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="metadata" type="org.carrot2.source.MultipageSearchEngineMetadata"/>
      <param name="executor" type="java.util.concurrent.ExecutorService"/>
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="createFetcher" return="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="bucket" type="org.carrot2.source.MultipageSearchEngine.SearchRange"/>
      <doc>
      <![CDATA[Create a single page fetcher for the search range.]]>
      </doc>
    </method>
    <method name="addIfNotEmpty"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="params" type="java.util.ArrayList&lt;org.apache.http.NameValuePair&gt;"/>
      <param name="paramName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Add a parameter if argument is not an empty string.]]>
      </doc>
    </method>
    <method name="process"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Make this abstract so that subclasses override.]]>
      </doc>
    </method>
    <method name="appendSourceParams"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="params" type="java.util.ArrayList&lt;org.apache.http.NameValuePair&gt;"/>
      <doc>
      <![CDATA[Append any source-specific parameters.]]>
      </doc>
    </method>
    <method name="stringValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="v" type="java.lang.Object"/>
    </method>
    <field name="SYSPROP_BING3_API" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[System property key under which Bing app key can be passed (default).
 You can also override the key via init or runtime attributes of course.]]>
      </doc>
    </field>
    <field name="MAX_CONCURRENT_THREADS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum concurrent threads from all instances of this subcomponents
 sending requests to Bing.]]>
      </doc>
    </field>
    <field name="appid" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Microsoft-assigned application ID for querying the API. Please <strong>generate
 your own ID</strong> for production deployments and branches off the Carrot2.org's
 code. See <a href="https://datamarket.azure.com/dataset/5ba839f1-12ce-4cce-bf57-a49d98d29a44">http://goo.gl/usVXW</a>
 for more.

 <p>By default takes the system property's value under key: <code>bing3.key</code>.</p>]]>
      </doc>
    </field>
    <field name="market" type="org.carrot2.source.microsoft.MarketOption"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Language and country/region information for the request.]]>
      </doc>
    </field>
    <field name="adult" type="org.carrot2.source.microsoft.AdultOption"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Adult search restriction (porn filter).]]>
      </doc>
    </field>
    <field name="latitude" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Latitude (north/south coordinate). Valid input values range from #90 to 90.]]>
      </doc>
    </field>
    <field name="longitude" type="java.lang.Double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Longitude (east/west coordinate). Valid input values range from #180 to 180.]]>
      </doc>
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.httpclient.HttpRedirectStrategy"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A base {@link IDocumentSource} sending requests to Bing Search API in Windows Azure
 Marketplace. We model this into separate subclasses, specific to a particular request
 type (web, image, news).
 
 <p>Important: there are limits for free use of the above API (beyond which it is a
 paid service).
 
 @see "https://datamarket.azure.com/dataset/5ba839f1-12ce-4cce-bf57-a49d98d29a44"]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource.AtomEntry -->
  <class name="Bing3DocumentSource.AtomEntry" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource.AtomEntry"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="id" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="content" type="org.carrot2.source.microsoft.Bing3DocumentSource.ContentEntry"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource.AtomEntry -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource.AtomFeed -->
  <class name="Bing3DocumentSource.AtomFeed" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource.AtomFeed"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="entries" type="java.util.List&lt;org.carrot2.source.microsoft.Bing3DocumentSource.AtomEntry&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource.AtomFeed -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource.ContentEntry -->
  <class name="Bing3DocumentSource.ContentEntry" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource.ContentEntry"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="properties" type="org.carrot2.source.microsoft.Bing3DocumentSource.EntryProperties"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource.ContentEntry -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource.EntryProperties -->
  <class name="Bing3DocumentSource.EntryProperties" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource.EntryProperties"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="displayUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="url" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="source" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mediaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="sourceUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="thumbnail" type="org.carrot2.source.microsoft.Bing3DocumentSource.Thumbnail"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource.EntryProperties -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSource.Thumbnail -->
  <class name="Bing3DocumentSource.Thumbnail" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSource.Thumbnail"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="mediaUrl" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="width" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="height" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="contentType" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="fileSize" type="long"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSource.Thumbnail -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor -->
  <class name="Bing3DocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="Bing3DocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.microsoft.Bing3DocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder -->
  <class name="Bing3DocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="appid" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Microsoft-assigned application ID for querying the API. Please <strong>generate
your own ID</strong> for production deployments and branches off the Carrot2.org's
code. See <a href="https://datamarket.azure.com/dataset/5ba839f1-12ce-4cce-bf57-a49d98d29a44">http://goo.gl/usVXW</a>
for more.

<p>By default takes the system property's value under key: <code>bing3.key</code>.</p>
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#appid]]>
      </doc>
    </method>
    <method name="appid" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Microsoft-assigned application ID for querying the API. Please <strong>generate
your own ID</strong> for production deployments and branches off the Carrot2.org's
code. See <a href="https://datamarket.azure.com/dataset/5ba839f1-12ce-4cce-bf57-a49d98d29a44">http://goo.gl/usVXW</a>
for more.

<p>By default takes the system property's value under key: <code>bing3.key</code>.</p>
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#appid]]>
      </doc>
    </method>
    <method name="market" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.microsoft.MarketOption"/>
      <doc>
      <![CDATA[Language and country/region information for the request.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#market]]>
      </doc>
    </method>
    <method name="market" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.microsoft.MarketOption&gt;"/>
      <doc>
      <![CDATA[Language and country/region information for the request.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#market]]>
      </doc>
    </method>
    <method name="adult" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.microsoft.AdultOption"/>
      <doc>
      <![CDATA[Adult search restriction (porn filter).
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#adult]]>
      </doc>
    </method>
    <method name="adult" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.microsoft.AdultOption&gt;"/>
      <doc>
      <![CDATA[Adult search restriction (porn filter).
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#adult]]>
      </doc>
    </method>
    <method name="latitude" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Double"/>
      <doc>
      <![CDATA[Latitude (north/south coordinate). Valid input values range from #90 to 90.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#latitude]]>
      </doc>
    </method>
    <method name="latitude" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Latitude (north/south coordinate). Valid input values range from #90 to 90.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#latitude]]>
      </doc>
    </method>
    <method name="longitude" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Double"/>
      <doc>
      <![CDATA[Longitude (east/west coordinate). Valid input values range from #180 to 180.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#longitude]]>
      </doc>
    </method>
    <method name="longitude" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Longitude (east/west coordinate). Valid input values range from #180 to 180.
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#longitude]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.httpclient.HttpRedirectStrategy"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.httpclient.HttpRedirectStrategy&gt;"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.microsoft.Bing3DocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.microsoft.Bing3DocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Attributes -->
  <class name="Bing3DocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="appid" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="market" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="adult" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="latitude" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="longitude" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.microsoft.Bing3DocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Keys -->
  <class name="Bing3DocumentSourceDescriptor.Keys" extends="org.carrot2.source.MultipageSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3DocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="APPID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#appid}.]]>
      </doc>
    </field>
    <field name="MARKET" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#market}.]]>
      </doc>
    </field>
    <field name="ADULT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#adult}.]]>
      </doc>
    </field>
    <field name="LATITUDE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#latitude}.]]>
      </doc>
    </field>
    <field name="LONGITUDE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#longitude}.]]>
      </doc>
    </field>
    <field name="REDIRECT_STRATEGY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3DocumentSource#redirectStrategy}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.microsoft.Bing3DocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.microsoft.Bing3ImageDocumentSource -->
  <class name="Bing3ImageDocumentSource" extends="org.carrot2.source.microsoft.Bing3DocumentSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3ImageDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initialize source type properly.]]>
      </doc>
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Process the query.]]>
      </doc>
    </method>
    <method name="appendSourceParams"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="params" type="java.util.ArrayList&lt;org.apache.http.NameValuePair&gt;"/>
    </method>
    <doc>
    <![CDATA[Image search document source.
 
 @see Bing3DocumentSource]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3ImageDocumentSource -->
  <!-- start class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor -->
  <class name="Bing3ImageDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="Bing3ImageDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.microsoft.Bing3ImageDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.AttributeBuilder -->
  <class name="Bing3ImageDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3ImageDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.microsoft.Bing3ImageDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.Attributes -->
  <class name="Bing3ImageDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.microsoft.Bing3ImageDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.Keys -->
  <class name="Bing3ImageDocumentSourceDescriptor.Keys" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3ImageDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.microsoft.Bing3ImageDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3ImageDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.microsoft.Bing3NewsDocumentSource -->
  <class name="Bing3NewsDocumentSource" extends="org.carrot2.source.microsoft.Bing3DocumentSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3NewsDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initialize source type properly.]]>
      </doc>
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Process the query.]]>
      </doc>
    </method>
    <method name="appendSourceParams"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="params" type="java.util.ArrayList&lt;org.apache.http.NameValuePair&gt;"/>
    </method>
    <field name="sortOrder" type="org.carrot2.source.microsoft.SortOrder"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies the sort order of results.]]>
      </doc>
    </field>
    <field name="newsCategory" type="org.carrot2.source.microsoft.NewsCategory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Specifies news category.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[News search specific document source.
 
 @see Bing3DocumentSource]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3NewsDocumentSource -->
  <!-- start class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor -->
  <class name="Bing3NewsDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="Bing3NewsDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder -->
  <class name="Bing3NewsDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3NewsDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="sortOrder" return="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.microsoft.SortOrder"/>
      <doc>
      <![CDATA[Specifies the sort order of results.
 
 @see org.carrot2.source.microsoft.Bing3NewsDocumentSource#sortOrder]]>
      </doc>
    </method>
    <method name="sortOrder" return="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.microsoft.SortOrder&gt;"/>
      <doc>
      <![CDATA[Specifies the sort order of results.
 
 @see org.carrot2.source.microsoft.Bing3NewsDocumentSource#sortOrder]]>
      </doc>
    </method>
    <method name="newsCategory" return="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.source.microsoft.NewsCategory"/>
      <doc>
      <![CDATA[Specifies news category.
 
 @see org.carrot2.source.microsoft.Bing3NewsDocumentSource#newsCategory]]>
      </doc>
    </method>
    <method name="newsCategory" return="org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.source.microsoft.NewsCategory&gt;"/>
      <doc>
      <![CDATA[Specifies news category.
 
 @see org.carrot2.source.microsoft.Bing3NewsDocumentSource#newsCategory]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.Attributes -->
  <class name="Bing3NewsDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="sortOrder" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="newsCategory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.Keys -->
  <class name="Bing3NewsDocumentSourceDescriptor.Keys" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3NewsDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SORT_ORDER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource#sortOrder}.]]>
      </doc>
    </field>
    <field name="NEWS_CATEGORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource#newsCategory}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.microsoft.Bing3NewsDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3NewsDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.microsoft.Bing3WebDocumentSource -->
  <class name="Bing3WebDocumentSource" extends="org.carrot2.source.microsoft.Bing3DocumentSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3WebDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initialize source type properly.]]>
      </doc>
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
      <doc>
      <![CDATA[Process the query.]]>
      </doc>
    </method>
    <field name="site" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Site restriction to return results under a given URL. Example:
 <tt>http://www.wikipedia.org</tt> or simply <tt>wikipedia.org</tt>.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Web search specific document source. 
 
 @see Bing3DocumentSource]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3WebDocumentSource -->
  <!-- start class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor -->
  <class name="Bing3WebDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="Bing3WebDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.microsoft.Bing3WebDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.AttributeBuilder -->
  <class name="Bing3WebDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3WebDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="site" return="org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Site restriction to return results under a given URL. Example:
<tt>http://www.wikipedia.org</tt> or simply <tt>wikipedia.org</tt>.
 
 @see org.carrot2.source.microsoft.Bing3WebDocumentSource#site]]>
      </doc>
    </method>
    <method name="site" return="org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Site restriction to return results under a given URL. Example:
<tt>http://www.wikipedia.org</tt> or simply <tt>wikipedia.org</tt>.
 
 @see org.carrot2.source.microsoft.Bing3WebDocumentSource#site]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.microsoft.Bing3WebDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.Attributes -->
  <class name="Bing3WebDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="site" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.microsoft.Bing3WebDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.Keys -->
  <class name="Bing3WebDocumentSourceDescriptor.Keys" extends="org.carrot2.source.microsoft.Bing3DocumentSourceDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Bing3WebDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SITE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.microsoft.Bing3WebDocumentSource#site}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.microsoft.Bing3WebDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.Bing3WebDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.microsoft.MarketOption -->
  <class name="MarketOption" extends="java.lang.Enum&lt;org.carrot2.source.microsoft.MarketOption&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.microsoft.MarketOption[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.microsoft.MarketOption"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return human-readable description.]]>
      </doc>
    </method>
    <method name="toLanguageCode" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a corresponding {@link LanguageCode} or <code>null</code> if no
 {@link LanguageCode} corresponds to this {@link MarketOption} constant.]]>
      </doc>
    </method>
    <field name="TO_LANGUAGE_CODE" type="java.util.Map&lt;org.carrot2.source.microsoft.MarketOption, org.carrot2.core.LanguageCode&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maps <b>some</b> of the values of this enum to {@link LanguageCode}s.]]>
      </doc>
    </field>
    <field name="marketCode" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Culture info code for Live API.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Culture info description.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Language and country/region information for {@link Bing3DocumentSource}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.MarketOption -->
  <!-- start class org.carrot2.source.microsoft.NewsCategory -->
  <class name="NewsCategory" extends="java.lang.Enum&lt;org.carrot2.source.microsoft.NewsCategory&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.microsoft.NewsCategory[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.microsoft.NewsCategory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[News category for {@link Bing3NewsDocumentSource}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.NewsCategory -->
  <!-- start class org.carrot2.source.microsoft.SortOrder -->
  <class name="SortOrder" extends="java.lang.Enum&lt;org.carrot2.source.microsoft.SortOrder&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.microsoft.SortOrder[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.microsoft.SortOrder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Sort order for {@link Bing3NewsDocumentSource}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.SortOrder -->
  <!-- start class org.carrot2.source.microsoft.SourceType -->
  <class name="SourceType" extends="java.lang.Enum&lt;org.carrot2.source.microsoft.SourceType&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.source.microsoft.SourceType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.source.microsoft.SourceType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Source type for Bing3 searches.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.microsoft.SourceType -->
</package>
<package name="org.carrot2.source.opensearch">
  <!-- start class org.carrot2.source.opensearch.OpenSearchDocumentSource -->
  <class name="OpenSearchDocumentSource" extends="org.carrot2.source.MultipageSearchEngine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OpenSearchDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="createFetcher" return="java.util.concurrent.Callable&lt;org.carrot2.source.SearchEngineResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="bucket" type="org.carrot2.source.MultipageSearchEngine.SearchRange"/>
    </method>
    <field name="feedUrlTemplate" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL to fetch the search feed from. The URL template can contain variable place
 holders as defined by the OpenSearch specification that will be replaced during
 runtime. The format of the place holder is <code>${variable}</code>. The following
 variables are supported:
 <ul>
 <li><code>searchTerms</code> will be replaced by the query</li>
 <li><code>startIndex</code> index of the first result to be searched. Mutually 
 exclusive with <code>startPage</code></li>
 <li><code>startPage</code> index of the first result
 to be searched. Mutually exclusive with <code>startIndex</code>.</li>
 <li><code>count</code> the number of search results per page</li>
 </ul>
 
 <p>Example URL feed templates for public services:</p>
 <dl>
   <dt>nature.com</dt>
   <dd><code>http://www.nature.com/opensearch/request?interface=opensearch&amp;operation=searchRetrieve&amp;query=${searchTerms}&amp;startRecord=${startIndex}&amp;maximumRecords=${count}&amp;httpAccept=application/rss%2Bxml</code></dd>
   <dt>indeed.com</dt>
   <dd><code>http://www.indeed.com/opensearch?q=${searchTerms}&amp;start=${startIndex}&amp;limit=${count}</code></dd>
 </dl>]]>
      </doc>
    </field>
    <field name="resultsPerPage" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
 the feed to return.]]>
      </doc>
    </field>
    <field name="maximumResults" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
 deliver.]]>
      </doc>
    </field>
    <field name="feedUrlParams" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Additional parameters to be appended to {@link #feedUrlTemplate} on each request.]]>
      </doc>
    </field>
    <field name="userAgent" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
 requests to the feed URL. If empty or <code>null</code> value is provided,
 the following User-Agent will be sent: <code>Rome Client (http://tinyurl.com/64t5n) 
 Ver: UNKNOWN</code>.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@link IDocumentSource} fetching {@link Document}s (search results) from an
 OpenSearch feed.
 <p>
 Based on code donated by Julien Nioche.
 
 @see <a href="http://www.opensearch.org">OpenSearch.org</a>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.OpenSearchDocumentSource -->
  <!-- start class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor -->
  <class name="OpenSearchDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="OpenSearchDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.opensearch.OpenSearchDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder -->
  <class name="OpenSearchDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.MultipageSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OpenSearchDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="feedUrlTemplate" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[URL to fetch the search feed from. The URL template can contain variable place
holders as defined by the OpenSearch specification that will be replaced during
runtime. The format of the place holder is <code>${variable}</code>. The following
variables are supported:
<ul>
<li><code>searchTerms</code> will be replaced by the query</li>
<li><code>startIndex</code> index of the first result to be searched. Mutually 
exclusive with <code>startPage</code></li>
<li><code>startPage</code> index of the first result
to be searched. Mutually exclusive with <code>startIndex</code>.</li>
<li><code>count</code> the number of search results per page</li>
</ul>

<p>Example URL feed templates for public services:</p>
<dl>
<dt>nature.com</dt>
<dd><code>http://www.nature.com/opensearch/request?interface=opensearch&amp;operation=searchRetrieve&amp;query=${searchTerms}&amp;startRecord=${startIndex}&amp;maximumRecords=${count}&amp;httpAccept=application/rss%2Bxml</code></dd>
<dt>indeed.com</dt>
<dd><code>http://www.indeed.com/opensearch?q=${searchTerms}&amp;start=${startIndex}&amp;limit=${count}</code></dd>
</dl>
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlTemplate]]>
      </doc>
    </method>
    <method name="feedUrlTemplate" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[URL to fetch the search feed from. The URL template can contain variable place
holders as defined by the OpenSearch specification that will be replaced during
runtime. The format of the place holder is <code>${variable}</code>. The following
variables are supported:
<ul>
<li><code>searchTerms</code> will be replaced by the query</li>
<li><code>startIndex</code> index of the first result to be searched. Mutually 
exclusive with <code>startPage</code></li>
<li><code>startPage</code> index of the first result
to be searched. Mutually exclusive with <code>startIndex</code>.</li>
<li><code>count</code> the number of search results per page</li>
</ul>

<p>Example URL feed templates for public services:</p>
<dl>
<dt>nature.com</dt>
<dd><code>http://www.nature.com/opensearch/request?interface=opensearch&amp;operation=searchRetrieve&amp;query=${searchTerms}&amp;startRecord=${startIndex}&amp;maximumRecords=${count}&amp;httpAccept=application/rss%2Bxml</code></dd>
<dt>indeed.com</dt>
<dd><code>http://www.indeed.com/opensearch?q=${searchTerms}&amp;start=${startIndex}&amp;limit=${count}</code></dd>
</dl>
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlTemplate]]>
      </doc>
    </method>
    <method name="resultsPerPage" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
the feed to return.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#resultsPerPage]]>
      </doc>
    </method>
    <method name="resultsPerPage" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Results per page. The number of results per page the document source will expect
the feed to return.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#resultsPerPage]]>
      </doc>
    </method>
    <method name="maximumResults" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
deliver.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#maximumResults]]>
      </doc>
    </method>
    <method name="maximumResults" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum number of results. The maximum number of results the document source can
deliver.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#maximumResults]]>
      </doc>
    </method>
    <method name="feedUrlParams" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Additional parameters to be appended to {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlTemplate} on each request.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlParams]]>
      </doc>
    </method>
    <method name="feedUrlParams" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.Map&lt;java.lang.String, java.lang.String&gt;&gt;"/>
      <doc>
      <![CDATA[Additional parameters to be appended to {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlTemplate} on each request.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlParams]]>
      </doc>
    </method>
    <method name="userAgent" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
requests to the feed URL. If empty or <code>null</code> value is provided,
the following User-Agent will be sent: <code>Rome Client (http://tinyurl.com/64t5n) 
Ver: UNKNOWN</code>.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#userAgent]]>
      </doc>
    </method>
    <method name="userAgent" return="org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[User agent header. The contents of the User-Agent HTTP header to use when making
requests to the feed URL. If empty or <code>null</code> value is provided,
the following User-Agent will be sent: <code>Rome Client (http://tinyurl.com/64t5n) 
Ver: UNKNOWN</code>.
 
 @see org.carrot2.source.opensearch.OpenSearchDocumentSource#userAgent]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.opensearch.OpenSearchDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.Attributes -->
  <class name="OpenSearchDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="feedUrlTemplate" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resultsPerPage" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maximumResults" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="feedUrlParams" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="userAgent" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.opensearch.OpenSearchDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.Keys -->
  <class name="OpenSearchDocumentSourceDescriptor.Keys" extends="org.carrot2.source.MultipageSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OpenSearchDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="FEED_URL_TEMPLATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlTemplate}.]]>
      </doc>
    </field>
    <field name="RESULTS_PER_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#resultsPerPage}.]]>
      </doc>
    </field>
    <field name="MAXIMUM_RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#maximumResults}.]]>
      </doc>
    </field>
    <field name="FEED_URL_PARAMS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#feedUrlParams}.]]>
      </doc>
    </field>
    <field name="USER_AGENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.opensearch.OpenSearchDocumentSource#userAgent}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.opensearch.OpenSearchDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.OpenSearchDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.opensearch.RomeFetcherUtils -->
  <class name="RomeFetcherUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RomeFetcherUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fetchUrl" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="feedFetcher" type="com.sun.syndication.fetcher.FeedFetcher"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="FeedException" type="com.sun.syndication.io.FeedException"/>
      <exception name="FetcherException" type="com.sun.syndication.fetcher.FetcherException"/>
      <exception name="MalformedURLException" type="java.net.MalformedURLException"/>
      <doc>
      <![CDATA[Fetches an OpenSearch feed from the provided URL and returns the entries as Carrot2
 {@link SearchEngineResponse}.
 
 @param url the OpenSearch feed to fetch
 @param feedFetcher Rome fetcher to use
 @return {@link SearchEngineResponse} containing entries from the feed]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility methods for working with Rome fetcher.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.opensearch.RomeFetcherUtils -->
</package>
<package name="org.carrot2.source.pubmed">
  <!-- start class org.carrot2.source.pubmed.PubMedDocumentSource -->
  <class name="PubMedDocumentSource" extends="org.carrot2.source.SimpleSearchEngine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PubMedDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fetchSearchResponse" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
    </method>
    <field name="E_SEARCH_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PubMed search service URL]]>
      </doc>
    </field>
    <field name="E_FETCH_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PubMed fetch service URL]]>
      </doc>
    </field>
    <field name="PUBMED_TIMEOUT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP timeout for pubmed services.]]>
      </doc>
    </field>
    <field name="toolName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tool name, if registered.
 @see "http://www.ncbi.nlm.nih.gov"]]>
      </doc>
    </field>
    <field name="maxResults" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum results to fetch. No more than the specified number of results
 will be fetched from PubMed, regardless of the requested number of results.]]>
      </doc>
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.httpclient.HttpRedirectStrategy"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs searches on the PubMed database using its on-line e-utilities:
 http://eutils.ncbi.nlm.nih.gov/entrez/query/static/eutils_help.html]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.pubmed.PubMedDocumentSource -->
  <!-- start class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor -->
  <class name="PubMedDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="PubMedDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.pubmed.PubMedDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder -->
  <class name="PubMedDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.SimpleSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PubMedDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="toolName" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Tool name, if registered.
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#toolName]]>
      </doc>
    </method>
    <method name="toolName" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Tool name, if registered.
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#toolName]]>
      </doc>
    </method>
    <method name="maxResults" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum results to fetch. No more than the specified number of results
will be fetched from PubMed, regardless of the requested number of results.
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#maxResults]]>
      </doc>
    </method>
    <method name="maxResults" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum results to fetch. No more than the specified number of results
will be fetched from PubMed, regardless of the requested number of results.
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#maxResults]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.httpclient.HttpRedirectStrategy"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.httpclient.HttpRedirectStrategy&gt;"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.pubmed.PubMedDocumentSource#redirectStrategy]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.pubmed.PubMedDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.Attributes -->
  <class name="PubMedDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="toolName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxResults" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="redirectStrategy" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.pubmed.PubMedDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.Keys -->
  <class name="PubMedDocumentSourceDescriptor.Keys" extends="org.carrot2.source.SimpleSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PubMedDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TOOL_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.pubmed.PubMedDocumentSource#toolName}.]]>
      </doc>
    </field>
    <field name="MAX_RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.pubmed.PubMedDocumentSource#maxResults}.]]>
      </doc>
    </field>
    <field name="REDIRECT_STRATEGY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.pubmed.PubMedDocumentSource#redirectStrategy}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.pubmed.PubMedDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.pubmed.PubMedDocumentSourceDescriptor.Keys -->
</package>
<package name="org.carrot2.source.solr">
  <!-- start class org.carrot2.source.solr.SolrDocumentSource -->
  <class name="SolrDocumentSource" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
      <param name="processingResult" type="org.carrot2.core.ProcessingResult"/>
    </method>
    <method name="buildServiceUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getXsltResource" return="org.carrot2.util.resource.IResource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getXsltParameters" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <field name="FIELD_MAPPING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="serviceUrlBase" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Solr service URL base. The URL base can contain additional Solr parameters, 
 for example: <tt>http://localhost:8983/solr/select?fq=timestemp:[NOW-24HOUR TO NOW]</tt>]]>
      </doc>
    </field>
    <field name="solrFilterQuery" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Filter query appended to {@link #serviceUrlBase}.]]>
      </doc>
    </field>
    <field name="solrTitleFieldName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Title field name. Name of the Solr field that will provide document titles.]]>
      </doc>
    </field>
    <field name="solrSummaryFieldName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Summary field name. Name of the Solr field that will provide document summary.]]>
      </doc>
    </field>
    <field name="solrUrlFieldName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[URL field name. Name of the Solr field that will provide document URLs.]]>
      </doc>
    </field>
    <field name="solrIdFieldName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document identifier field name (specified in Solr schema). This field is necessary
 to connect Solr-side clusters or highlighter output to documents.]]>
      </doc>
    </field>
    <field name="solrXsltAdapter" type="org.carrot2.util.resource.IResource"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provides a custom XSLT stylesheet for converting from Solr's output to
 an XML format <a href="http://download.carrot2.org/head/manual/index.html#section.architecture.xml-formats">
 parsed by Carrot2</a>. For performance reasons this attribute
 can be provided at initialization time only (no processing-time overrides).]]>
      </doc>
    </field>
    <field name="readClusters" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If clusters are present in the Solr output they will be read and exposed to components
 further down the processing chain. Note that {@link #solrIdFieldName} is required to match
 document references.]]>
      </doc>
    </field>
    <field name="useHighlighterOutput" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If highlighter fragments are present in the Solr output they will be used (and preferred) over full
 field content. This may be used to decrease the memory required for clustering. In general if highlighter
 is used the contents of full fields won't be emitted from Solr though (because it makes little sense).
 
 <p>Setting this option to <code>false</code> will disable using the highlighter output
 entirely.</p>]]>
      </doc>
    </field>
    <field name="copyFields" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Copy Solr fields from the search result to Carrot2 {@link org.carrot2.core.Document} instances (as fields).]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link #readClusters} is <code>true</code> and clusters are present in the input
 XML, they will be deserialized and exposed to components further down the processing
 chain.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Fetches documents from an instance of Solr.
 
 @see <a href="http://lucene.apache.org/solr/">Apache SOLR</a>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.solr.SolrDocumentSource -->
  <!-- start class org.carrot2.source.solr.SolrDocumentSourceDescriptor -->
  <class name="SolrDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="SolrDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.solr.SolrDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.solr.SolrDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.solr.SolrDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder -->
  <class name="SolrDocumentSourceDescriptor.AttributeBuilder" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="serviceUrlBase" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Solr service URL base. The URL base can contain additional Solr parameters, 
for example: <tt>http://localhost:8983/solr/select?fq=timestemp:[NOW-24HOUR TO NOW]</tt>
 
 @see org.carrot2.source.solr.SolrDocumentSource#serviceUrlBase]]>
      </doc>
    </method>
    <method name="serviceUrlBase" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Solr service URL base. The URL base can contain additional Solr parameters, 
for example: <tt>http://localhost:8983/solr/select?fq=timestemp:[NOW-24HOUR TO NOW]</tt>
 
 @see org.carrot2.source.solr.SolrDocumentSource#serviceUrlBase]]>
      </doc>
    </method>
    <method name="solrFilterQuery" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Filter query appended to {@link org.carrot2.source.solr.SolrDocumentSource#serviceUrlBase}.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrFilterQuery]]>
      </doc>
    </method>
    <method name="solrFilterQuery" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Filter query appended to {@link org.carrot2.source.solr.SolrDocumentSource#serviceUrlBase}.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrFilterQuery]]>
      </doc>
    </method>
    <method name="solrTitleFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Title field name. Name of the Solr field that will provide document titles.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrTitleFieldName]]>
      </doc>
    </method>
    <method name="solrTitleFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Title field name. Name of the Solr field that will provide document titles.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrTitleFieldName]]>
      </doc>
    </method>
    <method name="solrSummaryFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Summary field name. Name of the Solr field that will provide document summary.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrSummaryFieldName]]>
      </doc>
    </method>
    <method name="solrSummaryFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Summary field name. Name of the Solr field that will provide document summary.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrSummaryFieldName]]>
      </doc>
    </method>
    <method name="solrUrlFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[URL field name. Name of the Solr field that will provide document URLs.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrUrlFieldName]]>
      </doc>
    </method>
    <method name="solrUrlFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[URL field name. Name of the Solr field that will provide document URLs.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrUrlFieldName]]>
      </doc>
    </method>
    <method name="solrIdFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Document identifier field name (specified in Solr schema). This field is necessary
to connect Solr-side clusters or highlighter output to documents.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrIdFieldName]]>
      </doc>
    </method>
    <method name="solrIdFieldName" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[Document identifier field name (specified in Solr schema). This field is necessary
to connect Solr-side clusters or highlighter output to documents.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrIdFieldName]]>
      </doc>
    </method>
    <method name="solrXsltAdapter" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.resource.IResource"/>
      <doc>
      <![CDATA[Provides a custom XSLT stylesheet for converting from Solr's output to
an XML format <a href="http://download.carrot2.org/head/manual/index.html#section.architecture.xml-formats">
parsed by Carrot2</a>. For performance reasons this attribute
can be provided at initialization time only (no processing-time overrides).
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrXsltAdapter]]>
      </doc>
    </method>
    <method name="solrXsltAdapter" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Provides a custom XSLT stylesheet for converting from Solr's output to
an XML format <a href="http://download.carrot2.org/head/manual/index.html#section.architecture.xml-formats">
parsed by Carrot2</a>. For performance reasons this attribute
can be provided at initialization time only (no processing-time overrides).

 A class that extends org.carrot2.util.resource.IResource or appropriate IObjectFactory.
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrXsltAdapter]]>
      </doc>
    </method>
    <method name="solrXsltAdapter" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.resource.IResource&gt;"/>
      <doc>
      <![CDATA[Provides a custom XSLT stylesheet for converting from Solr's output to
an XML format <a href="http://download.carrot2.org/head/manual/index.html#section.architecture.xml-formats">
parsed by Carrot2</a>. For performance reasons this attribute
can be provided at initialization time only (no processing-time overrides).
 
 @see org.carrot2.source.solr.SolrDocumentSource#solrXsltAdapter]]>
      </doc>
    </method>
    <method name="readClusters" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[If clusters are present in the Solr output they will be read and exposed to components
further down the processing chain. Note that {@link org.carrot2.source.solr.SolrDocumentSource#solrIdFieldName} is required to match
document references.
 
 @see org.carrot2.source.solr.SolrDocumentSource#readClusters]]>
      </doc>
    </method>
    <method name="readClusters" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[If clusters are present in the Solr output they will be read and exposed to components
further down the processing chain. Note that {@link org.carrot2.source.solr.SolrDocumentSource#solrIdFieldName} is required to match
document references.
 
 @see org.carrot2.source.solr.SolrDocumentSource#readClusters]]>
      </doc>
    </method>
    <method name="useHighlighterOutput" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[If highlighter fragments are present in the Solr output they will be used (and preferred) over full
field content. This may be used to decrease the memory required for clustering. In general if highlighter
is used the contents of full fields won't be emitted from Solr though (because it makes little sense).

<p>Setting this option to <code>false</code> will disable using the highlighter output
entirely.</p>
 
 @see org.carrot2.source.solr.SolrDocumentSource#useHighlighterOutput]]>
      </doc>
    </method>
    <method name="useHighlighterOutput" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[If highlighter fragments are present in the Solr output they will be used (and preferred) over full
field content. This may be used to decrease the memory required for clustering. In general if highlighter
is used the contents of full fields won't be emitted from Solr though (because it makes little sense).

<p>Setting this option to <code>false</code> will disable using the highlighter output
entirely.</p>
 
 @see org.carrot2.source.solr.SolrDocumentSource#useHighlighterOutput]]>
      </doc>
    </method>
    <method name="copyFields" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Copy Solr fields from the search result to Carrot2 {@link org.carrot2.core.Document} instances (as fields).
 
 @see org.carrot2.source.solr.SolrDocumentSource#copyFields]]>
      </doc>
    </method>
    <method name="copyFields" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Copy Solr fields from the search result to Carrot2 {@link org.carrot2.core.Document} instances (as fields).
 
 @see org.carrot2.source.solr.SolrDocumentSource#copyFields]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[If {@link org.carrot2.source.solr.SolrDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.solr.SolrDocumentSource#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[If {@link org.carrot2.source.solr.SolrDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.solr.SolrDocumentSource#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link org.carrot2.source.solr.SolrDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.solr.SolrDocumentSource#clusters]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.solr.SolrDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.solr.SolrDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.solr.SolrDocumentSourceDescriptor.Attributes -->
  <class name="SolrDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="serviceUrlBase" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrFilterQuery" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrTitleFieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrSummaryFieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrUrlFieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrIdFieldName" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="solrXsltAdapter" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="readClusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="useHighlighterOutput" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="copyFields" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.solr.SolrDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.solr.SolrDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.solr.SolrDocumentSourceDescriptor.Keys -->
  <class name="SolrDocumentSourceDescriptor.Keys" extends="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="SERVICE_URL_BASE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#serviceUrlBase}.]]>
      </doc>
    </field>
    <field name="SOLR_FILTER_QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrFilterQuery}.]]>
      </doc>
    </field>
    <field name="SOLR_TITLE_FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrTitleFieldName}.]]>
      </doc>
    </field>
    <field name="SOLR_SUMMARY_FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrSummaryFieldName}.]]>
      </doc>
    </field>
    <field name="SOLR_URL_FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrUrlFieldName}.]]>
      </doc>
    </field>
    <field name="SOLR_ID_FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrIdFieldName}.]]>
      </doc>
    </field>
    <field name="SOLR_XSLT_ADAPTER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#solrXsltAdapter}.]]>
      </doc>
    </field>
    <field name="READ_CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#readClusters}.]]>
      </doc>
    </field>
    <field name="USE_HIGHLIGHTER_OUTPUT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#useHighlighterOutput}.]]>
      </doc>
    </field>
    <field name="COPY_FIELDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#copyFields}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.solr.SolrDocumentSource#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.solr.SolrDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.solr.SolrDocumentSourceDescriptor.Keys -->
</package>
<package name="org.carrot2.source.xml">
  <!-- start class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase -->
  <class name="RemoteXmlSimpleSearchEngineBase" extends="org.carrot2.source.SimpleSearchEngine"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoteXmlSimpleSearchEngineBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
    </method>
    <method name="beforeProcessing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <method name="fetchSearchResponse" return="org.carrot2.source.SearchEngineResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="afterFetch"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="response" type="org.carrot2.source.SearchEngineResponse"/>
      <param name="processingResult" type="org.carrot2.core.ProcessingResult"/>
      <doc>
      <![CDATA[Invoked after the response has been partially parsed and {@link ProcessingResult}
 deserialized.]]>
      </doc>
    </method>
    <method name="getXsltResource" return="org.carrot2.util.resource.IResource"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XSLT stylesheet that transforms the custom XML into Carrot2 compliant
 XML. This method will be called once during component initialization.
 Initialization time attributes will have been bound before the call to this method.]]>
      </doc>
    </method>
    <method name="getXsltParameters" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns parameters to be passed to the XSLT transformer. This method will be called
 once per processing cycle. Processing-time attributes will have been bound before
 this method the call to this method. The default implementation returns
 <code>null</code>.]]>
      </doc>
    </method>
    <method name="buildServiceUrl" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds the URL from which XML stream will be fetched. This method will be called
 once per request processing cycle. Processing-time attributes will have been bound
 before this method the call to this method.]]>
      </doc>
    </method>
    <method name="getUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user name to use for HTTP Basic Authentication.]]>
      </doc>
    </method>
    <method name="getPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the password to use for HTTP Basic Authentication.]]>
      </doc>
    </method>
    <method name="loadProcessingResult" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <param name="stylesheet" type="javax.xml.transform.Templates"/>
      <param name="xsltParameters" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <param name="metadata" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <param name="user" type="java.lang.String"/>
      <param name="password" type="java.lang.String"/>
      <param name="redirectStrategy" type="org.carrot2.util.httpclient.HttpRedirectStrategy"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Loads a {@link ProcessingResult} from the provided remote URL, applying XSLT
 transform if specified. This method can handle gzip-compressed streams if supported
 by the data source.
 
 @param metadata if a non-<code>null</code> map is provided, request metadata will
            be put into the map.
 @param user if not <code>null</code>, the user name to use for HTTP Basic
            Authentication
 @param password if not <code>null</code>, the password to use for HTTP Basic
            Authentication]]>
      </doc>
    </method>
    <field name="redirectStrategy" type="org.carrot2.util.httpclient.HttpRedirectStrategy"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A base class for implementing data sources based on XML/XSLT. The XSLT stylesheet will
 be loaded once during component initialization and cached for all further requests.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase -->
  <!-- start class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor -->
  <class name="RemoteXmlSimpleSearchEngineBaseDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="RemoteXmlSimpleSearchEngineBaseDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor -->
  <!-- start class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder -->
  <class name="RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder" extends="org.carrot2.source.SimpleSearchEngineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="redirectStrategy" return="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.httpclient.HttpRedirectStrategy"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase#redirectStrategy]]>
      </doc>
    </method>
    <method name="redirectStrategy" return="org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.httpclient.HttpRedirectStrategy&gt;"/>
      <doc>
      <![CDATA[HTTP redirect response strategy (follow or throw an error).
 
 @see org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase#redirectStrategy]]>
      </doc>
    </method>
    <method name="xmlDocumentSourceHelper" return="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Attributes -->
  <class name="RemoteXmlSimpleSearchEngineBaseDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="redirectStrategy" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xmlDocumentSourceHelper" type="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Attributes -->
  <!-- start class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Keys -->
  <class name="RemoteXmlSimpleSearchEngineBaseDescriptor.Keys" extends="org.carrot2.source.SimpleSearchEngineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoteXmlSimpleSearchEngineBaseDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="REDIRECT_STRATEGY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase#redirectStrategy}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBase} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.RemoteXmlSimpleSearchEngineBaseDescriptor.Keys -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSource -->
  <class name="XmlDocumentSource" extends="org.carrot2.core.ProcessingComponentBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.core.IDocumentSource"/>
    <constructor name="XmlDocumentSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.core.IControllerContext"/>
    </method>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ProcessingException" type="org.carrot2.core.ProcessingException"/>
    </method>
    <field name="xml" type="org.carrot2.util.resource.IResource"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The resource to load XML data from. You can either create instances of
 {@link org.carrot2.util.resource.IResource} implementations directly or use 
 {@link org.carrot2.util.resource.ResourceLookup} to look up
 {@link org.carrot2.util.resource.IResource} instances from a variety of locations.
 <p>
 One special {@link org.carrot2.util.resource.IResource} implementation you can use is
 {@link org.carrot2.util.resource.URLResourceWithParams}. It allows you to specify attribute placeholders in
 the URL that will be replaced with actual values at runtime. The placeholder format
 is <code>${attribute}</code>. The following common attributes will be substituted:
 </p>
 <ul>
 <li><code>query</code> will be replaced with the current query being processed. If
 the query has not been provided, this attribute will fall back to an empty string.</li>
 <li><code>results</code> will be replaced with the number of results requested. If
 the number of results has not been provided, this attribute will be substituted
 with an empty string.</li>
 </ul>
 <p>
 Additionally, custom placeholders can be used. Values for the custom placeholders
 should be provided in the {@link #xmlParameters} attribute.
 </p>]]>
      </doc>
    </field>
    <field name="xslt" type="org.carrot2.util.resource.IResource"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The resource to load XSLT stylesheet from. The XSLT stylesheet is optional and is
 useful when the source XML stream does not follow the Carrot2 format. The XSLT
 transformation will be applied to the source XML stream, the transformed XML stream
 will be deserialized into {@link org.carrot2.core.Document}s.
 <p>
 The XSLT {@link org.carrot2.util.resource.IResource} can be provided both on initialization and processing
 time. The stylesheet provided on initialization will be cached for the life time of
 the component, while processing-time style sheets will be compiled every time
 processing is requested and will override the initialization-time stylesheet.
 </p>
 <p>
 To pass additional parameters to the XSLT transformer, use the
 {@link #xsltParameters} attribute.
 </p>]]>
      </doc>
    </field>
    <field name="xmlParameters" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Values for custom placeholders in the XML URL. If the type of resource provided in
 the {@link #xml} attribute is {@link org.carrot2.util.resource.URLResourceWithParams}, this map provides
 values for custom placeholders found in the XML URL. Keys of the map correspond to
 placeholder names, values of the map will be used to replace the placeholders.
 Please see {@link #xml} for the placeholder syntax.]]>
      </doc>
    </field>
    <field name="xsltParameters" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Parameters to be passed to the XSLT transformer. Keys of the map will be used as
 parameter names, values of the map as parameter values.]]>
      </doc>
    </field>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[After processing this field may hold the query read from the XML data, if any. For
 the semantics of this field on input, see {@link #xml}.]]>
      </doc>
    </field>
    <field name="results" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The maximum number of documents to read from the XML data if {@link #readAll} is
 <code>false</code>.]]>
      </doc>
    </field>
    <field name="readClusters" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If clusters are present in the input XML they will be read and exposed to components
 further down the processing chain.]]>
      </doc>
    </field>
    <field name="readAll" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If <code>true</code>, all documents are read from the input XML stream, regardless
 of the limit set by {@link #results}.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The title (file name or query attribute, if present) for the search result fetched
 from the resource.]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents read from the XML data.]]>
      </doc>
    </field>
    <field name="clusters" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link #readClusters} is <code>true</code> and clusters are present in the input
 XML, they will be deserialized and exposed to components further down the processing
 chain.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Fetches documents from XML files and streams. For additional flexibility, an XSLT
 stylesheet can be applied to the XML stream before it is deserialized into Carrot2
 data.
 
 @see #xml]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSource -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceDescriptor -->
  <class name="XmlDocumentSourceDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="XmlDocumentSourceDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.xml.XmlDocumentSourceDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.xml.XmlDocumentSource} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceDescriptor -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder -->
  <class name="XmlDocumentSourceDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlDocumentSourceDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="xml" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.resource.IResource"/>
      <doc>
      <![CDATA[The resource to load XML data from. You can either create instances of
{@link org.carrot2.util.resource.IResource} implementations directly or use 
{@link org.carrot2.util.resource.ResourceLookup} to look up
{@link org.carrot2.util.resource.IResource} instances from a variety of locations.
<p>
One special {@link org.carrot2.util.resource.IResource} implementation you can use is
{@link org.carrot2.util.resource.URLResourceWithParams}. It allows you to specify attribute placeholders in
the URL that will be replaced with actual values at runtime. The placeholder format
is <code>${attribute}</code>. The following common attributes will be substituted:
</p>
<ul>
<li><code>query</code> will be replaced with the current query being processed. If
the query has not been provided, this attribute will fall back to an empty string.</li>
<li><code>results</code> will be replaced with the number of results requested. If
the number of results has not been provided, this attribute will be substituted
with an empty string.</li>
</ul>
<p>
Additionally, custom placeholders can be used. Values for the custom placeholders
should be provided in the {@link org.carrot2.source.xml.XmlDocumentSource#xmlParameters} attribute.
</p>
 
 @see org.carrot2.source.xml.XmlDocumentSource#xml]]>
      </doc>
    </method>
    <method name="xml" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[The resource to load XML data from. You can either create instances of
{@link org.carrot2.util.resource.IResource} implementations directly or use 
{@link org.carrot2.util.resource.ResourceLookup} to look up
{@link org.carrot2.util.resource.IResource} instances from a variety of locations.
<p>
One special {@link org.carrot2.util.resource.IResource} implementation you can use is
{@link org.carrot2.util.resource.URLResourceWithParams}. It allows you to specify attribute placeholders in
the URL that will be replaced with actual values at runtime. The placeholder format
is <code>${attribute}</code>. The following common attributes will be substituted:
</p>
<ul>
<li><code>query</code> will be replaced with the current query being processed. If
the query has not been provided, this attribute will fall back to an empty string.</li>
<li><code>results</code> will be replaced with the number of results requested. If
the number of results has not been provided, this attribute will be substituted
with an empty string.</li>
</ul>
<p>
Additionally, custom placeholders can be used. Values for the custom placeholders
should be provided in the {@link org.carrot2.source.xml.XmlDocumentSource#xmlParameters} attribute.
</p>

 A class that extends org.carrot2.util.resource.IResource or appropriate IObjectFactory.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xml]]>
      </doc>
    </method>
    <method name="xml" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.resource.IResource&gt;"/>
      <doc>
      <![CDATA[The resource to load XML data from. You can either create instances of
{@link org.carrot2.util.resource.IResource} implementations directly or use 
{@link org.carrot2.util.resource.ResourceLookup} to look up
{@link org.carrot2.util.resource.IResource} instances from a variety of locations.
<p>
One special {@link org.carrot2.util.resource.IResource} implementation you can use is
{@link org.carrot2.util.resource.URLResourceWithParams}. It allows you to specify attribute placeholders in
the URL that will be replaced with actual values at runtime. The placeholder format
is <code>${attribute}</code>. The following common attributes will be substituted:
</p>
<ul>
<li><code>query</code> will be replaced with the current query being processed. If
the query has not been provided, this attribute will fall back to an empty string.</li>
<li><code>results</code> will be replaced with the number of results requested. If
the number of results has not been provided, this attribute will be substituted
with an empty string.</li>
</ul>
<p>
Additionally, custom placeholders can be used. Values for the custom placeholders
should be provided in the {@link org.carrot2.source.xml.XmlDocumentSource#xmlParameters} attribute.
</p>
 
 @see org.carrot2.source.xml.XmlDocumentSource#xml]]>
      </doc>
    </method>
    <method name="xslt" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.resource.IResource"/>
      <doc>
      <![CDATA[The resource to load XSLT stylesheet from. The XSLT stylesheet is optional and is
useful when the source XML stream does not follow the Carrot2 format. The XSLT
transformation will be applied to the source XML stream, the transformed XML stream
will be deserialized into {@link org.carrot2.core.Document}s.
<p>
The XSLT {@link org.carrot2.util.resource.IResource} can be provided both on initialization and processing
time. The stylesheet provided on initialization will be cached for the life time of
the component, while processing-time style sheets will be compiled every time
processing is requested and will override the initialization-time stylesheet.
</p>
<p>
To pass additional parameters to the XSLT transformer, use the
{@link org.carrot2.source.xml.XmlDocumentSource#xsltParameters} attribute.
</p>
 
 @see org.carrot2.source.xml.XmlDocumentSource#xslt]]>
      </doc>
    </method>
    <method name="xslt" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[The resource to load XSLT stylesheet from. The XSLT stylesheet is optional and is
useful when the source XML stream does not follow the Carrot2 format. The XSLT
transformation will be applied to the source XML stream, the transformed XML stream
will be deserialized into {@link org.carrot2.core.Document}s.
<p>
The XSLT {@link org.carrot2.util.resource.IResource} can be provided both on initialization and processing
time. The stylesheet provided on initialization will be cached for the life time of
the component, while processing-time style sheets will be compiled every time
processing is requested and will override the initialization-time stylesheet.
</p>
<p>
To pass additional parameters to the XSLT transformer, use the
{@link org.carrot2.source.xml.XmlDocumentSource#xsltParameters} attribute.
</p>

 A class that extends org.carrot2.util.resource.IResource or appropriate IObjectFactory.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xslt]]>
      </doc>
    </method>
    <method name="xslt" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.resource.IResource&gt;"/>
      <doc>
      <![CDATA[The resource to load XSLT stylesheet from. The XSLT stylesheet is optional and is
useful when the source XML stream does not follow the Carrot2 format. The XSLT
transformation will be applied to the source XML stream, the transformed XML stream
will be deserialized into {@link org.carrot2.core.Document}s.
<p>
The XSLT {@link org.carrot2.util.resource.IResource} can be provided both on initialization and processing
time. The stylesheet provided on initialization will be cached for the life time of
the component, while processing-time style sheets will be compiled every time
processing is requested and will override the initialization-time stylesheet.
</p>
<p>
To pass additional parameters to the XSLT transformer, use the
{@link org.carrot2.source.xml.XmlDocumentSource#xsltParameters} attribute.
</p>
 
 @see org.carrot2.source.xml.XmlDocumentSource#xslt]]>
      </doc>
    </method>
    <method name="xmlParameters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Values for custom placeholders in the XML URL. If the type of resource provided in
the {@link org.carrot2.source.xml.XmlDocumentSource#xml} attribute is {@link org.carrot2.util.resource.URLResourceWithParams}, this map provides
values for custom placeholders found in the XML URL. Keys of the map correspond to
placeholder names, values of the map will be used to replace the placeholders.
Please see {@link org.carrot2.source.xml.XmlDocumentSource#xml} for the placeholder syntax.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xmlParameters]]>
      </doc>
    </method>
    <method name="xmlParameters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.Map&lt;java.lang.String, java.lang.String&gt;&gt;"/>
      <doc>
      <![CDATA[Values for custom placeholders in the XML URL. If the type of resource provided in
the {@link org.carrot2.source.xml.XmlDocumentSource#xml} attribute is {@link org.carrot2.util.resource.URLResourceWithParams}, this map provides
values for custom placeholders found in the XML URL. Keys of the map correspond to
placeholder names, values of the map will be used to replace the placeholders.
Please see {@link org.carrot2.source.xml.XmlDocumentSource#xml} for the placeholder syntax.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xmlParameters]]>
      </doc>
    </method>
    <method name="xsltParameters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <doc>
      <![CDATA[Parameters to be passed to the XSLT transformer. Keys of the map will be used as
parameter names, values of the map as parameter values.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xsltParameters]]>
      </doc>
    </method>
    <method name="xsltParameters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.Map&lt;java.lang.String, java.lang.String&gt;&gt;"/>
      <doc>
      <![CDATA[Parameters to be passed to the XSLT transformer. Keys of the map will be used as
parameter names, values of the map as parameter values.
 
 @see org.carrot2.source.xml.XmlDocumentSource#xsltParameters]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[After processing this field may hold the query read from the XML data, if any. For
the semantics of this field on input, see {@link org.carrot2.source.xml.XmlDocumentSource#xml}.
 
 @see org.carrot2.source.xml.XmlDocumentSource#query]]>
      </doc>
    </method>
    <method name="query" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.String&gt;"/>
      <doc>
      <![CDATA[After processing this field may hold the query read from the XML data, if any. For
the semantics of this field on input, see {@link org.carrot2.source.xml.XmlDocumentSource#xml}.
 
 @see org.carrot2.source.xml.XmlDocumentSource#query]]>
      </doc>
    </method>
    <method name="query" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[After processing this field may hold the query read from the XML data, if any. For
the semantics of this field on input, see {@link org.carrot2.source.xml.XmlDocumentSource#xml}.
 
 @see org.carrot2.source.xml.XmlDocumentSource#query]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[The maximum number of documents to read from the XML data if {@link org.carrot2.source.xml.XmlDocumentSource#readAll} is
<code>false</code>.
 
 @see org.carrot2.source.xml.XmlDocumentSource#results]]>
      </doc>
    </method>
    <method name="results" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[The maximum number of documents to read from the XML data if {@link org.carrot2.source.xml.XmlDocumentSource#readAll} is
<code>false</code>.
 
 @see org.carrot2.source.xml.XmlDocumentSource#results]]>
      </doc>
    </method>
    <method name="readClusters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[If clusters are present in the input XML they will be read and exposed to components
further down the processing chain.
 
 @see org.carrot2.source.xml.XmlDocumentSource#readClusters]]>
      </doc>
    </method>
    <method name="readClusters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[If clusters are present in the input XML they will be read and exposed to components
further down the processing chain.
 
 @see org.carrot2.source.xml.XmlDocumentSource#readClusters]]>
      </doc>
    </method>
    <method name="readAll" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[If <code>true</code>, all documents are read from the input XML stream, regardless
of the limit set by {@link org.carrot2.source.xml.XmlDocumentSource#results}.
 
 @see org.carrot2.source.xml.XmlDocumentSource#readAll]]>
      </doc>
    </method>
    <method name="readAll" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[If <code>true</code>, all documents are read from the input XML stream, regardless
of the limit set by {@link org.carrot2.source.xml.XmlDocumentSource#results}.
 
 @see org.carrot2.source.xml.XmlDocumentSource#readAll]]>
      </doc>
    </method>
    <method name="title" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The title (file name or query attribute, if present) for the search result fetched
from the resource.
 
 @see org.carrot2.source.xml.XmlDocumentSource#title]]>
      </doc>
    </method>
    <method name="documents" return="java.util.List&lt;org.carrot2.core.Document&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Documents read from the XML data.
 
 @see org.carrot2.source.xml.XmlDocumentSource#documents]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.List&lt;org.carrot2.core.Cluster&gt;"/>
      <doc>
      <![CDATA[If {@link org.carrot2.source.xml.XmlDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.xml.XmlDocumentSource#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.List&lt;org.carrot2.core.Cluster&gt;&gt;"/>
      <doc>
      <![CDATA[If {@link org.carrot2.source.xml.XmlDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.xml.XmlDocumentSource#clusters]]>
      </doc>
    </method>
    <method name="clusters" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If {@link org.carrot2.source.xml.XmlDocumentSource#readClusters} is <code>true</code> and clusters are present in the input
XML, they will be deserialized and exposed to components further down the processing
chain.
 
 @see org.carrot2.source.xml.XmlDocumentSource#clusters]]>
      </doc>
    </method>
    <method name="xmlDocumentSourceHelper" return="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.xml.XmlDocumentSource} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceDescriptor.Attributes -->
  <class name="XmlDocumentSourceDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="xml" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xslt" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xmlParameters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="xsltParameters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="query" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#query]]>
      </doc>
    </field>
    <field name="results" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#results]]>
      </doc>
    </field>
    <field name="readClusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="readAll" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="title" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#processingResultTitle]]>
      </doc>
    </field>
    <field name="documents" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#documents]]>
      </doc>
    </field>
    <field name="clusters" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.core.attribute.CommonAttributes#clusters]]>
      </doc>
    </field>
    <field name="xmlDocumentSourceHelper" type="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.xml.XmlDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceDescriptor.Attributes -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceDescriptor.Keys -->
  <class name="XmlDocumentSourceDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlDocumentSourceDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="XML" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#xml}.]]>
      </doc>
    </field>
    <field name="XSLT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#xslt}.]]>
      </doc>
    </field>
    <field name="XML_PARAMETERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#xmlParameters}.]]>
      </doc>
    </field>
    <field name="XSLT_PARAMETERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#xsltParameters}.]]>
      </doc>
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#query}.]]>
      </doc>
    </field>
    <field name="RESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#results}.]]>
      </doc>
    </field>
    <field name="READ_CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#readClusters}.]]>
      </doc>
    </field>
    <field name="READ_ALL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#readAll}.]]>
      </doc>
    </field>
    <field name="TITLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#title}.]]>
      </doc>
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#documents}.]]>
      </doc>
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSource#clusters}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.xml.XmlDocumentSource} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceDescriptor.Keys -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceHelper -->
  <class name="XmlDocumentSourceHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlDocumentSourceHelper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="loadProcessingResult" return="org.carrot2.core.ProcessingResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xml" type="java.io.InputStream"/>
      <param name="stylesheet" type="javax.xml.transform.Templates"/>
      <param name="xsltParameters" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Loads a {@link ProcessingResult} from the provided {@link InputStream}, applying
 XSLT transform if specified. The provided {@link InputStream} will be closed.]]>
      </doc>
    </method>
    <method name="loadXslt" return="javax.xml.transform.Templates"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xslt" type="org.carrot2.util.resource.IResource"/>
      <doc>
      <![CDATA[Loads the XSLT stylesheet from the provided {@link IResource}.]]>
      </doc>
    </method>
    <field name="timeout" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Data transfer timeout. Specifies the data transfer timeout, in seconds. A timeout value of 
 zero is interpreted as an infinite timeout.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Exposes the common functionality a {@link IDocumentSource} based on XML/XSLT is likely
 to need. This helper does note expose any attributes, so that different implementations
 can decide which attributes they expose.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceHelper -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor -->
  <class name="XmlDocumentSourceHelperDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="XmlDocumentSourceHelperDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder -->
  <class name="XmlDocumentSourceHelperDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlDocumentSourceHelperDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="timeout" return="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Data transfer timeout. Specifies the data transfer timeout, in seconds. A timeout value of 
zero is interpreted as an infinite timeout.
 
 @see org.carrot2.source.xml.XmlDocumentSourceHelper#timeout]]>
      </doc>
    </method>
    <method name="timeout" return="org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Data transfer timeout. Specifies the data transfer timeout, in seconds. A timeout value of 
zero is interpreted as an infinite timeout.
 
 @see org.carrot2.source.xml.XmlDocumentSourceHelper#timeout]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Attributes -->
  <class name="XmlDocumentSourceHelperDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="timeout" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Attributes -->
  <!-- start class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Keys -->
  <class name="XmlDocumentSourceHelperDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlDocumentSourceHelperDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TIMEOUT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.source.xml.XmlDocumentSourceHelper#timeout}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.source.xml.XmlDocumentSourceHelper} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.source.xml.XmlDocumentSourceHelperDescriptor.Keys -->
</package>
<package name="org.carrot2.text.analysis">
  <!-- start class org.carrot2.text.analysis.ExtendedWhitespaceTokenizer -->
  <class name="ExtendedWhitespaceTokenizer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.analysis.ITokenizer"/>
    <constructor name="ExtendedWhitespaceTokenizer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.Reader"/>
      <doc>
      <![CDATA[Reset this tokenizer to start parsing another stream.]]>
      </doc>
    </method>
    <method name="nextToken" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setTermBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="org.carrot2.text.util.MutableCharArray"/>
    </method>
    <doc>
    <![CDATA[A tokenizer separating input characters on whitespace, but capable of extracting more
 complex tokens, such as URLs, e-mail addresses and sentence delimiters.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.analysis.ExtendedWhitespaceTokenizer -->
  <!-- start class org.carrot2.text.analysis.ExtendedWhitespaceTokenizerImpl -->
  <class name="ExtendedWhitespaceTokenizerImpl" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExtendedWhitespaceTokenizerImpl" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new scanner

 @param   in  the java.io.Reader to read input from.]]>
      </doc>
    </constructor>
    <method name="yychar" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="yyclose"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the input stream.]]>
      </doc>
    </method>
    <method name="yyreset"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <doc>
      <![CDATA[Resets the scanner to read from a new input stream.
 Does not close the old reader.

 All internal variables are reset, the old input stream 
 <b>cannot</b> be reused (internal buffer is discarded and lost).
 Lexical state is set to <tt>ZZ_INITIAL</tt>.

 Internal scan buffer is resized down to its initial length, if it has grown.

 @param reader   the new input stream]]>
      </doc>
    </method>
    <method name="yystate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current lexical state.]]>
      </doc>
    </method>
    <method name="yybegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="newState" type="int"/>
      <doc>
      <![CDATA[Enters a new lexical state

 @param newState the new lexical state]]>
      </doc>
    </method>
    <method name="yytext" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text matched by the current regular expression.]]>
      </doc>
    </method>
    <method name="yycharat" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="pos" type="int"/>
      <doc>
      <![CDATA[Returns the character at position <tt>pos</tt> from the 
 matched text. 
 
 It is equivalent to yytext().charAt(pos), but faster

 @param pos the position of the character to fetch. 
            A value from 0 to yylength()-1.

 @return the character at position pos]]>
      </doc>
    </method>
    <method name="yylength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length of the matched text region.]]>
      </doc>
    </method>
    <method name="yypushback"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <doc>
      <![CDATA[Pushes the specified amount of characters back into the input stream.

 They will be read again by then next call of the scanning method

 @param number  the number of characters to be read again.
                This number must not be greater than yylength()!]]>
      </doc>
    </method>
    <method name="getNextToken" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Resumes scanning until the next regular expression is matched,
 the end of input is encountered or an I/O-Error occurs.

 @return      the next token
 @exception   java.io.IOException  if any I/O-Error occurs]]>
      </doc>
    </method>
    <field name="YYEOF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This character denotes the end of file]]>
      </doc>
    </field>
    <field name="YYINITIAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[lexical states]]>
      </doc>
    </field>
  </class>
  <!-- end class org.carrot2.text.analysis.ExtendedWhitespaceTokenizerImpl -->
  <!-- start interface org.carrot2.text.analysis.ITokenizer -->
  <interface name="ITokenizer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Resets the tokenizer to process new data
 
 @param reader the input to tokenize. The reader <strong>will not be closed</strong>
            by the tokenizer when the end of stream is reached.]]>
      </doc>
    </method>
    <method name="nextToken" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the next token from the input stream.
 
 @return the type of the token as defined by the {@link #TT_TERM} and other
         constants or {@link #TT_EOF} when the end of the data stream has been
         reached.
 @see TokenTypeUtils]]>
      </doc>
    </method>
    <method name="setTermBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="org.carrot2.text.util.MutableCharArray"/>
      <doc>
      <![CDATA[Sets the <strong>current</strong> token image to the provided buffer.
 
 @param array buffer in which the <strong>current</strong> token image should be
            stored]]>
      </doc>
    </method>
    <field name="TYPE_MASK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_TERM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_NUMERIC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_PUNCTUATION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_EMAIL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_ACRONYM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_FULL_URL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_BARE_URL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_FILE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_HYPHTERM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TT_EOF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates the end of the token stream.]]>
      </doc>
    </field>
    <field name="TF_SEPARATOR_SENTENCE" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token is a sentence separator.]]>
      </doc>
    </field>
    <field name="TF_SEPARATOR_DOCUMENT" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token is a document separator (never returned from parsing).]]>
      </doc>
    </field>
    <field name="TF_SEPARATOR_FIELD" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token separates document's logical fields.]]>
      </doc>
    </field>
    <field name="TF_TERMINATOR" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token terminates the input (never returned from parsing).]]>
      </doc>
    </field>
    <field name="TF_COMMON_WORD" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The current token is a common word. This flag is not directly available from the
 tokenizer.
 
 @see AllWords#type
 @see StopListMarker]]>
      </doc>
    </field>
    <field name="TF_QUERY_WORD" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The current token is part of the query. This flag is not directly available from
 the tokenizer.
 
 @see AllWords#type
 @see LanguageModelStemmer]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Splits input characters into tokens representing e.g. words, digits, acronyms,
 punctuation. For each token, the following information is available:
 <dl>
 <dt>token type</dt>
 <dd>Types of tokens: numbers, URIs, punctuation, acronyms and others. See all constants
 in this class declared with <code>TT_</code> prefix, e.g. {@link #TT_TERM}.</dd>
 <dt>token flags</dt>
 <dd>Additional token flags such as an indication whether a punctuation token is a
 sentence delimiter ({@link #TF_SEPARATOR_SENTENCE}).</dd>
 </dl>
 
 @see TokenTypeUtils]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.analysis.ITokenizer -->
  <!-- start class org.carrot2.text.analysis.TokenTypeUtils -->
  <class name="TokenTypeUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="maskType" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rawType" type="int"/>
      <doc>
      <![CDATA[Mask the given raw token type and leave just the token
 type bits.]]>
      </doc>
    </method>
    <method name="isDocumentSeparator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="int"/>
      <doc>
      <![CDATA[Returns <code>true</code> if the given type has {@link ITokenizer#TF_SEPARATOR_DOCUMENT} set.]]>
      </doc>
    </method>
    <method name="isFieldSeparator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="int"/>
      <doc>
      <![CDATA[Returns <code>true</code> if the given type has {@link ITokenizer#TF_SEPARATOR_FIELD} set.]]>
      </doc>
    </method>
    <method name="isTerminator" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="int"/>
      <doc>
      <![CDATA[Returns <code>true</code> if the given type has {@link ITokenizer#TF_TERMINATOR} set.]]>
      </doc>
    </method>
    <method name="isCommon" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flag" type="int"/>
      <doc>
      <![CDATA[Return <code>true</code> if {@link ITokenizer#TF_COMMON_WORD} is set.]]>
      </doc>
    </method>
    <method name="isInQuery" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flag" type="int"/>
      <doc>
      <![CDATA[Return <code>true</code> if {@link ITokenizer#TF_QUERY_WORD} is set.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility methods for working with {@link ITokenizer} attributes.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.analysis.TokenTypeUtils -->
</package>
<package name="org.carrot2.text.clustering">
  <!-- start interface org.carrot2.text.clustering.IMonolingualClusteringAlgorithm -->
  <interface name="IMonolingualClusteringAlgorithm"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="process" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="language" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Clusters <code>documents</code> assuming they are written in <code>language</code>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An internal interface of an algorithm performing clustering in one language. 
 Implementations are <strong>not</strong> assumed to be thread-safe and will not be
 called concurrently.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.clustering.IMonolingualClusteringAlgorithm -->
  <!-- start class org.carrot2.text.clustering.MultilingualClustering -->
  <class name="MultilingualClustering" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultilingualClustering"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process" return="java.util.List&lt;org.carrot2.core.Cluster&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="algorithm" type="org.carrot2.text.clustering.IMonolingualClusteringAlgorithm"/>
    </method>
    <field name="languageAggregationStrategy" type="org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Language aggregation strategy. Determines how clusters generated for individual
 languages should be combined to form the final result. Please see
 {@link org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy} 
 for the list of available options.]]>
      </doc>
    </field>
    <field name="defaultLanguage" type="org.carrot2.core.LanguageCode"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default clustering language. The default language to use for documents with
 undefined {@link org.carrot2.core.Document#LANGUAGE}.]]>
      </doc>
    </field>
    <field name="languageCounts" type="java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document languages. The number of documents in each language. Empty string key means
 unknown language.]]>
      </doc>
    </field>
    <field name="majorityLanguage" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Majority language.
 If {@link #languageAggregationStrategy} is 
 {@link org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy#CLUSTER_IN_MAJORITY_LANGUAGE},
 this attribute will provide the majority language that was used to cluster all the documents.
 If the majority of the documents have undefined language, this attribute will be 
 empty and the clustering will be performed in the {@link #defaultLanguage}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A helper for clustering multilingual collections of documents. The helper partitions
 the input documents by {@link org.carrot2.core.Document#LANGUAGE}, clusters each such monolingual
 partition separately and then aggregates the partial cluster lists based on the
 selected {@link LanguageAggregationStrategy}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClustering -->
  <!-- start class org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy -->
  <class name="MultilingualClustering.LanguageAggregationStrategy" extends="java.lang.Enum&lt;org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Defines how monolingual partial clusters will be combined to form final results.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy -->
  <!-- start class org.carrot2.text.clustering.MultilingualClusteringDescriptor -->
  <class name="MultilingualClusteringDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="MultilingualClusteringDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.clustering.MultilingualClustering} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClusteringDescriptor -->
  <!-- start class org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder -->
  <class name="MultilingualClusteringDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultilingualClusteringDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="languageAggregationStrategy" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy"/>
      <doc>
      <![CDATA[Language aggregation strategy. Determines how clusters generated for individual
languages should be combined to form the final result. Please see
{@link org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy} 
for the list of available options.
 
 @see org.carrot2.text.clustering.MultilingualClustering#languageAggregationStrategy]]>
      </doc>
    </method>
    <method name="languageAggregationStrategy" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy&gt;"/>
      <doc>
      <![CDATA[Language aggregation strategy. Determines how clusters generated for individual
languages should be combined to form the final result. Please see
{@link org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy} 
for the list of available options.
 
 @see org.carrot2.text.clustering.MultilingualClustering#languageAggregationStrategy]]>
      </doc>
    </method>
    <method name="defaultLanguage" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Default clustering language. The default language to use for documents with
undefined {@link org.carrot2.core.Document#LANGUAGE}.
 
 @see org.carrot2.text.clustering.MultilingualClustering#defaultLanguage]]>
      </doc>
    </method>
    <method name="defaultLanguage" return="org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.core.LanguageCode&gt;"/>
      <doc>
      <![CDATA[Default clustering language. The default language to use for documents with
undefined {@link org.carrot2.core.Document#LANGUAGE}.
 
 @see org.carrot2.text.clustering.MultilingualClustering#defaultLanguage]]>
      </doc>
    </method>
    <method name="languageCounts" return="java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document languages. The number of documents in each language. Empty string key means
unknown language.
 
 @see org.carrot2.text.clustering.MultilingualClustering#languageCounts]]>
      </doc>
    </method>
    <method name="majorityLanguage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Majority language.
If {@link org.carrot2.text.clustering.MultilingualClustering#languageAggregationStrategy} is 
{@link org.carrot2.text.clustering.MultilingualClustering.LanguageAggregationStrategy#CLUSTER_IN_MAJORITY_LANGUAGE},
this attribute will provide the majority language that was used to cluster all the documents.
If the majority of the documents have undefined language, this attribute will be 
empty and the clustering will be performed in the {@link org.carrot2.text.clustering.MultilingualClustering#defaultLanguage}.
 
 @see org.carrot2.text.clustering.MultilingualClustering#majorityLanguage]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.clustering.MultilingualClustering} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClusteringDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes -->
  <class name="MultilingualClusteringDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="languageAggregationStrategy" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="defaultLanguage" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="languageCounts" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="majorityLanguage" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.clustering.MultilingualClustering} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClusteringDescriptor.Attributes -->
  <!-- start class org.carrot2.text.clustering.MultilingualClusteringDescriptor.Keys -->
  <class name="MultilingualClusteringDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultilingualClusteringDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="LANGUAGE_AGGREGATION_STRATEGY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.clustering.MultilingualClustering#languageAggregationStrategy}.]]>
      </doc>
    </field>
    <field name="DEFAULT_LANGUAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.clustering.MultilingualClustering#defaultLanguage}.]]>
      </doc>
    </field>
    <field name="LANGUAGE_COUNTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.clustering.MultilingualClustering#languageCounts}.]]>
      </doc>
    </field>
    <field name="MAJORITY_LANGUAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.clustering.MultilingualClustering#majorityLanguage}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.clustering.MultilingualClustering} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.clustering.MultilingualClusteringDescriptor.Keys -->
</package>
<package name="org.carrot2.text.linguistic">
  <!-- start class org.carrot2.text.linguistic.DefaultLexicalDataFactory -->
  <class name="DefaultLexicalDataFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.ILexicalDataFactory"/>
    <constructor name="DefaultLexicalDataFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLexicalData" return="org.carrot2.text.linguistic.ILexicalData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[The main logic for acquiring a shared {@link ILexicalData} instance.]]>
      </doc>
    </method>
    <method name="load" return="java.util.HashSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="org.carrot2.util.resource.IResource"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads words from a given {@link IResource} (UTF-8, one word per line, #-starting lines 
 are considered comments).]]>
      </doc>
    </method>
    <field name="reloadResources" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="mergeResources" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Merges stop words and stop labels from all known languages. If set to
 <code>false</code>, only stop words and stop labels of the active language will be
 used. If set to <code>true</code>, stop words from all {@link org.carrot2.core.LanguageCode}s will
 be used together and stop labels from all languages will be used together, no
 matter the active language. Lexical resource merging is useful when clustering data
 in a mix of different languages and should increase clustering quality in such
 settings.]]>
      </doc>
    </field>
    <field name="resourceLookup" type="org.carrot2.util.resource.ResourceLookup"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[The default management of lexical resources. Resources are read from disk, cached and shared 
 between <b>all</b> threads using this class. Additional attributes control resource reloading
 and merging: {@link #resourceLookup}, {@link #reloadResources}, 
 {@link #mergeResources}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultLexicalDataFactory -->
  <!-- start class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor -->
  <class name="DefaultLexicalDataFactoryDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="DefaultLexicalDataFactoryDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor -->
  <!-- start class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder -->
  <class name="DefaultLexicalDataFactoryDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultLexicalDataFactoryDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="reloadResources" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.DefaultLexicalDataFactory#reloadResources]]>
      </doc>
    </method>
    <method name="reloadResources" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.DefaultLexicalDataFactory#reloadResources]]>
      </doc>
    </method>
    <method name="mergeResources" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Merges stop words and stop labels from all known languages. If set to
<code>false</code>, only stop words and stop labels of the active language will be
used. If set to <code>true</code>, stop words from all {@link org.carrot2.core.LanguageCode}s will
be used together and stop labels from all languages will be used together, no
matter the active language. Lexical resource merging is useful when clustering data
in a mix of different languages and should increase clustering quality in such
settings.
 
 @see org.carrot2.text.linguistic.DefaultLexicalDataFactory#mergeResources]]>
      </doc>
    </method>
    <method name="mergeResources" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Merges stop words and stop labels from all known languages. If set to
<code>false</code>, only stop words and stop labels of the active language will be
used. If set to <code>true</code>, stop words from all {@link org.carrot2.core.LanguageCode}s will
be used together and stop labels from all languages will be used together, no
matter the active language. Lexical resource merging is useful when clustering data
in a mix of different languages and should increase clustering quality in such
settings.
 
 @see org.carrot2.text.linguistic.DefaultLexicalDataFactory#mergeResources]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.resource.ResourceLookup"/>
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.DefaultLexicalDataFactory#resourceLookup]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[A class that extends org.carrot2.util.resource.ResourceLookup or appropriate IObjectFactory.
 
 @see org.carrot2.text.linguistic.DefaultLexicalDataFactory#resourceLookup]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.resource.ResourceLookup&gt;"/>
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.DefaultLexicalDataFactory#resourceLookup]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.Attributes -->
  <class name="DefaultLexicalDataFactoryDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="reloadResources" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.LexicalDataLoader#reloadResources]]>
      </doc>
    </field>
    <field name="mergeResources" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resourceLookup" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@see org.carrot2.text.linguistic.LexicalDataLoader#resourceLookup]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.Attributes -->
  <!-- start class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.Keys -->
  <class name="DefaultLexicalDataFactoryDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultLexicalDataFactoryDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="RELOAD_RESOURCES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory#reloadResources}.]]>
      </doc>
    </field>
    <field name="MERGE_RESOURCES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory#mergeResources}.]]>
      </doc>
    </field>
    <field name="RESOURCE_LOOKUP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory#resourceLookup}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.linguistic.DefaultLexicalDataFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor.Keys -->
  <!-- start class org.carrot2.text.linguistic.DefaultStemmerFactory -->
  <class name="DefaultStemmerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmerFactory"/>
    <constructor name="DefaultStemmerFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStemmer" return="org.carrot2.text.linguistic.IStemmer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
    </method>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultStemmerFactory -->
  <!-- start class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor -->
  <class name="DefaultStemmerFactoryDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="DefaultStemmerFactoryDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.linguistic.DefaultStemmerFactory} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor -->
  <!-- start class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.AttributeBuilder -->
  <class name="DefaultStemmerFactoryDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultStemmerFactoryDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.linguistic.DefaultStemmerFactory} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.Attributes -->
  <class name="DefaultStemmerFactoryDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.linguistic.DefaultStemmerFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.Attributes -->
  <!-- start class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.Keys -->
  <class name="DefaultStemmerFactoryDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultStemmerFactoryDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.linguistic.DefaultStemmerFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultStemmerFactoryDescriptor.Keys -->
  <!-- start class org.carrot2.text.linguistic.DefaultTokenizerFactory -->
  <class name="DefaultTokenizerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.ITokenizerFactory"/>
    <constructor name="DefaultTokenizerFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTokenizer" return="org.carrot2.text.analysis.ITokenizer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
    </method>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultTokenizerFactory -->
  <!-- start class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor -->
  <class name="DefaultTokenizerFactoryDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="DefaultTokenizerFactoryDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.linguistic.DefaultTokenizerFactory} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor -->
  <!-- start class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.AttributeBuilder -->
  <class name="DefaultTokenizerFactoryDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultTokenizerFactoryDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.linguistic.DefaultTokenizerFactory} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.Attributes -->
  <class name="DefaultTokenizerFactoryDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.linguistic.DefaultTokenizerFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.Attributes -->
  <!-- start class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.Keys -->
  <class name="DefaultTokenizerFactoryDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefaultTokenizerFactoryDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.linguistic.DefaultTokenizerFactory} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.DefaultTokenizerFactoryDescriptor.Keys -->
  <!-- start class org.carrot2.text.linguistic.IdentityStemmer -->
  <class name="IdentityStemmer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmer"/>
    <constructor name="IdentityStemmer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stem" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="java.lang.CharSequence"/>
    </method>
    <doc>
    <![CDATA[An implementation of {@link IStemmer} that always returns <code>null</code> from
 {@link #stem(CharSequence)}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.IdentityStemmer -->
  <!-- start class org.carrot2.text.linguistic.IdentityStemmerFactory -->
  <class name="IdentityStemmerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmerFactory"/>
    <constructor name="IdentityStemmerFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getStemmer" return="org.carrot2.text.linguistic.IStemmer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
    </method>
    <doc>
    <![CDATA[An {@link IStemmerFactory} implementation that returns {@link IdentityStemmer}s for all
 supported languages.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.IdentityStemmerFactory -->
  <!-- start interface org.carrot2.text.linguistic.ILexicalData -->
  <interface name="ILexicalData"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isCommonWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="org.carrot2.text.util.MutableCharArray"/>
      <doc>
      <![CDATA[@return Returns <code>true</code> if <code>word</code> is common (meaningless) in
         this language. Such words are referred to as "stop words" and are usually
         ignored in information retrieval tasks. Depending on the implementation,
         <code>word</code> may be lower-cased internally.]]>
      </doc>
    </method>
    <method name="isStopLabel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formattedLabel" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[@return Returns <code>true</code> if the <code>formattedLabel</code> has been
         declared a stop label (meaningless) in this language. This is a very
         low-level tuning method.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Additional lexical information for a given language.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.linguistic.ILexicalData -->
  <!-- start interface org.carrot2.text.linguistic.ILexicalDataFactory -->
  <interface name="ILexicalDataFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getLexicalData" return="org.carrot2.text.linguistic.ILexicalData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Provide {@link ILexicalData} for a given language. May take 
 considerable time to read and parse resources from disk. Factories
 should cache their processed data structures, if possible.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides instances of {@link ILexicalData} for each language.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.linguistic.ILexicalDataFactory -->
  <!-- start interface org.carrot2.text.linguistic.IStemmer -->
  <interface name="IStemmer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="stem" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[Returns the base form of the provided word or <code>null</code> if the base form
 cannot be determined. In the latter case, the base form will be assumed to be the
 same as the original word.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Simple lemmatization engine transforming an inflected form of a word to its base form
 or some other unique token.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.linguistic.IStemmer -->
  <!-- start interface org.carrot2.text.linguistic.IStemmerFactory -->
  <interface name="IStemmerFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getStemmer" return="org.carrot2.text.linguistic.IStemmer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Provide {@link IStemmer} for a given language.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides instances of {@link IStemmer} for each language.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.linguistic.IStemmerFactory -->
  <!-- start interface org.carrot2.text.linguistic.ITokenizerFactory -->
  <interface name="ITokenizerFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getTokenizer" return="org.carrot2.text.analysis.ITokenizer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Provide {@link ITokenizer} for a given language.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides instances of {@link ITokenizer} for each language.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.linguistic.ITokenizerFactory -->
  <!-- start class org.carrot2.text.linguistic.LanguageModel -->
  <class name="LanguageModel" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="create" return="org.carrot2.text.linguistic.LanguageModel"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="languageCode" type="org.carrot2.core.LanguageCode"/>
      <param name="stemmerFactory" type="org.carrot2.text.linguistic.IStemmerFactory"/>
      <param name="tokenizerFactory" type="org.carrot2.text.linguistic.ITokenizerFactory"/>
      <param name="lexicalDataFactory" type="org.carrot2.text.linguistic.ILexicalDataFactory"/>
    </method>
    <method name="getLanguageCode" return="org.carrot2.core.LanguageCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLexicalData" return="org.carrot2.text.linguistic.ILexicalData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStemmer" return="org.carrot2.text.linguistic.IStemmer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTokenizer" return="org.carrot2.text.analysis.ITokenizer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A holder for all elements of a language model for a single language used internally by
 content preprocessing components.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LanguageModel -->
  <!-- start class org.carrot2.text.linguistic.LexicalDataLoader -->
  <class name="LexicalDataLoader" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LexicalDataLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="reloadResources" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Reloads cached stop words and stop labels on every processing request. For best
 performance, lexical resource reloading should be disabled in production.
 
 <p>This flag is reset to <code>false</code> after successful resource reload to prevent
 multiple resource reloads during the same processing cycle.</p>]]>
      </doc>
    </field>
    <field name="resourceLookup" type="org.carrot2.util.resource.ResourceLookup"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexical resource lookup facade. By default, resources are sought in the current
 thread's context class loader. An override of this attribute is possible both at
 the initialization time and at processing time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Common attributes related to loading and caching of lexical resources.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LexicalDataLoader -->
  <!-- start class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor -->
  <class name="LexicalDataLoaderDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LexicalDataLoaderDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.linguistic.LexicalDataLoader} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor -->
  <!-- start class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder -->
  <class name="LexicalDataLoaderDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LexicalDataLoaderDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="reloadResources" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Reloads cached stop words and stop labels on every processing request. For best
performance, lexical resource reloading should be disabled in production.

<p>This flag is reset to <code>false</code> after successful resource reload to prevent
multiple resource reloads during the same processing cycle.</p>
 
 @see org.carrot2.text.linguistic.LexicalDataLoader#reloadResources]]>
      </doc>
    </method>
    <method name="reloadResources" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Reloads cached stop words and stop labels on every processing request. For best
performance, lexical resource reloading should be disabled in production.

<p>This flag is reset to <code>false</code> after successful resource reload to prevent
multiple resource reloads during the same processing cycle.</p>
 
 @see org.carrot2.text.linguistic.LexicalDataLoader#reloadResources]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.resource.ResourceLookup"/>
      <doc>
      <![CDATA[Lexical resource lookup facade. By default, resources are sought in the current
thread's context class loader. An override of this attribute is possible both at
the initialization time and at processing time.
 
 @see org.carrot2.text.linguistic.LexicalDataLoader#resourceLookup]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Lexical resource lookup facade. By default, resources are sought in the current
thread's context class loader. An override of this attribute is possible both at
the initialization time and at processing time.

 A class that extends org.carrot2.util.resource.ResourceLookup or appropriate IObjectFactory.
 
 @see org.carrot2.text.linguistic.LexicalDataLoader#resourceLookup]]>
      </doc>
    </method>
    <method name="resourceLookup" return="org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.util.resource.ResourceLookup&gt;"/>
      <doc>
      <![CDATA[Lexical resource lookup facade. By default, resources are sought in the current
thread's context class loader. An override of this attribute is possible both at
the initialization time and at processing time.
 
 @see org.carrot2.text.linguistic.LexicalDataLoader#resourceLookup]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.linguistic.LexicalDataLoader} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.Attributes -->
  <class name="LexicalDataLoaderDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="reloadResources" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="resourceLookup" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.linguistic.LexicalDataLoader} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.Attributes -->
  <!-- start class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.Keys -->
  <class name="LexicalDataLoaderDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LexicalDataLoaderDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="RELOAD_RESOURCES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.linguistic.LexicalDataLoader#reloadResources}.]]>
      </doc>
    </field>
    <field name="RESOURCE_LOOKUP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.linguistic.LexicalDataLoader#resourceLookup}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.linguistic.LexicalDataLoader} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.LexicalDataLoaderDescriptor.Keys -->
</package>
<package name="org.carrot2.text.linguistic.lucene">
  <!-- start class org.carrot2.text.linguistic.lucene.ArabicStemmerAdapter -->
  <class name="ArabicStemmerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmer"/>
    <constructor name="ArabicStemmerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stem" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="java.lang.CharSequence"/>
    </method>
    <doc>
    <![CDATA[Adapter to lucene-contrib Arabic analyzers.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.lucene.ArabicStemmerAdapter -->
  <!-- start class org.carrot2.text.linguistic.lucene.ChineseTokenizerAdapter -->
  <class name="ChineseTokenizerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.analysis.ITokenizer"/>
    <constructor name="ChineseTokenizerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextToken" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setTermBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="org.carrot2.text.util.MutableCharArray"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </class>
  <!-- end class org.carrot2.text.linguistic.lucene.ChineseTokenizerAdapter -->
  <!-- start class org.carrot2.text.linguistic.lucene.HindiStemmerAdapter -->
  <class name="HindiStemmerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmer"/>
    <constructor name="HindiStemmerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stem" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="java.lang.CharSequence"/>
    </method>
    <doc>
    <![CDATA[An adapter class applying Lucene's HindiAnalyzer's pipeline to the stream of
 Carrot2 tokens.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.lucene.HindiStemmerAdapter -->
  <!-- start class org.carrot2.text.linguistic.lucene.SnowballStemmerFactory -->
  <class name="SnowballStemmerFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.factory.IFactory&lt;org.carrot2.text.linguistic.IStemmer&gt;"/>
    <constructor name="SnowballStemmerFactory" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createInstance" return="org.carrot2.text.linguistic.IStemmer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A factory of Snowball-based stemmers.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.lucene.SnowballStemmerFactory -->
  <!-- start class org.carrot2.text.linguistic.lucene.ThaiTokenizerAdapter -->
  <class name="ThaiTokenizerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.analysis.ITokenizer"/>
    <constructor name="ThaiTokenizerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextToken" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setTermBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="org.carrot2.text.util.MutableCharArray"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="platformSupportsThai" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check support for Thai.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thai tokenizer implemented using Lucene's {@link ThaiTokenizer}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.lucene.ThaiTokenizerAdapter -->
</package>
<package name="org.carrot2.text.linguistic.morfologik">
  <!-- start class org.carrot2.text.linguistic.morfologik.MorfologikStemmerAdapter -->
  <class name="MorfologikStemmerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.linguistic.IStemmer"/>
    <constructor name="MorfologikStemmerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stem" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="java.lang.CharSequence"/>
    </method>
    <doc>
    <![CDATA[Adapter to Morfologik stemmer.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.linguistic.morfologik.MorfologikStemmerAdapter -->
</package>
<package name="org.carrot2.text.preprocessing">
  <!-- start class org.carrot2.text.preprocessing.CaseNormalizer -->
  <class name="CaseNormalizer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CaseNormalizer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="normalize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Performs normalization and saves the results to the <code>context</code>.]]>
      </doc>
    </method>
    <field name="dfThreshold" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Word Document Frequency threshold. Words appearing in fewer than
 <code>dfThreshold</code> documents will be ignored.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs case normalization and calculates a number of frequency statistics for words.
 The aim of case normalization is to find the most frequently appearing variants of
 words in terms of case. For example, if in the input documents <i>MacOS</i> appears 20
 times, <i>Macos</i> 5 times and <i>macos</i> 2 times, case normalizer will select
 <i>MacOS</i> to represent all variants and assign the aggregated term frequency of 27
 to it.
 <p>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllTokens#wordIndex}</li>
 <li>{@link AllWords#image}</li>
 <li>{@link AllWords#tf}</li>
 <li>{@link AllWords#tfByDocument}</li>
 </ul>
 <p>
 This class requires that {@link Tokenizer} be invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.CaseNormalizer -->
  <!-- start class org.carrot2.text.preprocessing.CaseNormalizerDescriptor -->
  <class name="CaseNormalizerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="CaseNormalizerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.CaseNormalizer} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.CaseNormalizerDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder -->
  <class name="CaseNormalizerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CaseNormalizerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="dfThreshold" return="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Word Document Frequency threshold. Words appearing in fewer than
<code>dfThreshold</code> documents will be ignored.
 
 @see org.carrot2.text.preprocessing.CaseNormalizer#dfThreshold]]>
      </doc>
    </method>
    <method name="dfThreshold" return="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Word Document Frequency threshold. Words appearing in fewer than
<code>dfThreshold</code> documents will be ignored.
 
 @see org.carrot2.text.preprocessing.CaseNormalizer#dfThreshold]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.CaseNormalizer} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Attributes -->
  <class name="CaseNormalizerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="dfThreshold" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.CaseNormalizer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Keys -->
  <class name="CaseNormalizerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CaseNormalizerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DF_THRESHOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.CaseNormalizer#dfThreshold}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.CaseNormalizer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.DocumentAssigner -->
  <class name="DocumentAssigner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DocumentAssigner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="assign"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Assigns document to label candidates.]]>
      </doc>
    </method>
    <field name="exactPhraseAssignment" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Only exact phrase assignments. Assign only documents that contain the label in its
 original form, including the order of words. Enabling this option will cause less
 documents to be put in clusters, which result in higher precision of assignment,
 but also a larger "Other Topics" group. Disabling this option will cause more
 documents to be put in clusters, which will make the "Other Topics" cluster
 smaller, but also lower the precision of cluster-document assignments.]]>
      </doc>
    </field>
    <field name="minClusterSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines the minimum number of documents in each cluster.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Assigns document to label candidates. For each label candidate from
 {@link AllLabels#featureIndex} an {@link BitSet} with the assigned documents is
 constructed. The assignment algorithm is rather simple: in order to be assigned to a
 label, a document must contain at least one occurrence of each non-stop word from the
 label.
 <p>
 This class saves the following results to the {@link PreprocessingContext} :
 <ul>
 <li>{@link AllLabels#documentIndices}</li>
 </ul>
 <p>
 This class requires that {@link Tokenizer}, {@link CaseNormalizer},
 {@link StopListMarker}, {@link PhraseExtractor} and {@link LabelFilterProcessor} be
 invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.DocumentAssigner -->
  <!-- start class org.carrot2.text.preprocessing.DocumentAssignerDescriptor -->
  <class name="DocumentAssignerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="DocumentAssignerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.DocumentAssigner} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.DocumentAssignerDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder -->
  <class name="DocumentAssignerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DocumentAssignerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="exactPhraseAssignment" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Only exact phrase assignments. Assign only documents that contain the label in its
original form, including the order of words. Enabling this option will cause less
documents to be put in clusters, which result in higher precision of assignment,
but also a larger "Other Topics" group. Disabling this option will cause more
documents to be put in clusters, which will make the "Other Topics" cluster
smaller, but also lower the precision of cluster-document assignments.
 
 @see org.carrot2.text.preprocessing.DocumentAssigner#exactPhraseAssignment]]>
      </doc>
    </method>
    <method name="exactPhraseAssignment" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Only exact phrase assignments. Assign only documents that contain the label in its
original form, including the order of words. Enabling this option will cause less
documents to be put in clusters, which result in higher precision of assignment,
but also a larger "Other Topics" group. Disabling this option will cause more
documents to be put in clusters, which will make the "Other Topics" cluster
smaller, but also lower the precision of cluster-document assignments.
 
 @see org.carrot2.text.preprocessing.DocumentAssigner#exactPhraseAssignment]]>
      </doc>
    </method>
    <method name="minClusterSize" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Determines the minimum number of documents in each cluster.
 
 @see org.carrot2.text.preprocessing.DocumentAssigner#minClusterSize]]>
      </doc>
    </method>
    <method name="minClusterSize" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Determines the minimum number of documents in each cluster.
 
 @see org.carrot2.text.preprocessing.DocumentAssigner#minClusterSize]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.DocumentAssigner} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Attributes -->
  <class name="DocumentAssignerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="exactPhraseAssignment" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="minClusterSize" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.DocumentAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Keys -->
  <class name="DocumentAssignerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DocumentAssignerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="EXACT_PHRASE_ASSIGNMENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.DocumentAssigner#exactPhraseAssignment}.]]>
      </doc>
    </field>
    <field name="MIN_CLUSTER_SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.DocumentAssigner#minClusterSize}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.DocumentAssigner} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.LabelFilterProcessor -->
  <class name="LabelFilterProcessor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFilterProcessor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="process"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Processes all filters declared as fields of this class.]]>
      </doc>
    </method>
    <field name="queryLabelFilter" type="org.carrot2.text.preprocessing.filter.QueryLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Query word label filter for this processor.]]>
      </doc>
    </field>
    <field name="stopWordLabelFilter" type="org.carrot2.text.preprocessing.filter.StopWordLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stop word label filter for this processor.]]>
      </doc>
    </field>
    <field name="numericLabelFilter" type="org.carrot2.text.preprocessing.filter.NumericLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Numeric label filter for this processor.]]>
      </doc>
    </field>
    <field name="completeLabelFilter" type="org.carrot2.text.preprocessing.filter.CompleteLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Truncated phrase filter for this processor.]]>
      </doc>
    </field>
    <field name="minLengthLabelFilter" type="org.carrot2.text.preprocessing.filter.MinLengthLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Min length label filter.]]>
      </doc>
    </field>
    <field name="genitiveLabelFilter" type="org.carrot2.text.preprocessing.filter.GenitiveLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Genitive length label filter.]]>
      </doc>
    </field>
    <field name="stopLabelFilter" type="org.carrot2.text.preprocessing.filter.StopLabelFilter"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stop label filter.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Applies basic filtering to words and phrases to produce candidates for cluster labels.
 Filtering is applied to {@link AllWords} and {@link AllPhrases}, the results are saved
 to {@link AllLabels}. Currently, the following filters are applied:
 <ol>
 <li>{@link StopWordLabelFilter}</li>
 <li>{@link CompleteLabelFilter}</li>
 </ol>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllLabels#featureIndex}</li>
 </ul>
 <p>
 This class requires that {@link Tokenizer}, {@link CaseNormalizer},
 {@link StopListMarker} and {@link PhraseExtractor} be invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFilterProcessor -->
  <!-- start class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor -->
  <class name="LabelFilterProcessorDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LabelFilterProcessorDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.AttributeBuilder -->
  <class name="LabelFilterProcessorDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFilterProcessorDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Attributes -->
  <class name="LabelFilterProcessorDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Keys -->
  <class name="LabelFilterProcessorDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFilterProcessorDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.LabelFormatter -->
  <class name="LabelFormatter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFormatter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="format" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="featureIndex" type="int"/>
      <doc>
      <![CDATA[Formats a cluster label for final rendering.]]>
      </doc>
    </method>
    <method name="format" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="char[][]"/>
      <param name="stopWord" type="boolean[]"/>
      <param name="joinWithSpace" type="boolean"/>
      <doc>
      <![CDATA[A method for formatting cluster labels that is not coupled to
 {@link PreprocessingContext#allLabels} and can be used in algorithms that do not
 use the full preprocessing pipeline.
 
 @param image images of the words making the label.
 @param stopWord determines whether the corresponding word of the label is a stop
            word
 @param joinWithSpace if <code>true</code>, label tokens will be joined with a space
            character, if <code>false</code>, no extra characters will be inserted
            between label tokens.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Formats cluster labels for final rendering.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFormatter -->
  <!-- start class org.carrot2.text.preprocessing.LabelFormatterDescriptor -->
  <class name="LabelFormatterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LabelFormatterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.LabelFormatter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFormatterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder -->
  <class name="LabelFormatterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFormatterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.LabelFormatter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes -->
  <class name="LabelFormatterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.LabelFormatter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.LabelFormatterDescriptor.Keys -->
  <class name="LabelFormatterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LabelFormatterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.LabelFormatter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LabelFormatterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.LanguageModelStemmer -->
  <class name="LanguageModelStemmer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LanguageModelStemmer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Performs stemming and saves the results to the <code>context</code>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Applies stemming to words and calculates a number of frequency statistics for stems.
 <p>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllWords#stemIndex}</li>
 <li>{@link AllStems#image}</li>
 <li>{@link AllStems#mostFrequentOriginalWordIndex}</li>
 <li>{@link AllStems#tf}</li>
 <li>{@link AllStems#tfByDocument}</li>
 <li>{@link AllWords#type} is populated with {@link ITokenizer#TF_QUERY_WORD}</li>
 </ul>
 
 This class requires that {@link Tokenizer} and {@link CaseNormalizer} be invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LanguageModelStemmer -->
  <!-- start class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor -->
  <class name="LanguageModelStemmerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="LanguageModelStemmerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.AttributeBuilder -->
  <class name="LanguageModelStemmerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LanguageModelStemmerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Attributes -->
  <class name="LanguageModelStemmerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Keys -->
  <class name="LanguageModelStemmerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LanguageModelStemmerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.PhraseExtractor -->
  <class name="PhraseExtractor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PhraseExtractor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="extractPhrases"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Performs phrase extraction and saves the results to the provided
 <code>context</code>.]]>
      </doc>
    </method>
    <field name="dfThreshold" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase Document Frequency threshold. Phrases appearing in fewer than
 <code>dfThreshold</code> documents will be ignored.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Extracts frequent phrases from the provided document. A frequent phrase is a sequence
 of words that appears in the documents more than once. This phrase extractor aggregates
 different inflection variants of phrase words into one phrase, returning the most
 frequent variant. For example, if phrase <i>computing science</i> appears 2 times and
 <i>computer sciences</i> appears 4 times, the latter will be returned with aggregated
 frequency of 6.
 <p>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllPhrases#wordIndices}</li>
 <li>{@link AllPhrases#tf}</li>
 <li>{@link AllPhrases#tfByDocument}</li>
 <li>{@link AllTokens#suffixOrder}</li>
 <li>{@link AllTokens#lcp}</li>
 </ul>
 <p>
 This class requires that {@link Tokenizer}, {@link CaseNormalizer} and
 {@link LanguageModelStemmer} be invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PhraseExtractor -->
  <!-- start class org.carrot2.text.preprocessing.PhraseExtractorDescriptor -->
  <class name="PhraseExtractorDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="PhraseExtractorDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.PhraseExtractor} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PhraseExtractorDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder -->
  <class name="PhraseExtractorDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PhraseExtractorDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="dfThreshold" return="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Phrase Document Frequency threshold. Phrases appearing in fewer than
<code>dfThreshold</code> documents will be ignored.
 
 @see org.carrot2.text.preprocessing.PhraseExtractor#dfThreshold]]>
      </doc>
    </method>
    <method name="dfThreshold" return="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Phrase Document Frequency threshold. Phrases appearing in fewer than
<code>dfThreshold</code> documents will be ignored.
 
 @see org.carrot2.text.preprocessing.PhraseExtractor#dfThreshold]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.PhraseExtractor} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Attributes -->
  <class name="PhraseExtractorDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="dfThreshold" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.PhraseExtractor} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Keys -->
  <class name="PhraseExtractorDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PhraseExtractorDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DF_THRESHOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.PhraseExtractor#dfThreshold}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.PhraseExtractor} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessedDocumentScanner -->
  <class name="PreprocessedDocumentScanner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessedDocumentScanner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="equalTo" return="com.carrotsearch.hppc.predicates.ShortPredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="short"/>
      <doc>
      <![CDATA[Return a new {@link ShortPredicate} returning <code>true</code>
 if the argument equals a given value.]]>
      </doc>
    </method>
    <method name="iterate"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Iterate over all documents, fields and sentences in {@link PreprocessingContext#allTokens}.]]>
      </doc>
    </method>
    <method name="document"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Invoked for each document. Splits further into fields.]]>
      </doc>
    </method>
    <method name="field"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Invoked for each document's field. Splits further into sentences.]]>
      </doc>
    </method>
    <method name="sentence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Invoked for each document's sentence.]]>
      </doc>
    </method>
    <field name="ON_DOCUMENT_SEPARATOR" type="com.carrotsearch.hppc.predicates.ShortPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for splitting on document separator.]]>
      </doc>
    </field>
    <field name="ON_FIELD_SEPARATOR" type="com.carrotsearch.hppc.predicates.ShortPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for splitting on field separator.]]>
      </doc>
    </field>
    <field name="ON_SENTENCE_SEPARATOR" type="com.carrotsearch.hppc.predicates.ShortPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Predicate for splitting on sentence separator.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Iterates over tokenized documents in {@link PreprocessingContext}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessedDocumentScanner -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext -->
  <class name="PreprocessingContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext" type="org.carrot2.text.linguistic.LanguageModel, java.util.List&lt;org.carrot2.core.Document&gt;, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a preprocessing context for the provided <code>documents</code> and with
 the provided <code>languageModel</code>.]]>
      </doc>
    </constructor>
    <method name="hasWords" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <code>true</code> if this context contains any words.]]>
      </doc>
    </method>
    <method name="hasLabels" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <code>true</code> if this context contains any label candidates.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toFieldIndexes" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte"/>
      <doc>
      <![CDATA[Convert the selected bits in a byte to an array of indexes.]]>
      </doc>
    </method>
    <method name="preprocessingFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method should be invoked after all preprocessing contributors have been executed
 to release temporary data structures.]]>
      </doc>
    </method>
    <method name="intern" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chs" type="org.carrot2.text.util.MutableCharArray"/>
      <doc>
      <![CDATA[Return a unique char buffer representing a given character sequence.]]>
      </doc>
    </method>
    <field name="query" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Query used to perform processing, may be <code>null</code>]]>
      </doc>
    </field>
    <field name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A list of documents to process.]]>
      </doc>
    </field>
    <field name="language" type="org.carrot2.text.linguistic.LanguageModel"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Language model to be used]]>
      </doc>
    </field>
    <field name="allTokens" type="org.carrot2.text.preprocessing.PreprocessingContext.AllTokens"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about all tokens of the input {@link PreprocessingContext#documents}.]]>
      </doc>
    </field>
    <field name="allFields" type="org.carrot2.text.preprocessing.PreprocessingContext.AllFields"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about all fields processed for the input
 {@link PreprocessingContext#documents}.]]>
      </doc>
    </field>
    <field name="allWords" type="org.carrot2.text.preprocessing.PreprocessingContext.AllWords"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about all unique words found in the input
 {@link PreprocessingContext#documents}.]]>
      </doc>
    </field>
    <field name="allStems" type="org.carrot2.text.preprocessing.PreprocessingContext.AllStems"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about all unique stems found in the input
 {@link PreprocessingContext#documents}.]]>
      </doc>
    </field>
    <field name="allPhrases" type="org.carrot2.text.preprocessing.PreprocessingContext.AllPhrases"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about all frequently appearing sequences of words found in the input
 {@link PreprocessingContext#documents}.]]>
      </doc>
    </field>
    <field name="allLabels" type="org.carrot2.text.preprocessing.PreprocessingContext.AllLabels"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Information about words and phrases that might be good cluster label candidates.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Document preprocessing context provides low-level (usually integer-coded) data
 structures useful for further processing.
 
 <p><img src="doc-files/preprocessing-arrays.png"
      alt="Internals of PreprocessingContext"></p>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllFields -->
  <class name="PreprocessingContext.AllFields" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllFields"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <field name="name" type="java.lang.String[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Name of the document field. Entries of {@link AllTokens#fieldIndex} point to
 this array.
 <p>
 This array is produced by {@link Tokenizer}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about all fields processed for the input
 {@link PreprocessingContext#documents}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllFields -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllLabels -->
  <class name="PreprocessingContext.AllLabels" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllLabels"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <field name="featureIndex" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Feature index of the label candidate. Features whose values are less than the
 size of {@link AllWords} arrays are single word features and point to entries
 in {@link AllWords}. Features whose values are larger or equal to the size of
 {@link AllWords}, after subtracting the size of {@link AllWords}, point to
 {@link AllPhrases}.
 <p>
 This array is produced by {@link LabelFilterProcessor}.]]>
      </doc>
    </field>
    <field name="documentIndices" type="com.carrotsearch.hppc.BitSet[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indices of documents assigned to the label candidate.
 <p>
 This array is produced by {@link DocumentAssigner}.]]>
      </doc>
    </field>
    <field name="firstPhraseIndex" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The first index in {@link #featureIndex} which 
 points to {@link AllPhrases}, or -1 if there are no phrases
 in {@link #featureIndex}.
 <p>
 This value is set by {@link LabelFilterProcessor}.
 
 @see #featureIndex]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about words and phrases that might be good cluster label candidates.
 Each entry in each array corresponds to one label candidate.
 <p>
 All arrays in this class have the same length and values across different arrays
 correspond to each other for the same index.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllLabels -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllPhrases -->
  <class name="PreprocessingContext.AllPhrases" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllPhrases"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <method name="getPhrase" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns space-separated words that constitute this phrase.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns length of all arrays in this {@link AllPhrases}.]]>
      </doc>
    </method>
    <field name="wordIndices" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Pointers to {@link AllWords} for each word in the phrase sequence.
 <p>
 This array is produced by {@link PhraseExtractor}.]]>
      </doc>
    </field>
    <field name="tf" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term frequency of the phrase.
 <p>
 This array is produced by {@link PhraseExtractor}.]]>
      </doc>
    </field>
    <field name="tfByDocument" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term frequency of the phrase for each document. The encoding of this
 array is similar to {@link AllWords#tfByDocument}: consecutive pairs of:
 document index, frequency.
 <p>
 This array is produced by {@link PhraseExtractor}. The order of documents in this
 array is not defined.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about all frequently appearing sequences of words found in the input
 {@link PreprocessingContext#documents}. Each entry in each array corresponds to one
 sequence.
 <p>
 All arrays in this class have the same length and values across different arrays
 correspond to each other for the same index.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllPhrases -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllStems -->
  <class name="PreprocessingContext.AllStems" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllStems"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <field name="image" type="char[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stem image as produced by the {@link IStemmer}, may not correspond to any
 correct word.
 <p>
 This array is produced by {@link LanguageModelStemmer}.]]>
      </doc>
    </field>
    <field name="mostFrequentOriginalWordIndex" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Pointer to the {@link AllWords} arrays, to the most frequent original form of
 the stem. Pointers to the less frequent variants are not available.
 <p>
 This array is produced by {@link LanguageModelStemmer}.]]>
      </doc>
    </field>
    <field name="tf" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term frequency of the stem, i.e. the sum of all {@link AllWords#tf} values
 for which the {@link AllWords#stemIndex} points to this stem.
 <p>
 This array is produced by {@link LanguageModelStemmer}.]]>
      </doc>
    </field>
    <field name="tfByDocument" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term frequency of the stem for each document. For the encoding of this array,
 see {@link AllWords#tfByDocument}.
 <p>
 This array is produced by {@link LanguageModelStemmer}. The order of documents in this
 array is not defined.]]>
      </doc>
    </field>
    <field name="fieldIndices" type="byte[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A bit-packed indices of all fields in which this word appears at least once. 
 Indexes (positions) of selected bits are pointers to the 
 {@link AllFields} arrays. Fast conversion between the bit-packed representation
 and <code>byte[]</code> with index values is done by {@link #toFieldIndexes(byte)}  
 <p>
 This array is produced by {@link LanguageModelStemmer}]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about all unique stems found in the input
 {@link PreprocessingContext#documents}. Each entry in each array corresponds to one
 base form different words can be transformed to by the {@link IStemmer} used while
 processing. E.g. the English <em>mining</em> and <em>mine</em> will be aggregated
 to one entry in the arrays, while they will have separate entries in
 {@link AllWords}.
 <p>
 All arrays in this class have the same length and values across different arrays
 correspond to each other for the same index.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllStems -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllTokens -->
  <class name="PreprocessingContext.AllTokens" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllTokens"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <field name="image" type="char[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token image as it appears in the input. On positions where {@link #type} is
 equal to one of {@link ITokenizer#TF_TERMINATOR},
 {@link ITokenizer#TF_SEPARATOR_DOCUMENT} or
 {@link ITokenizer#TF_SEPARATOR_FIELD} , image is <code>null</code>.
 <p>
 This array is produced by {@link Tokenizer}.]]>
      </doc>
    </field>
    <field name="type" type="short[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token's {@link ITokenizer} bit flags.
 <p>
 This array is produced by {@link Tokenizer}.]]>
      </doc>
    </field>
    <field name="fieldIndex" type="byte[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document field the token came from. The index points to arrays in
 {@link AllFields}, equal to <code>-1</code> for document and field separators.
 <p>
 This array is produced by {@link Tokenizer}.]]>
      </doc>
    </field>
    <field name="documentIndex" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Index of the document this token came from, points to elements of
 {@link PreprocessingContext#documents}. Equal to <code>-1</code> for document
 separators.
 <p>
 This array is produced by {@link Tokenizer}.
 </p>
 <p>
 This array is accessed in in {@link CaseNormalizer} and {@link PhraseExtractor}
 to compute by-document statistics, e.g. tf-by document, which are then needed
 to build a VSM or assign documents to labels. An alternative to this representation
 would be creating an <code>AllDocuments</code> holder and keep there an array
 of start token indexes for each document and then refactor the model building code
 to do a binary search to determine the document index given token index. This is
 likely to be a significant performance hit because model building code accesses 
 the documentIndex array pretty much randomly (in the suffix order), so we'd be
 doing twice-the-number-of-tokens binary searches. Unless there's some other
 data structure that can help us here.
 </p>]]>
      </doc>
    </field>
    <field name="wordIndex" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A pointer to {@link AllWords} arrays for this token. Equal to <code>-1</code>
 for document, field and {@link ITokenizer#TT_PUNCTUATION} tokens (including
 sentence separators).
 <p>
 This array is produced by {@link CaseNormalizer}.]]>
      </doc>
    </field>
    <field name="suffixOrder" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The suffix order of tokens. Suffixes starting with a separator come at the end
 of the array.
 <p>
 This array is produced by {@link PhraseExtractor}.]]>
      </doc>
    </field>
    <field name="lcp" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The Longest Common Prefix for the adjacent suffix-sorted token sequences.
 <p>
 This array is produced by {@link PhraseExtractor}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about all tokens of the input {@link PreprocessingContext#documents}.
 Each element of each of the arrays corresponds to one individual token from the
 input or a synthetic separator inserted between documents, fields and sentences.
 Last element of this array is a special terminator entry.
 <p>
 All arrays in this class have the same length and values across different arrays
 correspond to each other for the same index.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllTokens -->
  <!-- start class org.carrot2.text.preprocessing.PreprocessingContext.AllWords -->
  <class name="PreprocessingContext.AllWords" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PreprocessingContext.AllWords"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For debugging purposes.]]>
      </doc>
    </method>
    <field name="image" type="char[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The most frequently appearing variant of the word with respect to case. E.g. if
 a token <em>MacOS</em> appeared 12 times in the input and <em>macos</em>
 appeared 3 times, the image will be equal to <em>MacOS</em>.
 <p>
 This array is produced by {@link CaseNormalizer}.]]>
      </doc>
    </field>
    <field name="type" type="short[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token type of this word copied from {@link AllTokens#type}. Additional
 flags are set for each word by 
 {@link CaseNormalizer} and {@link LanguageModelStemmer}.
 
 <p>
 This array is produced by {@link CaseNormalizer}.
 This array is modified by {@link LanguageModelStemmer}.
 
 @see ITokenizer]]>
      </doc>
    </field>
    <field name="tf" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term Frequency of the word, aggregated across all variants with respect to
 case. Frequencies for each variant separately are not available.
 <p>
 This array is produced by {@link CaseNormalizer}.]]>
      </doc>
    </field>
    <field name="tfByDocument" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term Frequency of the word for each document. The length of this array is equal
 to the number of documents this word appeared in (Document Frequency)
 multiplied by 2. Elements at even indices contain document indices pointing to
 {@link PreprocessingContext#documents}, elements at odd indices contain the
 frequency of the word in the document. For example, an array with 4 values:
 <code>[2, 15, 138, 7]</code> means that the word appeared 15 times in document
 at index 2 and 7 times in document at index 138.
 <p>
 This array is produced by {@link CaseNormalizer}. The order of documents in this
 array is not defined.]]>
      </doc>
    </field>
    <field name="stemIndex" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A pointer to the {@link AllStems} arrays for this word.
 <p>
 This array is produced by {@link LanguageModelStemmer}.]]>
      </doc>
    </field>
    <field name="fieldIndices" type="byte[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A bit-packed indices of all fields in which this word appears at least once. 
 Indexes (positions) of selected bits are pointers to the 
 {@link AllFields} arrays. Fast conversion between the bit-packed representation
 and <code>byte[]</code> with index values is done by {@link #toFieldIndexes(byte)}  
 <p>
 This array is produced by {@link CaseNormalizer}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Information about all unique words found in the input
 {@link PreprocessingContext#documents}. An entry in each parallel array corresponds to one
 conflated form of a word. For example, <em>data</em> and <em>DATA</em> will most likely become
 a single entry in the words table. However, different grammatical forms of a single lemma
 (like <em>computer</em> and <em>computers</em>) will have different entries in the
 words table. See {@link AllStems} for inflection-conflated versions.
 <p>
 All arrays in this class have the same length and values across different arrays
 correspond to each other for the same index.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.PreprocessingContext.AllWords -->
  <!-- start class org.carrot2.text.preprocessing.SparseArray -->
  <class name="SparseArray" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SparseArray"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toSparseEncoding" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="com.carrotsearch.hppc.IntStack"/>
      <doc>
      <![CDATA[Convert a list of documents to sparse document-count representation.]]>
      </doc>
    </method>
    <method name="toSparseEncodingByHash" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="com.carrotsearch.hppc.IntStack"/>
      <doc>
      <![CDATA[Convert to sparse encoding using a hash map.]]>
      </doc>
    </method>
    <method name="toSparseEncodingBySort" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="com.carrotsearch.hppc.IntStack"/>
      <doc>
      <![CDATA[Convert to sparse encoding using sorting and counting.]]>
      </doc>
    </method>
    <method name="countUnique" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="int[]"/>
      <param name="fromIndex" type="int"/>
      <param name="toIndex" type="int"/>
      <doc>
      <![CDATA[Count unique values in the sorted array.]]>
      </doc>
    </method>
    <method name="mergeSparseArrays" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.Iterable&lt;int[]&gt;"/>
      <doc>
      <![CDATA[Merge data from one or more sparse arrays.]]>
      </doc>
    </method>
    <method name="sparseToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="intIntArray" type="int[]"/>
      <doc>
      <![CDATA[Convert an int-int compact mapping array to a string.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Sparse array encoding utilities. Sparse means an index and its value are kept
 in an array as a pair.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.SparseArray -->
  <!-- start class org.carrot2.text.preprocessing.StopListMarker -->
  <class name="StopListMarker" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopListMarker"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="mark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Marks stop words and saves the results to the <code>context</code>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Marks stop words based on the current language model.
 <p>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllWords#type}</li>
 </ul>
 <p>
 This class requires that {@link Tokenizer} and {@link CaseNormalizer} be invoked first.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.StopListMarker -->
  <!-- start class org.carrot2.text.preprocessing.StopListMarkerDescriptor -->
  <class name="StopListMarkerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="StopListMarkerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.StopListMarkerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.StopListMarkerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.StopListMarker} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.StopListMarkerDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.StopListMarkerDescriptor.AttributeBuilder -->
  <class name="StopListMarkerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopListMarkerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.StopListMarker} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.StopListMarkerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.StopListMarkerDescriptor.Attributes -->
  <class name="StopListMarkerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.StopListMarker} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.StopListMarkerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.StopListMarkerDescriptor.Keys -->
  <class name="StopListMarkerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopListMarkerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.StopListMarker} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.StopListMarkerDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.Tokenizer -->
  <class name="Tokenizer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Tokenizer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tokenize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <doc>
      <![CDATA[Performs tokenization and saves the results to the <code>context</code>.]]>
      </doc>
    </method>
    <field name="documentFields" type="java.util.Collection&lt;java.lang.String&gt;"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Textual fields of documents that should be tokenized and parsed for clustering.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs tokenization of documents.
 <p>
 This class saves the following results to the {@link PreprocessingContext}:
 <ul>
 <li>{@link AllTokens#image}</li>
 <li>{@link AllTokens#documentIndex}</li>
 <li>{@link AllTokens#fieldIndex}</li>
 <li>{@link AllTokens#type}</li>
 </ul>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.Tokenizer -->
  <!-- start class org.carrot2.text.preprocessing.TokenizerDescriptor -->
  <class name="TokenizerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="TokenizerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.TokenizerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.Tokenizer} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.TokenizerDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder -->
  <class name="TokenizerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenizerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="documentFields" return="org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Textual fields of documents that should be tokenized and parsed for clustering.
 
 @see org.carrot2.text.preprocessing.Tokenizer#documentFields]]>
      </doc>
    </method>
    <method name="documentFields" return="org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.util.Collection&lt;java.lang.String&gt;&gt;"/>
      <doc>
      <![CDATA[Textual fields of documents that should be tokenized and parsed for clustering.
 
 @see org.carrot2.text.preprocessing.Tokenizer#documentFields]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.Tokenizer} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.TokenizerDescriptor.Attributes -->
  <class name="TokenizerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="documentFields" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.Tokenizer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.TokenizerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.TokenizerDescriptor.Keys -->
  <class name="TokenizerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenizerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="DOCUMENT_FIELDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.Tokenizer#documentFields}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.Tokenizer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.TokenizerDescriptor.Keys -->
</package>
<package name="org.carrot2.text.preprocessing.filter">
  <!-- start class org.carrot2.text.preprocessing.filter.CompleteLabelFilter -->
  <class name="CompleteLabelFilter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.preprocessing.filter.ILabelFilter"/>
    <constructor name="CompleteLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="acceptedStems" type="boolean[]"/>
      <param name="acceptedPhrases" type="boolean[]"/>
      <doc>
      <![CDATA[Marks incomplete labels.]]>
      </doc>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove truncated phrases. Tries to remove "incomplete" cluster labels. For example,
 in a collection of documents related to <i>Data Mining</i>, the phrase
 <i>Conference on Data</i> is incomplete in a sense that most likely it should be
 <i>Conference on Data Mining</i> or even <i>Conference on Data Mining in Large
 Databases</i>. When truncated phrase removal is enabled, the algorithm would try to
 remove the "incomplete" phrases like the former one and leave only the more
 informative variants.]]>
      </doc>
    </field>
    <field name="labelOverrideThreshold" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Truncated label threshold. Determines the strength of the truncated label filter.
 The lowest value means strongest truncated labels elimination, which may lead to
 overlong cluster labels and many unclustered documents. The highest value
 effectively disables the filter, which may result in short or truncated labels.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A filter that removes "incomplete" labels.
 <p>
 See <a href="http://project.carrot2.org/publications/osinski-2003-lingo.pdf">this
 document</a>, page 31 for a definition of a complete phrase.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.CompleteLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor -->
  <class name="CompleteLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="CompleteLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder -->
  <class name="CompleteLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompleteLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove truncated phrases. Tries to remove "incomplete" cluster labels. For example,
in a collection of documents related to <i>Data Mining</i>, the phrase
<i>Conference on Data</i> is incomplete in a sense that most likely it should be
<i>Conference on Data Mining</i> or even <i>Conference on Data Mining in Large
Databases</i>. When truncated phrase removal is enabled, the algorithm would try to
remove the "incomplete" phrases like the former one and leave only the more
informative variants.
 
 @see org.carrot2.text.preprocessing.filter.CompleteLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove truncated phrases. Tries to remove "incomplete" cluster labels. For example,
in a collection of documents related to <i>Data Mining</i>, the phrase
<i>Conference on Data</i> is incomplete in a sense that most likely it should be
<i>Conference on Data Mining</i> or even <i>Conference on Data Mining in Large
Databases</i>. When truncated phrase removal is enabled, the algorithm would try to
remove the "incomplete" phrases like the former one and leave only the more
informative variants.
 
 @see org.carrot2.text.preprocessing.filter.CompleteLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="labelOverrideThreshold" return="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Truncated label threshold. Determines the strength of the truncated label filter.
The lowest value means strongest truncated labels elimination, which may lead to
overlong cluster labels and many unclustered documents. The highest value
effectively disables the filter, which may result in short or truncated labels.
 
 @see org.carrot2.text.preprocessing.filter.CompleteLabelFilter#labelOverrideThreshold]]>
      </doc>
    </method>
    <method name="labelOverrideThreshold" return="org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Truncated label threshold. Determines the strength of the truncated label filter.
The lowest value means strongest truncated labels elimination, which may lead to
overlong cluster labels and many unclustered documents. The highest value
effectively disables the filter, which may result in short or truncated labels.
 
 @see org.carrot2.text.preprocessing.filter.CompleteLabelFilter#labelOverrideThreshold]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.Attributes -->
  <class name="CompleteLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="labelOverrideThreshold" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.Keys -->
  <class name="CompleteLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompleteLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter#enabled}.]]>
      </doc>
    </field>
    <field name="LABEL_OVERRIDE_THRESHOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter#labelOverrideThreshold}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.CompleteLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.CompleteLabelFilterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.filter.GenitiveLabelFilter -->
  <class name="GenitiveLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GenitiveLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove labels ending in genitive form. Removes labels that do end in words
 in the Saxon Genitive form (e.g. "Threatening the Country's").]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts labels that do not end in words in the Saxon Genitive form (e.g. "Threatening
 the Country's").]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.GenitiveLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor -->
  <class name="GenitiveLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="GenitiveLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.GenitiveLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.AttributeBuilder -->
  <class name="GenitiveLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GenitiveLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove labels ending in genitive form. Removes labels that do end in words
in the Saxon Genitive form (e.g. "Threatening the Country's").
 
 @see org.carrot2.text.preprocessing.filter.GenitiveLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove labels ending in genitive form. Removes labels that do end in words
in the Saxon Genitive form (e.g. "Threatening the Country's").
 
 @see org.carrot2.text.preprocessing.filter.GenitiveLabelFilter#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.GenitiveLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.Attributes -->
  <class name="GenitiveLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.GenitiveLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.Keys -->
  <class name="GenitiveLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GenitiveLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.GenitiveLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.GenitiveLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.GenitiveLabelFilterDescriptor.Keys -->
  <!-- start interface org.carrot2.text.preprocessing.filter.ILabelFilter -->
  <interface name="ILabelFilter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="acceptedStems" type="boolean[]"/>
      <param name="acceptedPhrases" type="boolean[]"/>
      <doc>
      <![CDATA[Called to perform label filtering.
 
 @param context contains words and phrases to be filtered
 @param acceptedStems the filter should set to <code>false</code> those elements
            that correspond to the stems to be filtered out
 @param acceptedPhrases the filter should set to <code>false</code> those elements
            that correspond to the phrases to be filtered out]]>
      </doc>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return <code>true</code> if the filter is to be applied, <code>false</code> if the
         filter should be omitted by the {@link LabelFilterProcessor}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Defines the contract for label filtering components, which mark words and phrases that
 should not be considered as candidates for cluster labels
 
 @see LabelFilterProcessor]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.preprocessing.filter.ILabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.MinLengthLabelFilter -->
  <class name="MinLengthLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MinLengthLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove labels shorter than 3 characters. Removes labels whose total length in
 characters, including spaces, is less than 3.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts labels whose length in characters is greater or equal to the provided value.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.MinLengthLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor -->
  <class name="MinLengthLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="MinLengthLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.MinLengthLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.AttributeBuilder -->
  <class name="MinLengthLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MinLengthLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove labels shorter than 3 characters. Removes labels whose total length in
characters, including spaces, is less than 3.
 
 @see org.carrot2.text.preprocessing.filter.MinLengthLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove labels shorter than 3 characters. Removes labels whose total length in
characters, including spaces, is less than 3.
 
 @see org.carrot2.text.preprocessing.filter.MinLengthLabelFilter#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.MinLengthLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.Attributes -->
  <class name="MinLengthLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.MinLengthLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.Keys -->
  <class name="MinLengthLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MinLengthLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.MinLengthLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.MinLengthLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.MinLengthLabelFilterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.filter.NumericLabelFilter -->
  <class name="NumericLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NumericLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove numeric labels. Remove labels that consist only of or start with numbers.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts labels that do not consist only of numeric tokens and start with a non-numeric
 token.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.NumericLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor -->
  <class name="NumericLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="NumericLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.NumericLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.AttributeBuilder -->
  <class name="NumericLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NumericLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove numeric labels. Remove labels that consist only of or start with numbers.
 
 @see org.carrot2.text.preprocessing.filter.NumericLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove numeric labels. Remove labels that consist only of or start with numbers.
 
 @see org.carrot2.text.preprocessing.filter.NumericLabelFilter#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.NumericLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.Attributes -->
  <class name="NumericLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.NumericLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.Keys -->
  <class name="NumericLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NumericLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.NumericLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.NumericLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.NumericLabelFilterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.filter.QueryLabelFilter -->
  <class name="QueryLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="QueryLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove query words. Removes labels that consist only of words contained in the
 query.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts labels that do not consist only of query words.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.QueryLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor -->
  <class name="QueryLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="QueryLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.QueryLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.AttributeBuilder -->
  <class name="QueryLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="QueryLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove query words. Removes labels that consist only of words contained in the
query.
 
 @see org.carrot2.text.preprocessing.filter.QueryLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove query words. Removes labels that consist only of words contained in the
query.
 
 @see org.carrot2.text.preprocessing.filter.QueryLabelFilter#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.QueryLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.Attributes -->
  <class name="QueryLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.QueryLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.Keys -->
  <class name="QueryLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="QueryLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.QueryLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.QueryLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.QueryLabelFilterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.filter.SingleLabelFilterBase -->
  <class name="SingleLabelFilterBase" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.preprocessing.filter.ILabelFilter"/>
    <constructor name="SingleLabelFilterBase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="acceptedStems" type="boolean[]"/>
      <param name="acceptedPhrases" type="boolean[]"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
      <doc>
      <![CDATA[Should return <code>true</code> if the word located at <code>wordIndex</code> is to
 be accepted, <code>false</code> otherwise.
 
 @param context provides access to all information about the word
 @param wordIndex index of the word for which decision is to be made]]>
      </doc>
    </method>
    <method name="acceptPhrase" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
      <doc>
      <![CDATA[Should return <code>true</code> if the phrase located at <code>phraseIndex</code>
 is to be accepted, <code>false</code> otherwise.
 
 @param context provides access to all information about the phrase
 @param phraseIndex index of the phrase for which decision is to be made]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A base for {@link ILabelFilter} implementations that handle each label independently.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.SingleLabelFilterBase -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopLabelFilter -->
  <class name="StopLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="filter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="acceptedStems" type="boolean[]"/>
      <param name="acceptedPhrases" type="boolean[]"/>
    </method>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove stop labels. Removes labels that are declared as stop labels in the
 stoplabels.&lt;lang&gt; files. Please note that adding a long list of regular
 expressions to the stoplabels file may result in a noticeable performance penalty.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts labels that are not declared as stop labels in the stoplabels.&lt;lang&gt;
 files.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor -->
  <class name="StopLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="StopLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.StopLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.AttributeBuilder -->
  <class name="StopLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove stop labels. Removes labels that are declared as stop labels in the
stoplabels.&lt;lang&gt; files. Please note that adding a long list of regular
expressions to the stoplabels file may result in a noticeable performance penalty.
 
 @see org.carrot2.text.preprocessing.filter.StopLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove stop labels. Removes labels that are declared as stop labels in the
stoplabels.&lt;lang&gt; files. Please note that adding a long list of regular
expressions to the stoplabels file may result in a noticeable performance penalty.
 
 @see org.carrot2.text.preprocessing.filter.StopLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="labelFormatter" return="org.carrot2.text.preprocessing.LabelFormatterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.LabelFormatter} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.StopLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.Attributes -->
  <class name="StopLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="labelFormatter" type="org.carrot2.text.preprocessing.LabelFormatterDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.LabelFormatter} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.StopLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.Keys -->
  <class name="StopLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.StopLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.StopLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopLabelFilterDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopWordLabelFilter -->
  <class name="StopWordLabelFilter" extends="org.carrot2.text.preprocessing.filter.SingleLabelFilterBase"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopWordLabelFilter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="acceptPhrase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="phraseIndex" type="int"/>
    </method>
    <method name="acceptWord" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.preprocessing.PreprocessingContext"/>
      <param name="wordIndex" type="int"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="enabled" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove leading and trailing stop words. Removes labels that consist of, start or
 end in stop words.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Accepts words that are not stop words and phrases that do not start nor end in a stop
 word.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopWordLabelFilter -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor -->
  <class name="StopWordLabelFilterDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="StopWordLabelFilterDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.filter.StopWordLabelFilter} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.AttributeBuilder -->
  <class name="StopWordLabelFilterDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopWordLabelFilterDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <doc>
      <![CDATA[Remove leading and trailing stop words. Removes labels that consist of, start or
end in stop words.
 
 @see org.carrot2.text.preprocessing.filter.StopWordLabelFilter#enabled]]>
      </doc>
    </method>
    <method name="enabled" return="org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Boolean&gt;"/>
      <doc>
      <![CDATA[Remove leading and trailing stop words. Removes labels that consist of, start or
end in stop words.
 
 @see org.carrot2.text.preprocessing.filter.StopWordLabelFilter#enabled]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.filter.StopWordLabelFilter} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.Attributes -->
  <class name="StopWordLabelFilterDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="enabled" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.filter.StopWordLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.Keys -->
  <class name="StopWordLabelFilterDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StopWordLabelFilterDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="ENABLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.filter.StopWordLabelFilter#enabled}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.filter.StopWordLabelFilter} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.filter.StopWordLabelFilterDescriptor.Keys -->
</package>
<package name="org.carrot2.text.preprocessing.pipeline">
  <!-- start class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline -->
  <class name="BasicPreprocessingPipeline" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline"/>
    <constructor name="BasicPreprocessingPipeline"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="preprocess" return="org.carrot2.text.preprocessing.PreprocessingContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="query" type="java.lang.String"/>
      <param name="language" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Performs preprocessing on the provided list of documents. Results can be obtained
 from the returned {@link PreprocessingContext}.]]>
      </doc>
    </method>
    <field name="tokenizer" type="org.carrot2.text.preprocessing.Tokenizer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tokenizer used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="caseNormalizer" type="org.carrot2.text.preprocessing.CaseNormalizer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Case normalizer used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="languageModelStemmer" type="org.carrot2.text.preprocessing.LanguageModelStemmer"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stemmer used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="stopListMarker" type="org.carrot2.text.preprocessing.StopListMarker"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stop list marker used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="tokenizerFactory" type="org.carrot2.text.linguistic.ITokenizerFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tokenizer factory. Creates the tokenizers to be used by the clustering algorithm.]]>
      </doc>
    </field>
    <field name="stemmerFactory" type="org.carrot2.text.linguistic.IStemmerFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stemmer factory. Creates the stemmers to be used by the clustering algorithm.]]>
      </doc>
    </field>
    <field name="lexicalDataFactory" type="org.carrot2.text.linguistic.ILexicalDataFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexical data factory. Creates the lexical data to be used by the clustering
 algorithm, including stop word and stop label dictionaries.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs basic preprocessing steps on the provided documents. The preprocessing
 consists of the following steps:
 <ol>
 <li>{@link Tokenizer#tokenize(PreprocessingContext)}</li>
 <li>{@link CaseNormalizer#normalize(PreprocessingContext)}</li>
 <li>{@link LanguageModelStemmer#stem(PreprocessingContext)}</li>
 <li>{@link StopListMarker#mark(PreprocessingContext)}</li>
 </ol>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor -->
  <class name="BasicPreprocessingPipelineDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="BasicPreprocessingPipelineDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder -->
  <class name="BasicPreprocessingPipelineDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BasicPreprocessingPipelineDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="tokenizerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.linguistic.ITokenizerFactory"/>
      <doc>
      <![CDATA[Tokenizer factory. Creates the tokenizers to be used by the clustering algorithm.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#tokenizerFactory]]>
      </doc>
    </method>
    <method name="tokenizerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Tokenizer factory. Creates the tokenizers to be used by the clustering algorithm.

 A class that extends org.carrot2.text.linguistic.ITokenizerFactory or appropriate IObjectFactory.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#tokenizerFactory]]>
      </doc>
    </method>
    <method name="tokenizerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.linguistic.ITokenizerFactory&gt;"/>
      <doc>
      <![CDATA[Tokenizer factory. Creates the tokenizers to be used by the clustering algorithm.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#tokenizerFactory]]>
      </doc>
    </method>
    <method name="stemmerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.linguistic.IStemmerFactory"/>
      <doc>
      <![CDATA[Stemmer factory. Creates the stemmers to be used by the clustering algorithm.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#stemmerFactory]]>
      </doc>
    </method>
    <method name="stemmerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Stemmer factory. Creates the stemmers to be used by the clustering algorithm.

 A class that extends org.carrot2.text.linguistic.IStemmerFactory or appropriate IObjectFactory.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#stemmerFactory]]>
      </doc>
    </method>
    <method name="stemmerFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.linguistic.IStemmerFactory&gt;"/>
      <doc>
      <![CDATA[Stemmer factory. Creates the stemmers to be used by the clustering algorithm.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#stemmerFactory]]>
      </doc>
    </method>
    <method name="lexicalDataFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.linguistic.ILexicalDataFactory"/>
      <doc>
      <![CDATA[Lexical data factory. Creates the lexical data to be used by the clustering
algorithm, including stop word and stop label dictionaries.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#lexicalDataFactory]]>
      </doc>
    </method>
    <method name="lexicalDataFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Lexical data factory. Creates the lexical data to be used by the clustering
algorithm, including stop word and stop label dictionaries.

 A class that extends org.carrot2.text.linguistic.ILexicalDataFactory or appropriate IObjectFactory.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#lexicalDataFactory]]>
      </doc>
    </method>
    <method name="lexicalDataFactory" return="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.linguistic.ILexicalDataFactory&gt;"/>
      <doc>
      <![CDATA[Lexical data factory. Creates the lexical data to be used by the clustering
algorithm, including stop word and stop label dictionaries.
 
 @see org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#lexicalDataFactory]]>
      </doc>
    </method>
    <method name="tokenizer" return="org.carrot2.text.preprocessing.TokenizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.Tokenizer} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="caseNormalizer" return="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.CaseNormalizer} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="languageModelStemmer" return="org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="stopListMarker" return="org.carrot2.text.preprocessing.StopListMarkerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.StopListMarker} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Attributes -->
  <class name="BasicPreprocessingPipelineDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="tokenizerFactory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="stemmerFactory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="lexicalDataFactory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="tokenizer" type="org.carrot2.text.preprocessing.TokenizerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.Tokenizer} component.]]>
      </doc>
    </field>
    <field name="caseNormalizer" type="org.carrot2.text.preprocessing.CaseNormalizerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.CaseNormalizer} component.]]>
      </doc>
    </field>
    <field name="languageModelStemmer" type="org.carrot2.text.preprocessing.LanguageModelStemmerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.LanguageModelStemmer} component.]]>
      </doc>
    </field>
    <field name="stopListMarker" type="org.carrot2.text.preprocessing.StopListMarkerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.StopListMarker} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Keys -->
  <class name="BasicPreprocessingPipelineDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BasicPreprocessingPipelineDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TOKENIZER_FACTORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#tokenizerFactory}.]]>
      </doc>
    </field>
    <field name="STEMMER_FACTORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#stemmerFactory}.]]>
      </doc>
    </field>
    <field name="LEXICAL_DATA_FACTORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline#lexicalDataFactory}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Keys -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline -->
  <class name="CompletePreprocessingPipeline" extends="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipeline"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompletePreprocessingPipeline"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="preprocess" return="org.carrot2.text.preprocessing.PreprocessingContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="query" type="java.lang.String"/>
      <param name="language" type="org.carrot2.core.LanguageCode"/>
    </method>
    <field name="phraseExtractor" type="org.carrot2.text.preprocessing.PhraseExtractor"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Phrase extractor used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="labelFilterProcessor" type="org.carrot2.text.preprocessing.LabelFilterProcessor"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Label filter processor used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <field name="documentAssigner" type="org.carrot2.text.preprocessing.DocumentAssigner"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Document assigner used by the algorithm, contains bindable attributes.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Performs a complete preprocessing on the provided documents. The preprocessing consists
 of the following steps:
 <ol>
 <li>{@link Tokenizer#tokenize(PreprocessingContext)}</li>
 <li>{@link CaseNormalizer#normalize(PreprocessingContext)}</li>
 <li>{@link LanguageModelStemmer#stem(PreprocessingContext)}</li>
 <li>{@link StopListMarker#mark(PreprocessingContext)}</li>
 <li>{@link PhraseExtractor#extractPhrases(PreprocessingContext)}</li>
 <li>{@link LabelFilterProcessor#process(PreprocessingContext)}</li>
 <li>{@link DocumentAssigner#assign(PreprocessingContext)}</li>
 </ol>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor -->
  <class name="CompletePreprocessingPipelineDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="CompletePreprocessingPipelineDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.AttributeBuilder -->
  <class name="CompletePreprocessingPipelineDescriptor.AttributeBuilder" extends="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompletePreprocessingPipelineDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="phraseExtractor" return="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.PhraseExtractor} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="labelFilterProcessor" return="org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <method name="documentAssigner" return="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an attribute builder for the nested
 {@link org.carrot2.text.preprocessing.DocumentAssigner} component, backed by the same attribute map
 as the current builder.]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.Attributes -->
  <class name="CompletePreprocessingPipelineDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="phraseExtractor" type="org.carrot2.text.preprocessing.PhraseExtractorDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.PhraseExtractor} component.]]>
      </doc>
    </field>
    <field name="labelFilterProcessor" type="org.carrot2.text.preprocessing.LabelFilterProcessorDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.LabelFilterProcessor} component.]]>
      </doc>
    </field>
    <field name="documentAssigner" type="org.carrot2.text.preprocessing.DocumentAssignerDescriptor.Attributes"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the nested {@link org.carrot2.text.preprocessing.DocumentAssigner} component.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.Attributes -->
  <!-- start class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.Keys -->
  <class name="CompletePreprocessingPipelineDescriptor.Keys" extends="org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.Keys"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompletePreprocessingPipelineDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipeline} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.preprocessing.pipeline.CompletePreprocessingPipelineDescriptor.Keys -->
  <!-- start interface org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline -->
  <interface name="IPreprocessingPipeline"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="preprocess" return="org.carrot2.text.preprocessing.PreprocessingContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="documents" type="java.util.List&lt;org.carrot2.core.Document&gt;"/>
      <param name="query" type="java.lang.String"/>
      <param name="language" type="org.carrot2.core.LanguageCode"/>
      <doc>
      <![CDATA[Performs preprocessing on the provided list of documents, creating a new preprocessing
 context on the way. Results can be obtained from the returned {@link PreprocessingContext}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A preprocessing pipeline filling in {@link PreprocessingContext} with the required data.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.preprocessing.pipeline.IPreprocessingPipeline -->
</package>
<package name="org.carrot2.text.suffixtree">
  <!-- start class org.carrot2.text.suffixtree.CharacterSequence -->
  <class name="CharacterSequence" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.suffixtree.ISequence"/>
    <constructor name="CharacterSequence" type="java.lang.CharSequence"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="objectAt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <field name="value" type="java.lang.CharSequence"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A {@link ISequence} wrapper for any {@link CharSequence}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.suffixtree.CharacterSequence -->
  <!-- start class org.carrot2.text.suffixtree.IntegerSequence -->
  <class name="IntegerSequence" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.suffixtree.ISequence"/>
    <constructor name="IntegerSequence" type="int[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IntegerSequence" type="int[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="objectAt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <doc>
    <![CDATA[An {@link ISequence} wrapper for an array of integers.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.suffixtree.IntegerSequence -->
  <!-- start interface org.carrot2.text.suffixtree.ISequence -->
  <interface name="ISequence"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of elements in the sequence.]]>
      </doc>
    </method>
    <method name="objectAt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[Returns a unique integer code for object at index <code>i</code> (the first element
 has 0 index).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A sequence of elements from which a {@link SuffixTree} can be built. Elements are
 indexed with integers starting at position 0. Elements themselves must be represented
 as integers, where equal values at different indices indicate equal objects, whatever
 the underlying objects might be.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.suffixtree.ISequence -->
  <!-- start class org.carrot2.text.suffixtree.SuffixTree -->
  <class name="SuffixTree" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SuffixTree" type="org.carrot2.text.suffixtree.ISequence, org.carrot2.text.suffixtree.SuffixTree.IStateCallback, org.carrot2.text.suffixtree.SuffixTree.IProgressCallback"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Build a suffix tree for a given input sequence of symbols.]]>
      </doc>
    </constructor>
    <method name="getTransitionsCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Return the number of transitions (edges) in the tree.]]>
      </doc>
    </method>
    <method name="getStatesCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Return the number of states in the tree.]]>
      </doc>
    </method>
    <method name="containsSuffix" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seq" type="org.carrot2.text.suffixtree.ISequence"/>
      <doc>
      <![CDATA[@return <code>true</code> if this suffix tree has a path from the root state to a
         leaf state corresponding to a given sequence of objects. This indicates the
         input sequence had a suffix identical to <code>sequence</code>.]]>
      </doc>
    </method>
    <method name="visit"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="visitor" type="org.carrot2.text.suffixtree.SuffixTree.IVisitor"/>
      <doc>
      <![CDATA[Walks the states and edges of the suffix tree, depth-first.]]>
      </doc>
    </method>
    <method name="visitState"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <param name="visitor" type="org.carrot2.text.suffixtree.SuffixTree.IVisitor"/>
      <doc>
      <![CDATA[Start visiting from a given state.]]>
      </doc>
    </method>
    <method name="getRootState" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For procedural traversals (not visitors).]]>
      </doc>
    </method>
    <method name="isLeaf" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <doc>
      <![CDATA[Check if <code>state</code> is a leaf (has no outgoing edges).]]>
      </doc>
    </method>
    <method name="firstEdge" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <doc>
      <![CDATA[Returns the index of the first edge from a given state or {@link #NO_EDGE} if a
 given state has no edges. Does not perform any sanity check on the input state.]]>
      </doc>
    </method>
    <method name="nextEdge" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="edge" type="int"/>
      <doc>
      <![CDATA[Returns the index of the next edge (sibling) or {@link #NO_EDGE} if
 <code>edge</code> is the last edge in its state.]]>
      </doc>
    </method>
    <method name="findEdge" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <param name="symbol" type="int"/>
      <doc>
      <![CDATA[Find a transition from state <code>state</code>, labeled with a given symbol.
 {@link #NO_EDGE} is returned if there is no such edge.]]>
      </doc>
    </method>
    <method name="getToState" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="edge" type="int"/>
      <doc>
      <![CDATA[Returns the target state for a given edge.]]>
      </doc>
    </method>
    <method name="getStartIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="edge" type="int"/>
      <doc>
      <![CDATA[Returns the edge label's start index (inclusive).]]>
      </doc>
    </method>
    <method name="getEndIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="edge" type="int"/>
      <doc>
      <![CDATA[Returns the edge label's end index (inclusive).]]>
      </doc>
    </method>
    <field name="NO_EDGE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Marker for the state's last edge in {@link #transitions}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Builds a suffix tree (or generalized suffix tree) on a sequence of any integers (or
 objects that can be represented as unique integers). A direct implementation of Esko
 Ukkonen's algorithm, but optimized for Java to use primitive data types instead of
 objects (or boxed types).
 
 @see "E. Ukkonen, On-line construction of suffix trees, Algorithmica, 1995, volume 14, number 3, pages 249-260."]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.suffixtree.SuffixTree -->
  <!-- start interface org.carrot2.text.suffixtree.SuffixTree.IProgressCallback -->
  <interface name="SuffixTree.IProgressCallback"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="next"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pos" type="int"/>
    </method>
    <doc>
    <![CDATA[Progress callback is invoked when iterating forward through the input sequence
 elements.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.suffixtree.SuffixTree.IProgressCallback -->
  <!-- start interface org.carrot2.text.suffixtree.SuffixTree.IStateCallback -->
  <interface name="SuffixTree.IStateCallback"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <param name="position" type="int"/>
    </method>
    <doc>
    <![CDATA[A callback invoked when new states are added to the tree.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.suffixtree.SuffixTree.IStateCallback -->
  <!-- start interface org.carrot2.text.suffixtree.SuffixTree.IVisitor -->
  <interface name="SuffixTree.IVisitor"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="pre" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <doc>
      <![CDATA[Invoked before <code>state</code> is descended into.
 
 @return Returning <code>false</code> omits the subtree of <code>state</code>.
         {@link #post(int)} is not invoked for this state if skipped.]]>
      </doc>
    </method>
    <method name="post"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <doc>
      <![CDATA[Invoked after <code>state</code> is fully traversed.
 
 @param state Identifier of the completed state.]]>
      </doc>
    </method>
    <method name="edge" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fromState" type="int"/>
      <param name="toState" type="int"/>
      <param name="startIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <doc>
      <![CDATA[Invoked when an edge is visited.
 
 @return Returning <code>false</code> skips the traversal of
         <code>toState</code>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Visitor interface for traversals.
 
 @see VisitorAdapter]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.suffixtree.SuffixTree.IVisitor -->
  <!-- start class org.carrot2.text.suffixtree.SuffixTree.VisitorAdapter -->
  <class name="SuffixTree.VisitorAdapter" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.suffixtree.SuffixTree.IVisitor"/>
    <constructor name="SuffixTree.VisitorAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="pre" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
    </method>
    <method name="post"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
    </method>
    <method name="edge" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fromState" type="int"/>
      <param name="toState" type="int"/>
      <param name="startIndex" type="int"/>
      <param name="endIndex" type="int"/>
    </method>
    <doc>
    <![CDATA[Empty implementation recursively walking the entire suffix tree.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.suffixtree.SuffixTree.VisitorAdapter -->
  <!-- start class org.carrot2.text.suffixtree.SuffixTreeBuilder -->
  <class name="SuffixTreeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="from" return="org.carrot2.text.suffixtree.SuffixTreeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sequence" type="org.carrot2.text.suffixtree.ISequence"/>
      <doc>
      <![CDATA[Returns the builder for a suffix tree made from <code>sequence</code>.]]>
      </doc>
    </method>
    <method name="build" return="org.carrot2.text.suffixtree.SuffixTree"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Return a new suffix tree according to current parameters. This method call
         may take a long time, depending on the length of the input sequence.]]>
      </doc>
    </method>
    <method name="withProgressCallback" return="org.carrot2.text.suffixtree.SuffixTreeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callback" type="org.carrot2.text.suffixtree.SuffixTree.IProgressCallback"/>
    </method>
    <method name="withStateCallback" return="org.carrot2.text.suffixtree.SuffixTreeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callback" type="org.carrot2.text.suffixtree.SuffixTree.IStateCallback"/>
    </method>
    <doc>
    <![CDATA[Builds a suffix tree using method chains, thus avoiding direct dependency on
 specialized constructors of {@link SuffixTree}.
 
 @see #from(ISequence)
 @see #build()]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.suffixtree.SuffixTreeBuilder -->
</package>
<package name="org.carrot2.text.util">
  <!-- start class org.carrot2.text.util.CharArrayComparators -->
  <class name="CharArrayComparators" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="CASE_INSENSITIVE_CHAR_ARRAY_COMPARATOR" type="java.util.Comparator&lt;char[]&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A case-insensitive lexicographic comparator.]]>
      </doc>
    </field>
    <field name="FAST_CHAR_ARRAY_COMPARATOR" type="java.util.Comparator&lt;char[]&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A case-sensitive lexicographic comparator.]]>
      </doc>
    </field>
    <field name="NORMALIZING_CHAR_ARRAY_COMPARATOR" type="java.util.Comparator&lt;char[]&gt;"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A comparator that groups different strings into different buckets
 (case-insensitive) and strings within these buckets (case-sensitive). The
 comparator that applies the following rules in the following order:
 <ol>
 <li>A <code>null</code> string is greater than a non-<code>null</code> one</li>
 <li>A longer string is greater</li>
 <li>Strings are first compared in case-insensitive mode</li>
 <li>Finally, strings are compared in case-sensitive mode</li>
 </ol>
 This comparator does not provide a lexicographic order, which makes it much faster, but
 not suitable for general purpose sorting.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A set of specific comparators for <code>char []</code> arrays.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.CharArrayComparators -->
  <!-- start class org.carrot2.text.util.MutableCharArray -->
  <class name="MutableCharArray" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.CharSequence"/>
    <implements name="java.lang.Cloneable"/>
    <constructor name="MutableCharArray"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty {@link MutableCharArray}.]]>
      </doc>
    </constructor>
    <constructor name="MutableCharArray" type="java.lang.CharSequence"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link MutableCharArray} from another {@link CharSequence},
 creates a new buffer to store characters.]]>
      </doc>
    </constructor>
    <constructor name="MutableCharArray" type="char[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the internal buffer to use the provided argument.
 
 @see #reset(char[])]]>
      </doc>
    </constructor>
    <constructor name="MutableCharArray" type="char[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the internal buffer to use the provided argument.
 
 @see #reset(char[])]]>
      </doc>
    </constructor>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[Resets internal buffers in this object to represent another character sequence. See
 class header notes for side-effects on {@link #equals(Object)} and
 {@link #hashCode()}.]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="char[]"/>
      <doc>
      <![CDATA[Resets internal buffers in this object to point to another character buffer. See
 class header notes for side-effects on {@link #equals(Object)} and
 {@link #hashCode()}.]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="char[]"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Resets internal buffers in this object to point to another character buffer. See
 class header notes for side-effects on {@link #equals(Object)} and
 {@link #hashCode()}.]]>
      </doc>
    </method>
    <method name="getBuffer" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Returns the internal buffer <i>currently</i> used to store the content
 of this char sequence.]]>
      </doc>
    </method>
    <method name="getStart" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the offset at which the data <i>currently</i> starts in the buffer.
 @see #getBuffer()
 @see #length]]>
      </doc>
    </method>
    <method name="charAt" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="length" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="subSequence" return="org.carrot2.text.util.MutableCharArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="start" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[See comments in the header of this class.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
      <doc>
      <![CDATA[See comments in the header of this class.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="buffer" type="char[]"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Calculates a hash code for a given portion of the character buffer. The returned
 value is identical to what be returned from {@link #hashCode()} if a wrapper
 {@link MutableCharArray} were created.]]>
      </doc>
    </method>
    <method name="clone" return="org.carrot2.text.util.MutableCharArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toArray" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Implements {@link CharSequence} over a mutable <code>char[]</code> buffer.
 <p>
 This class implements proper content-based {@link #hashCode()} and
 {@link #equals(Object)} against other {@link MutableCharArray} objects, assuming the
 underlying character buffers does not change. In case the buffers is changed, the
 resulting behavior is unpredictable.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.MutableCharArray -->
  <!-- start class org.carrot2.text.util.MutableCharArrayUtils -->
  <class name="MutableCharArrayUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MutableCharArrayUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toLowerCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="org.carrot2.text.util.MutableCharArray"/>
      <param name="result" type="org.carrot2.text.util.MutableCharArray"/>
      <doc>
      <![CDATA[Convert to lower case the <code>source</code> array and save the result into the
 <code>result</code> array. If the result array is too small to accommodate the
 result, its buffer will be reallocated.
 
 @param source
 @param result
 @return Returns <code>true</code> if at least one character was changed between
         <code>source</code> and <code>result</code>. <code>false</code> indicates
         an identical copy.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Various utility methods operating on a {@link MutableCharArray}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.MutableCharArrayUtils -->
  <!-- start class org.carrot2.text.util.TabularOutput -->
  <class name="TabularOutput" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TabularOutput" type="java.io.Writer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Where to write the output to.]]>
      </doc>
    </constructor>
    <constructor name="TabularOutput"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An output to {@link System#out}.]]>
      </doc>
    </constructor>
    <method name="addListener" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="org.carrot2.text.util.TabularOutput.RowListener"/>
      <doc>
      <![CDATA[Adds a listener to receive information about each row.]]>
      </doc>
    </method>
    <method name="defaultFormat" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valueClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Default column specification for a given class.]]>
      </doc>
    </method>
    <method name="addColumn" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a column to the tabular's layout. Columns must be added before adding data.]]>
      </doc>
    </method>
    <method name="columnSeparator" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="separator" type="java.lang.String"/>
    </method>
    <method name="nextRow" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="rowData" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="columnData" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Sequentially adds column data to the current row.]]>
      </doc>
    </method>
    <method name="rowData" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="columnName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="flushEvery" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <doc>
      <![CDATA[Flush automatically every n-lines.
 @see #flush()]]>
      </doc>
    </method>
    <method name="flush" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flush current data rows. May emit header.]]>
      </doc>
    </method>
    <method name="getColumns" return="java.util.List&lt;org.carrot2.text.util.TabularOutput.ColumnSpec&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Tabular output data dump with automatically adjusted column widths and some other
 utilities.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.TabularOutput -->
  <!-- start class org.carrot2.text.util.TabularOutput.Alignment -->
  <class name="TabularOutput.Alignment" extends="java.lang.Enum&lt;org.carrot2.text.util.TabularOutput.Alignment&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.text.util.TabularOutput.Alignment[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.text.util.TabularOutput.Alignment"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="align" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="size" type="int"/>
    </method>
    <doc>
    <![CDATA[Column alignment.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.TabularOutput.Alignment -->
  <!-- start class org.carrot2.text.util.TabularOutput.ColumnSpec -->
  <class name="TabularOutput.ColumnSpec" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TabularOutput.ColumnSpec" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tabularOutput" return="org.carrot2.text.util.TabularOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="alignLeft" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets column flush on the last added column.]]>
      </doc>
    </method>
    <method name="alignRight" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets column flush on the last added column.]]>
      </doc>
    </method>
    <method name="alignCenter" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets column flush on the last added column.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="format" return="org.carrot2.text.util.TabularOutput.ColumnSpec"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formatString" type="java.lang.String"/>
    </method>
    <method name="align" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
    </method>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Column name.]]>
      </doc>
    </field>
    <field name="index" type="int"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Positional index of this column.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Column specification.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.util.TabularOutput.ColumnSpec -->
  <!-- start interface org.carrot2.text.util.TabularOutput.RowListener -->
  <interface name="TabularOutput.RowListener"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="columns" type="java.util.List&lt;org.carrot2.text.util.TabularOutput.ColumnSpec&gt;"/>
      <param name="values" type="java.util.List&lt;java.lang.Object&gt;"/>
    </method>
    <doc>
    <![CDATA[A listener notified when a row is complete and being emitted.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.util.TabularOutput.RowListener -->
</package>
<package name="org.carrot2.text.vsm">
  <!-- start interface org.carrot2.text.vsm.ITermWeighting -->
  <interface name="ITermWeighting"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="calculateTermWeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="termFrequency" type="int"/>
      <param name="documentFrequency" type="int"/>
      <param name="documentCount" type="int"/>
      <doc>
      <![CDATA[Calculates the weight of a term for a single document.
 
 @param termFrequency frequency of the term in the document
 @param documentFrequency the number of documents containing the term
 @param documentCount total number of documents]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Calculates term weights for the term-document matrix.
 
 @see TermDocumentMatrixBuilder]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.text.vsm.ITermWeighting -->
  <!-- start class org.carrot2.text.vsm.LinearTfIdfTermWeighting -->
  <class name="LinearTfIdfTermWeighting" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.vsm.ITermWeighting"/>
    <constructor name="LinearTfIdfTermWeighting"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculateTermWeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="termFrequency" type="int"/>
      <param name="documentFrequency" type="int"/>
      <param name="documentCount" type="int"/>
    </method>
    <doc>
    <![CDATA[Calculates term-document matrix element values based on Linear Inverse Term Frequency.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.LinearTfIdfTermWeighting -->
  <!-- start class org.carrot2.text.vsm.LogTfIdfTermWeighting -->
  <class name="LogTfIdfTermWeighting" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.vsm.ITermWeighting"/>
    <constructor name="LogTfIdfTermWeighting"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculateTermWeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="termFrequency" type="int"/>
      <param name="documentFrequency" type="int"/>
      <param name="documentCount" type="int"/>
    </method>
    <doc>
    <![CDATA[Calculates term-document matrix element values based on Term Frequency.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.LogTfIdfTermWeighting -->
  <!-- start class org.carrot2.text.vsm.ReducedVectorSpaceModelContext -->
  <class name="ReducedVectorSpaceModelContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ReducedVectorSpaceModelContext" type="org.carrot2.text.vsm.VectorSpaceModelContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="vsmContext" type="org.carrot2.text.vsm.VectorSpaceModelContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vector Space Model context for the underlying documents.]]>
      </doc>
    </field>
    <field name="baseMatrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Base vectors of the reduced term document matrix]]>
      </doc>
    </field>
    <field name="coefficientMatrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Coefficient vectors of the reduced term document matrix]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Stores data related a Vector Space Model with reduced dimensionality.
 
 @see TermDocumentMatrixReducer]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.ReducedVectorSpaceModelContext -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixBuilder -->
  <class name="TermDocumentMatrixBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildTermDocumentMatrix"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="vsmContext" type="org.carrot2.text.vsm.VectorSpaceModelContext"/>
      <doc>
      <![CDATA[Builds a term document matrix from data provided in the <code>context</code>,
 stores the result in there.]]>
      </doc>
    </method>
    <method name="buildTermPhraseMatrix"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.vsm.VectorSpaceModelContext"/>
      <doc>
      <![CDATA[Builds a term-phrase matrix in the same space as the main term-document matrix. If
 the processing context contains no phrases,
 {@link VectorSpaceModelContext#termPhraseMatrix} will remain <code>null</code>.]]>
      </doc>
    </method>
    <field name="MATRIX_MODEL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link Group} name.]]>
      </doc>
    </field>
    <field name="titleWordsBoost" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Title word boost. Gives more weight to words that appeared in
 {@link org.carrot2.core.Document#TITLE} fields.]]>
      </doc>
    </field>
    <field name="maximumMatrixSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum matrix size. The maximum number of the term-document matrix elements. The
 larger the size, the more accurate, time- and memory-consuming clustering.]]>
      </doc>
    </field>
    <field name="maxWordDf" type="double"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum word document frequency. The maximum document frequency allowed for words
 as a fraction of all documents. Words with document frequency larger than
 <code>maxWordDf</code> will be ignored. For example, when <code>maxWordDf</code> is
 <code>0.4</code>, words appearing in more than 40% of documents will be be ignored.
 A value of <code>1.0</code> means that all words will be taken into
 account, no matter in how many documents they appear.
 <p>
 This attribute may be useful when certain words appear in most of the input
 documents (e.g. company name from header or footer) and such words dominate the
 cluster labels. In such case, setting <code>maxWordDf</code> to a value lower than
 <code>1.0</code>, e.g. <code>0.9</code> may improve the clusters. 
 </p>
 <p>
 Another useful application of this attribute is when there is a need to generate
 only very specific clusters, i.e. clusters containing small numbers of documents.
 This can be achieved by setting <code>maxWordDf</code> to extremely low values,
 e.g. <code>0.1</code> or <code>0.05</code>.
 </p>]]>
      </doc>
    </field>
    <field name="termWeighting" type="org.carrot2.text.vsm.ITermWeighting"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term weighting. The method for calculating weight of words in the term-document
 matrices.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Builds a term document matrix based on the provided {@link PreprocessingContext}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixBuilder -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor -->
  <class name="TermDocumentMatrixBuilderDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="TermDocumentMatrixBuilderDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder -->
  <class name="TermDocumentMatrixBuilderDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixBuilderDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="titleWordsBoost" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Title word boost. Gives more weight to words that appeared in
{@link org.carrot2.core.Document#TITLE} fields.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#titleWordsBoost]]>
      </doc>
    </method>
    <method name="titleWordsBoost" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Title word boost. Gives more weight to words that appeared in
{@link org.carrot2.core.Document#TITLE} fields.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#titleWordsBoost]]>
      </doc>
    </method>
    <method name="maximumMatrixSize" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <doc>
      <![CDATA[Maximum matrix size. The maximum number of the term-document matrix elements. The
larger the size, the more accurate, time- and memory-consuming clustering.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#maximumMatrixSize]]>
      </doc>
    </method>
    <method name="maximumMatrixSize" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Integer&gt;"/>
      <doc>
      <![CDATA[Maximum matrix size. The maximum number of the term-document matrix elements. The
larger the size, the more accurate, time- and memory-consuming clustering.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#maximumMatrixSize]]>
      </doc>
    </method>
    <method name="maxWordDf" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="double"/>
      <doc>
      <![CDATA[Maximum word document frequency. The maximum document frequency allowed for words
as a fraction of all documents. Words with document frequency larger than
<code>maxWordDf</code> will be ignored. For example, when <code>maxWordDf</code> is
<code>0.4</code>, words appearing in more than 40% of documents will be be ignored.
A value of <code>1.0</code> means that all words will be taken into
account, no matter in how many documents they appear.
<p>
This attribute may be useful when certain words appear in most of the input
documents (e.g. company name from header or footer) and such words dominate the
cluster labels. In such case, setting <code>maxWordDf</code> to a value lower than
<code>1.0</code>, e.g. <code>0.9</code> may improve the clusters. 
</p>
<p>
Another useful application of this attribute is when there is a need to generate
only very specific clusters, i.e. clusters containing small numbers of documents.
This can be achieved by setting <code>maxWordDf</code> to extremely low values,
e.g. <code>0.1</code> or <code>0.05</code>.
</p>
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#maxWordDf]]>
      </doc>
    </method>
    <method name="maxWordDf" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends java.lang.Double&gt;"/>
      <doc>
      <![CDATA[Maximum word document frequency. The maximum document frequency allowed for words
as a fraction of all documents. Words with document frequency larger than
<code>maxWordDf</code> will be ignored. For example, when <code>maxWordDf</code> is
<code>0.4</code>, words appearing in more than 40% of documents will be be ignored.
A value of <code>1.0</code> means that all words will be taken into
account, no matter in how many documents they appear.
<p>
This attribute may be useful when certain words appear in most of the input
documents (e.g. company name from header or footer) and such words dominate the
cluster labels. In such case, setting <code>maxWordDf</code> to a value lower than
<code>1.0</code>, e.g. <code>0.9</code> may improve the clusters. 
</p>
<p>
Another useful application of this attribute is when there is a need to generate
only very specific clusters, i.e. clusters containing small numbers of documents.
This can be achieved by setting <code>maxWordDf</code> to extremely low values,
e.g. <code>0.1</code> or <code>0.05</code>.
</p>
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#maxWordDf]]>
      </doc>
    </method>
    <method name="termWeighting" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.text.vsm.ITermWeighting"/>
      <doc>
      <![CDATA[Term weighting. The method for calculating weight of words in the term-document
matrices.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#termWeighting]]>
      </doc>
    </method>
    <method name="termWeighting" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Term weighting. The method for calculating weight of words in the term-document
matrices.

 A class that extends org.carrot2.text.vsm.ITermWeighting or appropriate IObjectFactory.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#termWeighting]]>
      </doc>
    </method>
    <method name="termWeighting" return="org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.text.vsm.ITermWeighting&gt;"/>
      <doc>
      <![CDATA[Term weighting. The method for calculating weight of words in the term-document
matrices.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixBuilder#termWeighting]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Attributes -->
  <class name="TermDocumentMatrixBuilderDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="titleWordsBoost" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maximumMatrixSize" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="maxWordDf" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="termWeighting" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Attributes -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Keys -->
  <class name="TermDocumentMatrixBuilderDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixBuilderDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="TITLE_WORDS_BOOST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder#titleWordsBoost}.]]>
      </doc>
    </field>
    <field name="MAXIMUM_MATRIX_SIZE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder#maximumMatrixSize}.]]>
      </doc>
    </field>
    <field name="MAX_WORD_DF" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder#maxWordDf}.]]>
      </doc>
    </field>
    <field name="TERM_WEIGHTING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder#termWeighting}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.vsm.TermDocumentMatrixBuilder} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixBuilderDescriptor.Keys -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixReducer -->
  <class name="TermDocumentMatrixReducer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixReducer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="reduce"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.carrot2.text.vsm.ReducedVectorSpaceModelContext"/>
      <param name="dimensions" type="int"/>
      <doc>
      <![CDATA[Performs the reduction.]]>
      </doc>
    </method>
    <field name="factorizationFactory" type="org.carrot2.matrix.factorization.IMatrixFactorizationFactory"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Factorization method. The method to be used to factorize the term-document matrix
 and create base vectors that will give rise to cluster labels.]]>
      </doc>
    </field>
    <field name="factorizationQuality" type="org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Factorization quality. The number of iterations of matrix factorization to perform.
 The higher the required quality, the more time-consuming clustering.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Reduces the dimensionality of a term-document matrix using a matrix factorization
 algorithm.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixReducer -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor -->
  <class name="TermDocumentMatrixReducerDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IBindableDescriptor"/>
    <constructor name="TermDocumentMatrixReducerDescriptor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="attributeBuilder" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValues" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Creates an attribute map builder for the component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.
 
 @param attributeValues An existing map which should be used to collect attribute values. 
        Attribute values set by this builder will be added to the provided map, overwriting
        previously defined mappings, if any.]]>
      </doc>
    </method>
    <method name="getPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOwnAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributes" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByKey" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAttributesByFieldName" return="java.util.Map&lt;java.lang.String, org.carrot2.util.attribute.AttributeInfo&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="bindableClassName" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The component class for which this descriptor was generated.]]>
      </doc>
    </field>
    <field name="prefix" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute prefix used by the component.]]>
      </doc>
    </field>
    <field name="title" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A one sentence summary of the component. It could be presented as a header of the tool
 tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A short label for the component. It can be presented as a label of the
 corresponding UI component.]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A longer, possibly multi sentence, description of the component. It could be presented
 as a body of the tool tip of the corresponding UI component.]]>
      </doc>
    </field>
    <field name="attributes" type="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Attributes"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attributes of the component. Note that only statically reachable fields are included.
 Additional attributes may be available at run time.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Metadata and attributes of the {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component. You can use 
 this descriptor to obtain metadata, such as human readable name and description, about the component 
 as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 you can obtain a builder for type-safe generation of the attribute maps. Please see the
 <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder -->
  <class name="TermDocumentMatrixReducerDescriptor.AttributeBuilder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixReducerDescriptor.AttributeBuilder" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a builder backed by the provided map.]]>
      </doc>
    </constructor>
    <method name="factorizationFactory" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.matrix.factorization.IMatrixFactorizationFactory"/>
      <doc>
      <![CDATA[Factorization method. The method to be used to factorize the term-document matrix
and create base vectors that will give rise to cluster labels.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationFactory]]>
      </doc>
    </method>
    <method name="factorizationFactory" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Factorization method. The method to be used to factorize the term-document matrix
and create base vectors that will give rise to cluster labels.

 A class that extends org.carrot2.matrix.factorization.IMatrixFactorizationFactory or appropriate IObjectFactory.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationFactory]]>
      </doc>
    </method>
    <method name="factorizationFactory" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.matrix.factorization.IMatrixFactorizationFactory&gt;"/>
      <doc>
      <![CDATA[Factorization method. The method to be used to factorize the term-document matrix
and create base vectors that will give rise to cluster labels.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationFactory]]>
      </doc>
    </method>
    <method name="factorizationQuality" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality"/>
      <doc>
      <![CDATA[Factorization quality. The number of iterations of matrix factorization to perform.
The higher the required quality, the more time-consuming clustering.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationQuality]]>
      </doc>
    </method>
    <method name="factorizationQuality" return="org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="org.carrot2.util.attribute.IObjectFactory&lt;? extends org.carrot2.matrix.factorization.IterationNumberGuesser.FactorizationQuality&gt;"/>
      <doc>
      <![CDATA[Factorization quality. The number of iterations of matrix factorization to perform.
The higher the required quality, the more time-consuming clustering.
 
 @see org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationQuality]]>
      </doc>
    </method>
    <field name="map" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The attribute map populated by this builder.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Attribute map builder for the  {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component. You can use this
 builder as a type-safe alternative to populating the attribute map using attribute keys.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.AttributeBuilder -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Attributes -->
  <class name="TermDocumentMatrixReducerDescriptor.Attributes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="factorizationFactory" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="factorizationQuality" type="org.carrot2.util.attribute.AttributeInfo"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[All attributes of the {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Attributes -->
  <!-- start class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Keys -->
  <class name="TermDocumentMatrixReducerDescriptor.Keys" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TermDocumentMatrixReducerDescriptor.Keys"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <field name="FACTORIZATION_FACTORY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationFactory}.]]>
      </doc>
    </field>
    <field name="FACTORIZATION_QUALITY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attribute key for: {@link org.carrot2.text.vsm.TermDocumentMatrixReducer#factorizationQuality}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for all attribute keys of the {@link org.carrot2.text.vsm.TermDocumentMatrixReducer} component.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TermDocumentMatrixReducerDescriptor.Keys -->
  <!-- start class org.carrot2.text.vsm.TfTermWeighting -->
  <class name="TfTermWeighting" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.text.vsm.ITermWeighting"/>
    <constructor name="TfTermWeighting"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="calculateTermWeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="termFrequency" type="int"/>
      <param name="documentFrequency" type="int"/>
      <param name="documentCount" type="int"/>
    </method>
    <doc>
    <![CDATA[Calculates term-document matrix element values based on Log Inverse Term Frequency.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.TfTermWeighting -->
  <!-- start class org.carrot2.text.vsm.VectorSpaceModelContext -->
  <class name="VectorSpaceModelContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="VectorSpaceModelContext" type="org.carrot2.text.preprocessing.PreprocessingContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a vector space model context with the provided preprocessing context.]]>
      </doc>
    </constructor>
    <field name="preprocessingContext" type="org.carrot2.text.preprocessing.PreprocessingContext"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Preprocessing context for the underlying documents.]]>
      </doc>
    </field>
    <field name="termDocumentMatrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document matrix. Rows of the matrix correspond to word stems, columns
 correspond to the processed documents. For mapping between rows of this matrix and
 {@link AllStems}, see {@link #stemToRowIndex}.
 <p>
 This matrix is produced by
 {@link TermDocumentMatrixBuilder#buildTermDocumentMatrix(VectorSpaceModelContext)}.
 </p>]]>
      </doc>
    </field>
    <field name="termPhraseMatrix" type="org.apache.mahout.math.matrix.DoubleMatrix2D"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Term-document-like matrix for phrases from {@link AllLabels}. If there are no
 phrases in {@link AllLabels}, phrase matrix is <code>null</code>. For mapping
 between rows of this matrix and {@link AllStems}, see {@link #stemToRowIndex}.
 <p>
 This matrix is produced by
 {@link TermDocumentMatrixBuilder#buildTermPhraseMatrix(VectorSpaceModelContext)}.
 </p>]]>
      </doc>
    </field>
    <field name="stemToRowIndex" type="com.carrotsearch.hppc.IntIntHashMap"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stem index to row index mapping for the <code>tdMatrix</code>. Keys in this map are
 indices of entries in {@link AllStems} arrays, values are the indices of
 <code>tdMatrix</code> rows corresponding to the stems. Please note that depending
 on the limit on the size of the matrix, some stems may not have their corresponding
 matrix rows.
 <p>
 This object is produced by
 {@link TermDocumentMatrixBuilder#buildTermDocumentMatrix(VectorSpaceModelContext)}.
 </p>]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Stores data related to the Vector Space Model of the processed documents.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.text.vsm.VectorSpaceModelContext -->
</package>
<package name="org.carrot2.util">
  <!-- start class org.carrot2.util.CharArrayUtils -->
  <class name="CharArrayUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CharArrayUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toLowerCaseInPlace" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <doc>
      <![CDATA[In place to lower case conversion. In input array is returned for convenience.]]>
      </doc>
    </method>
    <method name="toLowerCaseCopy" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <doc>
      <![CDATA[To lower case conversion. A copy of the input array will be created.]]>
      </doc>
    </method>
    <method name="getCapitalizedRatio" return="float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="char[]"/>
      <doc>
      <![CDATA[Computes and returns the ratio of capitalized 
 letters in the string to the numbers of all letters.]]>
      </doc>
    </method>
    <method name="hasCapitalizedLetters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="char[]"/>
      <doc>
      <![CDATA[Returns <code>true</code> if the input array contains any capitalized
 characters.]]>
      </doc>
    </method>
    <method name="toCapitalizedCopy" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="char[]"/>
      <doc>
      <![CDATA[Returns a capitalized copy of the input character array.]]>
      </doc>
    </method>
    <method name="toLowerCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="char[]"/>
      <param name="buffer" type="char[]"/>
      <doc>
      <![CDATA[Convert to lower case (character-by-character) and save the result
 into <code>buffer</code>. 
 
 @param word The word to be converted to lower case.
 @param buffer The buffer where the result should be saved.
 @return Returns <code>true</code> if at least one character was changed
 between <code>word</code> and <code>buffer</code>. <code>false</code> indicates
 an identical copy.
 @throws AssertionError If <code>buffer</code> is smaller than <code>word</code>.]]>
      </doc>
    </method>
    <method name="toLowerCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="word" type="char[]"/>
      <param name="buffer" type="char[]"/>
      <param name="start" type="int"/>
      <param name="length" type="int"/>
      <doc>
      <![CDATA[Convert to lower case (character-by-character) and save the result
 into <code>buffer</code>. The buffer must have at least <code>length</code>
 characters.
 
 @param word The word to be converted to lower case.
 @param buffer The buffer where the result should be saved.
 @param start the index in the <code>word</code> at which to start
 @param length the number of characters from <code>word</code> to process
 @return Returns <code>true</code> if at least one character was changed
 between <code>word</code> and <code>buffer</code>. <code>false</code> indicates
 an identical copy.
 @throws AssertionError If <code>buffer</code> is smaller than <code>length</code>.
 @throws AssertionError If <code>start + length</code> is smaller than the length <code>word</code>.]]>
      </doc>
    </method>
    <field name="EMPTY_ARRAY" type="char[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A number of useful methods for working with <code>char []</code> arrays.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.CharArrayUtils -->
  <!-- start class org.carrot2.util.CharSequenceUtils -->
  <class name="CharSequenceUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="toCharArray" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charSequence" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[Converts a {@link CharSequence} into a <code>char []</code> array.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A number of useful methods for working with {@link CharSequence}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.CharSequenceUtils -->
  <!-- start class org.carrot2.util.CloseableUtils -->
  <class name="CloseableUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conn" type="java.io.Closeable"/>
      <doc>
      <![CDATA[Close a {@link Closeable}, ignoring the exception if any.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeables" type="java.io.Closeable[]"/>
      <doc>
      <![CDATA[Close all {@link Closeable}, ignoring exceptions.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conn" type="java.sql.Connection"/>
      <doc>
      <![CDATA[Close a {@link Connection}, ignoring the exception if any.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="connections" type="java.sql.Connection[]"/>
      <doc>
      <![CDATA[Close all {@link Connection}s, ignoring exceptions.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conn" type="java.sql.Statement"/>
      <doc>
      <![CDATA[Close a {@link Statement}, ignoring the exception if any.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statements" type="java.sql.Statement[]"/>
      <doc>
      <![CDATA[Close all {@link Statement}s, ignoring exceptions.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sockets" type="java.net.Socket[]"/>
      <doc>
      <![CDATA[Close all {@link Socket}s, ignoring exceptions.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static methods for closing various objects (including implementations of {@link Closeable}).]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.CloseableUtils -->
  <!-- start class org.carrot2.util.CollectionUtils -->
  <class name="CollectionUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getFirst" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="collection" type="java.util.Collection&lt;T&gt;"/>
      <doc>
      <![CDATA[Returns the first element from the provided collection.
 
 @param collection the collection to get the element from
 @return first element from the provided collection or <code>null</code> if the
         collection is <code>null</code> or empty.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A number of utility classes for working with {@link Collection}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.CollectionUtils -->
  <!-- start class org.carrot2.util.ExceptionUtils -->
  <class name="ExceptionUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="wrapAs" return="T extends java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;T&gt;"/>
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[If <code>t</code> if an instance of <code>clazz</code>, then <code>t</code> is
 returned. Otherwise an instance of <code>clazz</code> is created using a
 single-parameter constructor accepting <code>t</code> and the wrapper exception
 instance is returned. If no matching constructor can be found, a
 {@link RuntimeException} is returned.
 
 @param clazz The exception class to return (or wrap) <code>t</code>.
 @param t Throwable instance to wrap.]]>
      </doc>
    </method>
    <method name="wrapAsRuntimeException" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Calls {@link #wrapAs(Class, Throwable)} with the first parameter set to
 {@link RuntimeException}.]]>
      </doc>
    </method>
    <method name="currentStackTrace" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current stack trace of the calling thread.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A number of utility classes for working with {@link Throwable}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.ExceptionUtils -->
  <!-- start class org.carrot2.util.ExecutorServiceUtils -->
  <class name="ExecutorServiceUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExecutorServiceUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createExecutorService" return="java.util.concurrent.ExecutorService"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxConcurrentThreads" type="int"/>
      <param name="clazz" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[@return Return an executor service with a fixed thread pool of
         <code>maxConcurrentThreads</code> threads and context class loader
         initialized to <code>clazz</code>'s context class loader.
         <p>
         A weak reference to the returned object is saved internally to make the
         necessary cleanups in Web applications and other dynamic environments
         possible. 
         See <a href="http://issues.carrot2.org/browse/CARROT-388">CARROT-388</a>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A number of utility methods for working with the {@link Executor}s framework.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.ExecutorServiceUtils -->
  <!-- start class org.carrot2.util.GraphUtils -->
  <class name="GraphUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GraphUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="findCoherentSubgraphs" return="java.util.List&lt;com.carrotsearch.hppc.IntArrayList&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="vertexCount" type="int"/>
      <param name="arcPredicate" type="org.carrot2.util.GraphUtils.IArcPredicate"/>
      <param name="pruneOneNodeSubrgaphs" type="boolean"/>
      <doc>
      <![CDATA[Finds coherent subgraphs of an undirected graph.
 
 @param vertexCount the number of vertices in the graph
 @param arcPredicate a predicate that determines which vertices are connected by an
            arc
 @param pruneOneNodeSubrgaphs if <code>true</code>, one-node subgraphs will not be
            included in the result
 @return a list of {@link IntArrayList}s containing vertices of the coherent subgraphs]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Various utilities for processing graphs.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.GraphUtils -->
  <!-- start interface org.carrot2.util.GraphUtils.IArcPredicate -->
  <interface name="GraphUtils.IArcPredicate"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isArcPresent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="vertexA" type="int"/>
      <param name="vertexB" type="int"/>
      <doc>
      <![CDATA[Returns <code>true</code> if there is an arc connecting <code>vertexA</code>
 and <code>vertexB</code>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A predicate defining arcs of an undirected graph.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.GraphUtils.IArcPredicate -->
  <!-- start class org.carrot2.util.IntArrayPredicateIterator -->
  <class name="IntArrayPredicateIterator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Iterator&lt;java.lang.Integer&gt;"/>
    <constructor name="IntArrayPredicateIterator" type="short[], int, int, com.carrotsearch.hppc.predicates.ShortPredicate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IntArrayPredicateIterator" type="short[], com.carrotsearch.hppc.predicates.ShortPredicate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="next" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="remove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length (number of elements) of the range most recently acquired from
 {@link #next()}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Iterates over <i>ranges</i> between elements for which a given predicate returns
 <code>true</code>. The returned range may be of zero length ({@link #getLength()}).
 <p>
 An example probably best explains what this class does. Consider the following array:
 
 <pre>
 [SEP, SEP, 1, SEP] 
 </pre>
 
 where <code>SEP</code> is something for which the predicate returns <code>true</code>.
 If so, then the returned subranges would be equal to (start index, length):
 
 <pre>
 [0,0]  (empty range before the first separator)
 [1,0]  (empty range after the first separator)
 [2,1]  ([1])
 [4,0]  (empty range after last separator)
 </pre>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.IntArrayPredicateIterator -->
  <!-- start class org.carrot2.util.IntMapUtils -->
  <class name="IntMapUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="flattenSortedByKey" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <doc>
      <![CDATA[Converts an {@link IntIntHashMap} into a flat int [] array. The
 returned arrays contains [key,value] pairs and is sorted in ascending order
 by key values.]]>
      </doc>
    </method>
    <method name="flatten" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <doc>
      <![CDATA[Converts an {@link IntIntHashMap} into a flat int [] array. Even indexes
 in the flat array represent keys and the corresponding odd indexes --
 values. Note: the order of keys in the flat array is arbitrary.]]>
      </doc>
    </method>
    <method name="addAllFromFlattened" return="com.carrotsearch.hppc.IntIntHashMap"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="com.carrotsearch.hppc.IntIntHashMap"/>
      <param name="flattened" type="int[]"/>
      <doc>
      <![CDATA[Adds all entries from a flat [] array to the provided map. Even indexes
 in the flat array represent keys and the corresponding odd indexes --
 values.
 
 @return the input <code>map</code> for convenience]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A number of utilities for working with {@link IntIntHashMap}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.IntMapUtils -->
  <!-- start class org.carrot2.util.LinearApproximation -->
  <class name="LinearApproximation" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LinearApproximation" type="double[], double, double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="argument" type="double"/>
      <doc>
      <![CDATA[Returns approximated value for the provided argument.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A simple utility for calculating linear approximations based on values for equally
 distributed points between minimum and maximum arguments.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.LinearApproximation -->
  <!-- start class org.carrot2.util.ListUtils -->
  <class name="ListUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="asArrayList" return="java.util.ArrayList&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.util.Collection&lt;E&gt;"/>
    </method>
    <method name="asArray" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.util.Collection&lt;java.lang.Integer&gt;"/>
    </method>
    <doc>
    <![CDATA[Utility methods for working with {@link List}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.ListUtils -->
  <!-- start class org.carrot2.util.MapUtils -->
  <class name="MapUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="asHashMap" return="java.util.HashMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;K, V&gt;"/>
    </method>
    <method name="unpack" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map"/>
      <doc>
      <![CDATA[Iterates through entries of the input <code>map</code> and for values being String
 arrays puts the first element of the map in the result map. Scalar values get
 copied to the output map unchanged.
 <p>
 This method might be useful for "unpacking" values from servlet HTTP requests.]]>
      </doc>
    </method>
    <method name="increment" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;K, java.lang.Integer&gt;"/>
      <param name="key" type="K"/>
    </method>
    <method name="increment" return="java.lang.Integer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;K, java.lang.Integer&gt;"/>
      <param name="key" type="K"/>
      <param name="value" type="int"/>
    </method>
    <doc>
    <![CDATA[Utilities for working with {@link Map}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.MapUtils -->
  <!-- start class org.carrot2.util.MathUtils -->
  <class name="MathUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="harmonicMean" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v1" type="double"/>
      <param name="v2" type="double"/>
      <doc>
      <![CDATA[Returns the harmonic mean of <code>v1</code> and <code>v2</code>, giving both
 arguments equal weight.]]>
      </doc>
    </method>
    <method name="harmonicMean" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v1" type="double"/>
      <param name="v2" type="double"/>
      <param name="w1" type="double"/>
      <param name="w2" type="double"/>
      <doc>
      <![CDATA[Returns the harmonic mean of <code>v1</code> and <code>v2</code>, weighting them by
 <code>w1</code> and <code>w2</code>, respectively.]]>
      </doc>
    </method>
    <method name="arithmeticMean" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v1" type="double"/>
      <param name="v2" type="double"/>
      <param name="w1" type="double"/>
      <param name="w2" type="double"/>
      <doc>
      <![CDATA[Returns the arithmetic mean of <code>v1</code> and <code>v2</code>, weighting them
 by <code>w1</code> and <code>w2</code>, respectively.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Some simple mathematical computation utility methods.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.MathUtils -->
  <!-- start class org.carrot2.util.Pair -->
  <class name="Pair" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pair" type="I, J"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="objectA" type="I"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="objectB" type="J"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An immutable pair of objects.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.Pair -->
  <!-- start class org.carrot2.util.PriorityQueue -->
  <class name="PriorityQueue" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PriorityQueue"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="lessThan" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="a" type="T"/>
      <param name="b" type="T"/>
      <doc>
      <![CDATA[Determines the ordering of objects in this priority queue.  Subclasses
    must define this one method.]]>
      </doc>
    </method>
    <method name="getSentinelObject" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method can be overridden by extending classes to return a sentinel
 object which will be used by {@link #initialize(int)} to fill the queue, so
 that the code which uses that queue can always assume it's full and only
 change the top without attempting to insert any new object.<br>
 
 Those sentinel values should always compare worse than any non-sentinel
 value (i.e., {@link #lessThan} should always favor the
 non-sentinel values).<br>
 
 By default, this method returns false, which means the queue will not be
 filled with sentinel values. Otherwise, the value returned will be used to
 pre-populate the queue. Adds sentinel values to the queue.<br>
 
 If this method is extended to return a non-null value, then the following
 usage pattern is recommended:
 
 <pre>
 // extends getSentinelObject() to return a non-null value.
 PriorityQueue&lt;MyObject&gt; pq = new MyQueue&lt;MyObject&gt;(numHits);
 // save the 'top' element, which is guaranteed to not be null.
 MyObject pqTop = pq.top();
 &lt;...&gt;
 // now in order to add a new element, which is 'better' than top (after 
 // you've verified it is better), it is as simple as:
 pqTop.change().
 pqTop = pq.updateTop();
 </pre>
 
 <b>NOTE:</b> if this method returns a non-null value, it will be called by
 {@link #initialize(int)} {@link #size()} times, relying on a new object to
 be returned and will not check if it's null again. Therefore you should
 ensure any call to this method creates a new instance and behaves
 consistently, e.g., it cannot return null if it previously returned
 non-null.
 
 @return the sentinel object to use to pre-populate the queue, or null if
         sentinel objects are not supported.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="maxSize" type="int"/>
      <doc>
      <![CDATA[Subclass constructors must call this.]]>
      </doc>
    </method>
    <method name="add" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="T"/>
      <doc>
      <![CDATA[Adds an Object to a PriorityQueue in log(size) time. If one tries to add
 more objects than maxSize from initialize an
 {@link ArrayIndexOutOfBoundsException} is thrown.
 
 @return the new 'top' element in the queue.]]>
      </doc>
    </method>
    <method name="insertWithOverflow" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="T"/>
      <doc>
      <![CDATA[Adds an Object to a PriorityQueue in log(size) time.
 It returns the object (if any) that was
 dropped off the heap because it was full. This can be
 the given parameter (in case it is smaller than the
 full heap's minimum, and couldn't be added), or another
 object that was previously the smallest value in the
 heap and now has been replaced by a larger one, or null
 if the queue wasn't yet full with maxSize elements.]]>
      </doc>
    </method>
    <method name="top" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the least element of the PriorityQueue in constant time.]]>
      </doc>
    </method>
    <method name="pop" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes and returns the least element of the PriorityQueue in log(size)
    time.]]>
      </doc>
    </method>
    <method name="updateTop" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Should be called when the Object at top changes values. Still log(n) worst
 case, but it's at least twice as fast to
 
 <pre>
 pq.top().change();
 pq.updateTop();
 </pre>
 
 instead of
 
 <pre>
 o = pq.pop();
 o.change();
 pq.push(o);
 </pre>
 
 @return the new 'top' element.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of elements currently stored in the PriorityQueue.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes all entries from the PriorityQueue.]]>
      </doc>
    </method>
    <field name="heap" type="T[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A PriorityQueue maintains a partial ordering of its elements such that the
 least element can always be found in constant time.  Put()'s and pop()'s
 require log(size) time.

 <p><b>NOTE</b>: This class pre-allocates a full array of
 length <code>maxSize+1</code>, in {@link #initialize}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.PriorityQueue -->
  <!-- start class org.carrot2.util.RangeUtils -->
  <class name="RangeUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RangeUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIntMinorTicks" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="min" type="int"/>
      <param name="max" type="int"/>
      <doc>
      <![CDATA[Calculates the spacing between minor (secondary) "ticks" of a slider.
 
 @param min minimum value of the range
 @param max maximum value of the range]]>
      </doc>
    </method>
    <method name="getIntMajorTicks" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="min" type="int"/>
      <param name="max" type="int"/>
      <doc>
      <![CDATA[Calculates the spacing between major (primary) "ticks" of a slider.
 
 @param min minimum value of the range
 @param max maximum value of the range]]>
      </doc>
    </method>
    <method name="getDoubleMinorTicks" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="min" type="double"/>
      <param name="max" type="double"/>
      <doc>
      <![CDATA[Calculates the spacing between minor (secondary) "ticks" of a slider.
 
 @param min minimum value of the range
 @param max maximum value of the range]]>
      </doc>
    </method>
    <method name="getDoubleMajorTicks" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="min" type="double"/>
      <param name="max" type="double"/>
      <doc>
      <![CDATA[Calculates the spacing between major (primary) "ticks" of a slider.
 
 @param min minimum value of the range
 @param max maximum value of the range]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A helper class for performing various calculations for integer and double ranges.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.RangeUtils -->
  <!-- start class org.carrot2.util.ReflectionUtils -->
  <class name="ReflectionUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="classForName" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazzName" type="java.lang.String"/>
      <exception name="ClassNotFoundException" type="java.lang.ClassNotFoundException"/>
      <doc>
      <![CDATA[Load and initialize (or return, if already defined) a given class using context
 class loader. If class cannot be found, a {@link ClassNotFoundException} is thrown
 and logged.]]>
      </doc>
    </method>
    <method name="classForName" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazzName" type="java.lang.String"/>
      <param name="logWarning" type="boolean"/>
      <exception name="ClassNotFoundException" type="java.lang.ClassNotFoundException"/>
      <doc>
      <![CDATA[Load and initialize (or return, if already defined) a given class using context
 class loader.
 
 @param clazzName class name to load
 @param logWarning if <code>true</code>, a warning will be logged if class cannot be found]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities related to Java reflection.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.ReflectionUtils -->
  <!-- start class org.carrot2.util.RollingWindowAverage -->
  <class name="RollingWindowAverage" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RollingWindowAverage" type="long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="timestamp" type="long"/>
      <param name="value" type="long"/>
      <doc>
      <![CDATA[Adds a new entry.]]>
      </doc>
    </method>
    <method name="getCurrentAverage" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUpdatesInWindow" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of updates kept in the rolling window's scope.]]>
      </doc>
    </method>
    <method name="getWindowSizeMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the size of the rolling window.]]>
      </doc>
    </method>
    <field name="MILLIS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Helpful constant for one millisecond.]]>
      </doc>
    </field>
    <field name="SECOND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Helpful constant for one second.]]>
      </doc>
    </field>
    <field name="MINUTE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Helpful constant for one minute.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Calculates an average of values showing up in a given time window. To keep processing
 efficient, bucketing is performed.
 <p>
 This class is not thread-safe.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.RollingWindowAverage -->
  <!-- start class org.carrot2.util.SetUtils -->
  <class name="SetUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="asHashSet" return="java.util.HashSet&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="set" type="java.util.Set&lt;E&gt;"/>
    </method>
    <doc>
    <![CDATA[Utility methods for working with {@link Set}s.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.SetUtils -->
  <!-- start class org.carrot2.util.StreamUtils -->
  <class name="StreamUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="readFullyAndClose" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read the contents of an opened stream until EOF (or an exception is thrown). Note
 that this method does close the input stream, regardless whether exception has been
 thrown or not.
 
 @param input Input stream to be read.
 @throws IOException propagated from the underlying stream.]]>
      </doc>
    </method>
    <method name="readFully" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read the contents of an opened stream until EOF (or an exception is thrown). Note
 that this method does NOT close the stream.
 
 @param input InputStream from which data is to be read.
 @throws IOException propagated from the underlying stream.]]>
      </doc>
    </method>
    <method name="readFullyAndClose" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read the contents of an opened Reader until EOF (or an exception is thrown). Note
 that this method does close the input stream, regardless whether exception has been
 thrown or not.
 
 @param input Reader to be read.
 @throws IOException propagated from the underlying stream.]]>
      </doc>
    </method>
    <method name="readFully" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read the contents of an opened reader until EOF (or an exception is thrown). Note
 that this method does NOT close the stream.
 
 @param input Reader from which data will be read.
 @throws IOException propagated from the underlying stream.]]>
      </doc>
    </method>
    <method name="prefetch" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Prefetch the entire content of <code>stream</code>, close it and return
 an {@link InputStream} to an in-memory {@link ByteArrayInputStream}. If
 <code>stream</code> is already a {@link ByteArrayInputStream}, it is
 returned immediately.]]>
      </doc>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="out" type="java.io.OutputStream"/>
      <param name="bufSize" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Copies all available data from the input stream to the output stream. Data is
 internally buffered. Neither of the streams will be closed.]]>
      </doc>
    </method>
    <method name="copyAndClose"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="out" type="java.io.OutputStream"/>
      <param name="bufSize" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Copies all available data from the input stream to the output stream. Data is
 internally buffered. Both stream will be closed before the method returns.]]>
      </doc>
    </method>
    <field name="NULL_WRITER" type="java.io.Writer"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A dummy writer with empty implementations of {@link Writer} methods.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A set of common helper methods used with input streams and file objects.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.StreamUtils -->
  <!-- start class org.carrot2.util.StringUtils -->
  <class name="StringUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iterable" type="java.lang.Iterable&lt;T&gt;"/>
      <param name="separator" type="java.lang.String"/>
    </method>
    <method name="splitCamelCase" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="camelCaseString" type="java.lang.String"/>
    </method>
    <method name="urlEncodeWrapException" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="encoding" type="java.lang.String"/>
    </method>
    <method name="removeHtmlTags" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
    </method>
    <method name="identifierToHumanReadable" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
    </method>
    <method name="join" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="delim" type="java.lang.String"/>
      <param name="objects" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Join a list of non-null objects with <code>delim</code> and return it
 as a string.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides a number of useful method operating on {@link String}s that are not available
 in {@link org.apache.commons.lang.StringUtils}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.StringUtils -->
  <!-- start class org.carrot2.util.SystemPropertyStack -->
  <class name="SystemPropertyStack" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SystemPropertyStack" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="pop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="push"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newValue" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Small utility to push a system property and then restore the previous value.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.SystemPropertyStack -->
</package>
<package name="org.carrot2.util.annotations">
  <!-- start class org.carrot2.util.annotations.AspectModified -->
  <class name="AspectModified"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Marker interface for applying to code elements that are modified using
 aspects to facilitate tracking.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.annotations.AspectModified -->
  <!-- start class org.carrot2.util.annotations.Immutable -->
  <class name="Immutable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Marker interface for classes that are immutable (once created, never change their state.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.annotations.Immutable -->
  <!-- start class org.carrot2.util.annotations.ThreadSafe -->
  <class name="ThreadSafe"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Marker interface for classes that can be used safely by more than one thread (concurrently).]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.annotations.ThreadSafe -->
</package>
<package name="org.carrot2.util.attribute">
  <!-- start class org.carrot2.util.attribute.AttributeValueSet -->
  <class name="AttributeValueSet" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AttributeValueSet" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link AttributeValueSet} with a <code>null</code> description
 and a <code>null</code> base attribute value set.
 
 @param label human-readable label for this attribute value set]]>
      </doc>
    </constructor>
    <constructor name="AttributeValueSet" type="java.lang.String, org.carrot2.util.attribute.AttributeValueSet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link AttributeValueSet} with a <code>null</code> description.
 
 @param label human-readable label for this attribute value set
 @param base the attribute value set this set should be based on.]]>
      </doc>
    </constructor>
    <constructor name="AttributeValueSet" type="java.lang.String, java.lang.String, org.carrot2.util.attribute.AttributeValueSet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty {@link AttributeValueSet}.
 
 @param label human-readable label for this attribute value set
 @param description human-readable description for this attribute value set, can be
            <code>null</code>
 @param base the attribute value set this set should be based on, can be
            <code>null</code>.]]>
      </doc>
    </constructor>
    <method name="getAttributeValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns value of the attribute with the provided <code>key</code>. Attribute values
 are resolved in the following order:
 <ul>
 <li>If this set contains a value for the attribute with given <code>key</code> set
 by {{@link #setAttributeValue(String, Object)} or {@link #setAttributeValues(Map)},
 the value is returned.</li>
 <li>Otherwise, if the base attribute value set is not <code>null</code>, attribute
 value is retrieved from the base set by calling the same method on it. If any of
 the base attribute sets in the hierarchy contains a value for the provided key,
 that value is returned.</li>
 <li>Otherwise, <code>null</code> is returned.</li>
 </ul>
 
 @param key key of the attribute for which value is to be returned
 @return value of the attribute or <code>null</code>.]]>
      </doc>
    </method>
    <method name="getAttributeValues" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns attribute values defined by this {@link AttributeValueSet} and all other
 {@link AttributeValueSet}s that this set is based on. The returned map is
 independent of this {@link AttributeValueSet}, so any modifications to that map
 will not be reflected in this {@link AttributeValueSet}.]]>
      </doc>
    </method>
    <method name="setAttributeValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets a <code>value</code> corresponding to the provided <code>key</code> in this
 attribute value set. If the set previously contained some value under the provided
 <code>key</code>, that value is returned. Values set using this method override
 values found in the base attribute sets of this set.
 
 @param key attribute key
 @param value attribute value
 @return previous value of the attribute or <code>null</code>]]>
      </doc>
    </method>
    <method name="setAttributeValues"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Copies all <code>values</code> to this attribute value set. If this attribute value
 set already contains mappings for some of the provided key, the mappings will be
 overwritten. Values set using this method override values found in the base
 attribute sets of this set.
 
 @param values values to be set on this attribute value set.]]>
      </doc>
    </method>
    <method name="getAttributeValues" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributeValueSet" type="org.carrot2.util.attribute.AttributeValueSet"/>
      <doc>
      <![CDATA[Returns attribute values from the provided {@link AttributeValueSet} or
 <code>null</code> if the provided {@link AttributeValueSet} is <code>null</code>.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="label" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Human-readable value of this attribute value set. <b>Only for read-only use.</b>]]>
      </doc>
    </field>
    <field name="description" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Human-readable description of this attribute value set. <b>Only for read-only use.</b>]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Maintains a named set of attribute values. Allows one {@link AttributeValueSet} (A) to
 be "based" on another {@link AttributeValueSet} (B), whereby the main
 {@link AttributeValueSet} (A) inherits all values from the base
 {@link AttributeValueSet} (B) and can override some of them. Any depth of the base
 attribute sets hierarchy is possible.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.attribute.AttributeValueSet -->
  <!-- start class org.carrot2.util.attribute.AttributeValueSets -->
  <class name="AttributeValueSets" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AttributeValueSets"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty collection of attribute value sets.]]>
      </doc>
    </constructor>
    <method name="addAttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="attributeValueSet" type="org.carrot2.util.attribute.AttributeValueSet"/>
      <doc>
      <![CDATA[Adds an {@link AttributeValueSet} to this collection.
 
 @param id unique identifier of the {@link AttributeValueSet} within the collection.
 @param attributeValueSet {@link AttributeValueSet} to be added]]>
      </doc>
    </method>
    <method name="addAttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="attributeValueSet" type="org.carrot2.util.attribute.AttributeValueSet"/>
      <param name="newLabel" type="java.lang.String"/>
      <param name="newDescription" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds an {@link AttributeValueSet} to this collection replacing its label and
 description. This method may sometimes be useful because {@link AttributeValueSet}s
 are immutable with respect to their label and description.
 
 @param id unique identifier of the {@link AttributeValueSet} within the collection.
 @param attributeValueSet {@link AttributeValueSet} to be added
 @param newLabel new label for the {@link AttributeValueSet}
 @param newDescription new description for the {@link AttributeValueSet}]]>
      </doc>
    </method>
    <method name="getAttributeValueSetIds" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns identifiers of all {@link AttributeValueSet}s in this collection.
 
 @return identifiers of all {@link AttributeValueSet}s in this collection.]]>
      </doc>
    </method>
    <method name="getDefaultAttributeValueSetId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the identifier of the default {@link AttributeValueSet} within this
 {@link AttributeValueSets}. The default identifier can be <code>null</code>.]]>
      </doc>
    </method>
    <method name="setDefaultAttributeValueSetId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultAttributeValueSetId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the default attribute value set id for this {@link AttributeValueSets}. An
 {@link AttributeValueSet} with this id must exist in this
 {@link AttributeValueSets}.]]>
      </doc>
    </method>
    <method name="getAttributeValueSet" return="org.carrot2.util.attribute.AttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the {@link AttributeValueSet} corresponding to the provided <code>id</code>
 or <code>null</code> if no {@link AttributeValueSet} corresponds to the
 <code>id</code>.
 
 @return the {@link AttributeValueSet} corresponding to the provided <code>id</code>
         or <code>null</code> if no {@link AttributeValueSet} corresponds to the
         <code>id</code>.]]>
      </doc>
    </method>
    <method name="getAttributeValueSet" return="org.carrot2.util.attribute.AttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <param name="useDefault" type="boolean"/>
      <doc>
      <![CDATA[Returns the {@link AttributeValueSet} corresponding to the provided <code>id</code>
 or the default {@link AttributeValueSet} (possibly <code>null</code>) if no
 {@link AttributeValueSet} corresponds to the <code>id</code>.
 
 @param id identifier of the {@link AttributeValueSet} to return
 @param useDefault if <code>true</code>, the default {@link AttributeValueSet} will
            be returned if the {@link AttributeValueSet} with the provided id does
            not exist.
 @return the {@link AttributeValueSet} corresponding to the provided <code>id</code>
         or the default {@link AttributeValueSet} (possibly <code>null</code>) if no
         {@link AttributeValueSet} corresponds to the <code>id</code>.]]>
      </doc>
    </method>
    <method name="getDefaultAttributeValueSet" return="org.carrot2.util.attribute.AttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default {@link AttributeValueSet} of this {@link AttributeValueSets} or
 the first available {@link AttributeValueSet} if
 {@link #getDefaultAttributeValueSetId()} is <code>null</code>. If this
 {@link AttributeValueSets} is empty, <code>null</code> will be returned.]]>
      </doc>
    </method>
    <method name="removeAttributeValueSet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the {@link AttributeValueSet} corresponding to the provided <code>id</code>
 from this collection. If any other {@link AttributeValueSet}s in this collection
 are based on the set being removed, the associations are corrected accordingly,
 i.e. sets based on the set being removed become based on the set the removed set is
 based on. Also, if the removed {@link AttributeValueSet} was the default,
 <code>null</code> will be set as this {@link AttributeValueSets}' default
 {@link AttributeValueSet}. If no {@link AttributeValueSet} corresponds to the
 provided <code>id</code>, no action is taken.
 
 @param id identifier of the {@link AttributeValueSet} to be removed]]>
      </doc>
    </method>
    <method name="getAttributeValueSetsBasedOn" return="java.util.Set&lt;org.carrot2.util.attribute.AttributeValueSet&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="baseAttributeValueSet" type="org.carrot2.util.attribute.AttributeValueSet"/>
      <doc>
      <![CDATA[Returns all {@link AttributeValueSet}s from this collection that are based,
 directly or indirectly, on the provided <code>baseAttributeValueSet</code>.
 
 @param baseAttributeValueSet the base attribute value set]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Serializes this collection of {@link AttributeValueSet}s to an XML stream.
 
 @param stream the stream to serialize this {@link AttributeValueSets} to. The stream
            will <strong>not</strong> be closed.
 @throws Exception in case of any problems with serialization]]>
      </doc>
    </method>
    <method name="deserialize" return="org.carrot2.util.attribute.AttributeValueSets"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Deserializes a collection of {@link AttributeValueSet}s from an XML stream.
 
 @param inputStream the {@link InputStream} to deserialize a
            {@link AttributeValueSets} from. The stream will <strong>not</strong> be
            closed.
 @return Deserialized collection of {@link AttributeValueSet}s
 @throws Exception is case of any problems with deserialization.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Maintains a collection of {@link AttributeValueSet}s and provides methods for
 serializing and deserializing attribute value sets from XML streams.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.attribute.AttributeValueSets -->
  <!-- start class org.carrot2.util.attribute.DefaultGroups -->
  <class name="DefaultGroups" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="WORD_FILTERING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CLUSTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LABELS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="QUERY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RESULT_INFO" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOCUMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SOURCE_PAGING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FILTERING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PREPROCESSING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PHRASE_EXTRACTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Default group names for {@link Group#value()}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.attribute.DefaultGroups -->
</package>
<package name="org.carrot2.util.pool">
  <!-- start class org.carrot2.util.pool.FixedSizePool -->
  <class name="FixedSizePool" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.pool.IParameterizedPool&lt;T, P&gt;"/>
    <constructor name="FixedSizePool" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param listSizePerKey Each key in the pool points to a list of instances. This
            field defines how many components are kept for each key.]]>
      </doc>
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objectInstantiationListener" type="org.carrot2.util.pool.IInstantiationListener&lt;T, P&gt;"/>
      <param name="objectActivationListener" type="org.carrot2.util.pool.IActivationListener&lt;T, P&gt;"/>
      <param name="objectPassivationListener" type="org.carrot2.util.pool.IPassivationListener&lt;T, P&gt;"/>
      <param name="objectDisposalListener" type="org.carrot2.util.pool.IDisposalListener&lt;T, P&gt;"/>
      <doc>
      <![CDATA[Initialize listeners.]]>
      </doc>
    </method>
    <method name="borrowObject" return="I extends T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;I&gt;"/>
      <param name="parameter" type="P"/>
      <exception name="InstantiationException" type="java.lang.InstantiationException"/>
      <exception name="IllegalAccessException" type="java.lang.IllegalAccessException"/>
    </method>
    <method name="returnObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An object pool storing hard references to a fixed number of instantiated objects at the
 given key. The objects are never released from the pool until {@link #dispose()} is
 called.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.pool.FixedSizePool -->
  <!-- start interface org.carrot2.util.pool.IActivationListener -->
  <interface name="IActivationListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="activate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
      <doc>
      <![CDATA[Called before object is handed in to the caller of
 {@link IParameterizedPool#borrowObject(Class, Object)}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Pooled object activation listener.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.pool.IActivationListener -->
  <!-- start interface org.carrot2.util.pool.IDisposalListener -->
  <interface name="IDisposalListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
      <doc>
      <![CDATA[Called before the object is disposed of.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Pooled object disposal listener.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.pool.IDisposalListener -->
  <!-- start interface org.carrot2.util.pool.IInstantiationListener -->
  <interface name="IInstantiationListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="objectInstantiated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
      <doc>
      <![CDATA[Called after the object gets instantiated.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Pooled object instantiation listener.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.pool.IInstantiationListener -->
  <!-- start interface org.carrot2.util.pool.IParameterizedPool -->
  <interface name="IParameterizedPool"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objectInstantiationListener" type="org.carrot2.util.pool.IInstantiationListener&lt;T, P&gt;"/>
      <param name="objectActivationListener" type="org.carrot2.util.pool.IActivationListener&lt;T, P&gt;"/>
      <param name="objectPassivationListener" type="org.carrot2.util.pool.IPassivationListener&lt;T, P&gt;"/>
      <param name="objectDisposalListener" type="org.carrot2.util.pool.IDisposalListener&lt;T, P&gt;"/>
      <doc>
      <![CDATA[Initializes the pool with a number of listeners. The appropriate listeners
 <b>must</b> be called at the relevant stages of a pooled object's life cycle.]]>
      </doc>
    </method>
    <method name="borrowObject" return="I extends T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;I&gt;"/>
      <param name="parameter" type="P"/>
      <exception name="InstantiationException" type="java.lang.InstantiationException"/>
      <exception name="IllegalAccessException" type="java.lang.IllegalAccessException"/>
      <doc>
      <![CDATA[Borrows an object from the pool. If no instance is available, a parameterless
 constructor should be used to create a new one.
 
 @param clazz class of object to be borrowed
 @param parameter additional parameter determining a possible sub type within the
            same class of objects being borrowed. A combination of class and
            parameter uniquely identifies a "class" (equivalence class) of pooled
            objects. The parameter is assumed to correctly implement the
            {@link Object#equals(Object)} and {@link Object#hashCode()} methods. The
            parameter can be <code>null</code>. The implementation must pass the
            parameter to all listeners when managing the life cycle of the pooled
            object. It is the callers responsibility to ensure that exactly the same
            value of the parameter is passed to the corresponding
            {@link #borrowObject(Class, Object)} and
            {@link #returnObject(Object, Object)} methods.]]>
      </doc>
    </method>
    <method name="returnObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
      <doc>
      <![CDATA[Returns an object to the pool.
 
 @param object object to return
 @param parameter parameter provided when borrowing the object. If the parameter was
            not <code>null</code> when borrowing the object, the same value will be
            passed here.]]>
      </doc>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Disposes of the pool. No objects can be borrowed from the pool after disposed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A parameterized pool of objects. Each borrowed object is characterized by its class and
 an arbitrary parameter. The [class, parameter] pair uniquely identifies a "class"
 (equivalence class) of pooled objects.
 <p>
 Please see {@link SoftUnboundedPool} for a reference implementation.
 </p>]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.pool.IParameterizedPool -->
  <!-- start interface org.carrot2.util.pool.IPassivationListener -->
  <interface name="IPassivationListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="passivate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
      <doc>
      <![CDATA[Called after the object is returned to the pool.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Pooled object passivation listener.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.pool.IPassivationListener -->
  <!-- start class org.carrot2.util.pool.SoftUnboundedPool -->
  <class name="SoftUnboundedPool" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.pool.IParameterizedPool&lt;T, P&gt;"/>
    <constructor name="SoftUnboundedPool"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objectInstantiationListener" type="org.carrot2.util.pool.IInstantiationListener&lt;T, P&gt;"/>
      <param name="objectActivationListener" type="org.carrot2.util.pool.IActivationListener&lt;T, P&gt;"/>
      <param name="objectPassivationListener" type="org.carrot2.util.pool.IPassivationListener&lt;T, P&gt;"/>
      <param name="objectDisposalListener" type="org.carrot2.util.pool.IDisposalListener&lt;T, P&gt;"/>
    </method>
    <method name="borrowObject" return="I extends T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;I&gt;"/>
      <param name="parameter" type="P"/>
      <exception name="InstantiationException" type="java.lang.InstantiationException"/>
      <exception name="IllegalAccessException" type="java.lang.IllegalAccessException"/>
    </method>
    <method name="returnObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="T"/>
      <param name="parameter" type="P"/>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An extremely simple, unbounded object pool. The pool can provide objects of may types,
 objects get created using parameterless constructors. The pool holds objects using
 {@link SoftReference}s, so they can be garbage collected when memory is needed.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.pool.SoftUnboundedPool -->
</package>
<package name="org.carrot2.util.resource">
  <!-- start class org.carrot2.util.resource.ClassLoaderLocator -->
  <class name="ClassLoaderLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="ClassLoaderLocator" type="java.lang.ClassLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Scan for resources relative to a given class loader (possibly in all of this
 loader's locations).]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ClassLoaderLocator -->
  <!-- start class org.carrot2.util.resource.ClassLoaderResource -->
  <class name="ClassLoaderResource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResource"/>
    <constructor name="ClassLoaderResource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ClassLoaderResource" type="java.lang.ClassLoader, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.util.resource.ClassLoaderResource"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Restores a {@link ClassLoaderResource} from a string, resolving against the current context
 class loader.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A resource loaded using a class loader. This loader provides cached content of
 returned resources and closes the stream handle in {@link #open()}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ClassLoaderResource -->
  <!-- start class org.carrot2.util.resource.ClassLocator -->
  <class name="ClassLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="ClassLocator" type="java.lang.Class&lt;?&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Looks up resources relative to the given class.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ClassLocator -->
  <!-- start class org.carrot2.util.resource.ClassResource -->
  <class name="ClassResource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResource"/>
    <constructor name="ClassResource" type="java.lang.Class&lt;?&gt;, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Override the default open-from-URL method so that we don't lock the source JAR.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A resource relative to a class. This resource provider caches the content of returned
 resources and closes the stream handle in {@link #open()}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ClassResource -->
  <!-- start class org.carrot2.util.resource.ContextClassLoaderLocator -->
  <class name="ContextClassLoaderLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="ContextClassLoaderLocator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Looks up resources in the thread's context class loader.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ContextClassLoaderLocator -->
  <!-- start class org.carrot2.util.resource.DirLocator -->
  <class name="DirLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="DirLocator" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the locator using the given directory. If the argument is null or a
 non-existent folder, the locator will return an empty set of resources.]]>
      </doc>
    </constructor>
    <constructor name="DirLocator" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the locator using the given path. If the argument is null or a
 non-existent folder, the locator will return an empty set of resources.]]>
      </doc>
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Looks up resources in a folder.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.DirLocator -->
  <!-- start class org.carrot2.util.resource.FileResource -->
  <class name="FileResource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResource"/>
    <constructor name="FileResource" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFile" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.util.resource.FileResource"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[A local filesystem resource. This loader provides cached content of
 returned resources and closes the underlying stream handle in {@link #open()}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.FileResource -->
  <!-- start interface org.carrot2.util.resource.IResource -->
  <interface name="IResource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.attribute.IAssignable"/>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Open an input stream to the resource. Specific implementations may cache and close
 the underlying stream, but such behavior is not required by this interface. Please
 refer to the documentation of specific implementations for details.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Resource abstraction. Override {@link Object#toString()} to have meaningful logging
 information at runtime.]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.resource.IResource -->
  <!-- start interface org.carrot2.util.resource.IResourceLocator -->
  <interface name="IResourceLocator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
      <doc>
      <![CDATA[Locate all matching resources and return their {@link IResource} handles.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Override hash code to return consistent hash code depending on all locations
 scanned by this locator.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Override equals to return <code>true</code> for locators scanning an identical
 set of locations.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An abstraction layer for a single resource lookup source. A single source may combine
 several actual locations (a class loader, for example).
 
 @see ResourceLookup]]>
    </doc>
  </interface>
  <!-- end interface org.carrot2.util.resource.IResourceLocator -->
  <!-- start class org.carrot2.util.resource.PrefixDecoratorLocator -->
  <class name="PrefixDecoratorLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="PrefixDecoratorLocator" type="org.carrot2.util.resource.IResourceLocator, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Prefixes all resource names with a given prefix at lookup time and
 delegates to another resource locator.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.PrefixDecoratorLocator -->
  <!-- start class org.carrot2.util.resource.ResourceCache -->
  <class name="ResourceCache" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ResourceCache" type="com.google.common.base.Function&lt;org.carrot2.util.resource.ResourceLookup, V&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a resource cache with the provided value maker.]]>
      </doc>
    </constructor>
    <method name="get" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceLookup" type="org.carrot2.util.resource.ResourceLookup"/>
      <param name="recreate" type="boolean"/>
      <doc>
      <![CDATA[Acquire a resource from the resource lookup.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A static cache of immutable, reusable resources associated with a given
 {@link ResourceLookup}. Roughly the same thing can be achieved with a
 {@link MapMaker}, but we want some logging in place too.
 
 @param <V> Resource value class.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ResourceCache -->
  <!-- start class org.carrot2.util.resource.ResourceLookup -->
  <class name="ResourceLookup" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ResourceLookup" type="org.carrot2.util.resource.ResourceLookup.Location[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a lookup object based on the provided array of predefined
 locations.]]>
      </doc>
    </constructor>
    <constructor name="ResourceLookup" type="org.carrot2.util.resource.IResourceLocator[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a lookup object based on the provided array of resource locators (in order).]]>
      </doc>
    </constructor>
    <constructor name="ResourceLookup" type="java.util.List&lt;org.carrot2.util.resource.IResourceLocator&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create a lookup object based on the provided list of resource locators (in order).]]>
      </doc>
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
      <doc>
      <![CDATA[Scans all resource locators and returns matching resources.
 
 @param resource Resource name.
 @return Returns an empty array if no resource matched the given name.]]>
      </doc>
    </method>
    <method name="getFirst" return="org.carrot2.util.resource.IResource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
      <doc>
      <![CDATA[Scans through resource locators and returns the first matching resource.
 
 @param resource Resource name.
 @return Returns null if no resource was found for the given name.]]>
      </doc>
    </method>
    <method name="getLocators" return="org.carrot2.util.resource.IResourceLocator[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a copy of the internal locators array.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Resource loading utility scanning one or more {@link IResourceLocator} locations. If
 all locators provided to this class are thread-safe, this class is also thread-safe.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ResourceLookup -->
  <!-- start class org.carrot2.util.resource.ResourceLookup.Location -->
  <class name="ResourceLookup.Location" extends="java.lang.Enum&lt;org.carrot2.util.resource.ResourceLookup.Location&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.carrot2.util.resource.ResourceLookup.Location[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.util.resource.ResourceLookup.Location"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="locator" type="org.carrot2.util.resource.IResourceLocator"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The locator associated with the location.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A set of predefined locations.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ResourceLookup.Location -->
  <!-- start class org.carrot2.util.resource.ServletContextLocator -->
  <class name="ServletContextLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResourceLocator"/>
    <constructor name="ServletContextLocator" type="javax.servlet.ServletContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="org.carrot2.util.resource.IResource[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resource" type="java.lang.String"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="target" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[{@link IResourceLocator} looking for resources in a web application's execution
 context.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.ServletContextLocator -->
  <!-- start class org.carrot2.util.resource.URLResource -->
  <class name="URLResource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResource"/>
    <constructor name="URLResource" type="java.net.URL"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class opens a connection to a resource pointed to by an URI. Note that JAR
 resources <b>should not</b> be accessed this way because the default handler caches
 {@link JarFile} instances and thus locks the file. This resource provider caches the
 content of returned resources and closes the underlying stream handle in
 {@link #open()}.
 
 @see <a href="http://issues.carrot2.org/browse/CARROT-143">Issue CARROT-143</a>]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.URLResource -->
  <!-- start class org.carrot2.util.resource.URLResourceWithParams -->
  <class name="URLResourceWithParams" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.carrot2.util.resource.IResource"/>
    <constructor name="URLResourceWithParams" type="java.net.URL"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an instance with the provided <code>url</code>;]]>
      </doc>
    </constructor>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Opens the underlying URL <strong>without</strong> attribute substitution.]]>
      </doc>
    </method>
    <method name="open" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Opens the underlying URL substituting attribute place holders beforehand.
 
 @param attributes values of attributes to be replaced in the corresponding place
            holders. If a place holder is of form: <code>${attributeX}</code>, it
            will be replaced by the value found (if any) in the attributes map under
            the <code>attributeX</code> key.]]>
      </doc>
    </method>
    <method name="substituteAttributes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameterizedURL" type="java.lang.String"/>
      <param name="attributes" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Performs attribute substitution.]]>
      </doc>
    </method>
    <method name="containsAttributePlaceholder" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="urlTemplate" type="java.lang.String"/>
      <param name="attributePlaceholderName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns <code>true</code> if the <code>urlTemplate</code> contains the
 <code>attributePlaceholderName</code>.]]>
      </doc>
    </method>
    <method name="formatAttributePlaceholder" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributePlaceholderName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns attribute place holder based on the attribute name.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.carrot2.util.resource.URLResourceWithParams"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[A {@link IResource} implementation that allows URLs to be parameterized. The attribute
 place holders are of format: <code>${attribute}</code> and will be replaced before the
 contents is fetched from the URL when the {@link #open(Map)} method is used.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.resource.URLResourceWithParams -->
</package>
<package name="org.carrot2.util.tests">
  <!-- start class org.carrot2.util.tests.CarrotTestCase -->
  <class name="CarrotTestCase" extends="com.carrotsearch.randomizedtesting.RandomizedTest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CarrotTestCase"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="assertThat" return="org.fest.assertions.BigDecimalAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.math.BigDecimal"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.BooleanAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="boolean"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.BooleanAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Boolean"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.BooleanArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="boolean[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ImageAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.awt.image.BufferedImage"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ByteAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="byte"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ByteAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Byte"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ByteArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="byte[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.CharAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="char"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.CharAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Character"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.CharArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="char[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.CollectionAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.util.Collection&lt;?&gt;"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ListAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.util.List&lt;?&gt;"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.DoubleAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="double"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.DoubleAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Double"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.DoubleArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="double[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.FileAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.io.File"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.FloatAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="float"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.FloatAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Float"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.FloatArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="float[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.IntAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="int"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.IntAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Integer"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.IntArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="int[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.IteratorAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Iterable&lt;?&gt;"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.IteratorAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.util.Iterator&lt;?&gt;"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.LongAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="long"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.LongAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Long"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.LongArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="long[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.MapAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.util.Map&lt;?, ?&gt;"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ObjectAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Object"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ObjectArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Object[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ShortAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="short"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ShortAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Short"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ShortArrayAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="short[]"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.StringAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.String"/>
    </method>
    <method name="assertThat" return="T extends org.fest.assertions.AssertExtension"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="assertion" type="T extends org.fest.assertions.AssertExtension"/>
    </method>
    <method name="assertThat" return="org.fest.assertions.ThrowableAssert"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actual" type="java.lang.Throwable"/>
    </method>
    <field name="classRules" type="org.junit.rules.TestRule"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Class {@link TestRule}s.]]>
      </doc>
    </field>
    <field name="ruleChain" type="org.junit.rules.TestRule"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Test {@link TestRule}s.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Base class for Carrot2 test classes. Contains common hooks and setups.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.tests.CarrotTestCase -->
  <!-- start class org.carrot2.util.tests.SuiteResultInfoWriter -->
  <class name="SuiteResultInfoWriter" extends="org.junit.runner.notification.RunListener"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SuiteResultInfoWriter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="testRunStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testIgnored"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testAssumptionFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testRunFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="org.junit.runner.Result"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[Writes plain-text information about the suite's tests and their results. For
 aggregating into a summary later on.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.tests.SuiteResultInfoWriter -->
  <!-- start class org.carrot2.util.tests.UsesExternalServices -->
  <class name="UsesExternalServices"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[A test group that indicates a given test uses external APIs or services (some of which
 may not be available outside of the scope of Carrot2 build servers).]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.tests.UsesExternalServices -->
</package>
<package name="org.carrot2.util.xslt">
  <!-- start class org.carrot2.util.xslt.NopURIResolver -->
  <class name="NopURIResolver" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.xml.transform.URIResolver"/>
    <constructor name="NopURIResolver"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="resolve" return="javax.xml.transform.Source"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="href" type="java.lang.String"/>
      <param name="base" type="java.lang.String"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
    </method>
    <doc>
    <![CDATA[A no-op {@link URIResolver}.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.xslt.NopURIResolver -->
  <!-- start class org.carrot2.util.xslt.StylesheetErrorListener -->
  <class name="StylesheetErrorListener" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.xml.transform.ErrorListener"/>
    <constructor name="StylesheetErrorListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="warning"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
    </method>
    <method name="fatalError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
      <doc>
      <![CDATA[Unrecoverable errors cause an exception to be rethrown.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An {@link ErrorListener} that reacts to errors when parsing (compiling) the stylesheet.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.xslt.StylesheetErrorListener -->
  <!-- start class org.carrot2.util.xslt.TemplatesPool -->
  <class name="TemplatesPool" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TemplatesPool"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Creates a {@link TemplatesPool} with caching enabled.]]>
      </doc>
    </constructor>
    <constructor name="TemplatesPool" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Check for required facilities. If not available, an exception will be thrown.]]>
      </doc>
    </constructor>
    <method name="getIdentityTransformerHandler" return="javax.xml.transform.sax.TransformerHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TransformerConfigurationException" type="javax.xml.transform.TransformerConfigurationException"/>
      <doc>
      <![CDATA[@return returns the identity transformer handler.]]>
      </doc>
    </method>
    <method name="getTemplate" return="javax.xml.transform.Templates"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Retrieves a previously stored template, if available.]]>
      </doc>
    </method>
    <method name="addTemplate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="template" type="javax.xml.transform.Templates"/>
      <doc>
      <![CDATA[Add a new template to the pool. Addition is quite costly as it replaces the
 internal {@link #stylesheets} {@link HashMap}.]]>
      </doc>
    </method>
    <method name="compileTemplate" return="javax.xml.transform.Templates"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="systemId" type="java.lang.String"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Compile a {@link Templates} from a given system identifier. The template is not
 added to the pool, a manual call to {@link #addTemplate(String, Templates)} is
 required.]]>
      </doc>
    </method>
    <method name="compileTemplate" return="javax.xml.transform.Templates"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <exception name="SAXException" type="org.xml.sax.SAXException"/>
      <doc>
      <![CDATA[Compile a {@link Templates} from a given stream. The template is not added to the
 pool automatically.]]>
      </doc>
    </method>
    <method name="newTransformerHandler" return="javax.xml.transform.sax.TransformerHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="template" type="javax.xml.transform.Templates"/>
      <exception name="TransformerConfigurationException" type="javax.xml.transform.TransformerConfigurationException"/>
      <doc>
      <![CDATA[Return a new {@link TransformerHandler} based on a given precompiled
 {@link Templates}. The handler {@link Transformer}'s {@link ErrorListener} is set
 to {@link TransformerErrorListener} to raise exceptions and give proper warnings.]]>
      </doc>
    </method>
    <method name="newTransformer" return="javax.xml.transform.Transformer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="javax.xml.transform.Templates"/>
      <exception name="TransformerConfigurationException" type="javax.xml.transform.TransformerConfigurationException"/>
      <doc>
      <![CDATA[Return a new {@link Transformer}.
 
 @see #newTransformerHandler(Templates)]]>
      </doc>
    </method>
    <field name="TEMPLATE_CACHING_PROPERTY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Global system property disabling template caching. This property can also be set at
 runtime (after the pool is initialized).]]>
      </doc>
    </field>
    <field name="tFactory" type="javax.xml.transform.sax.SAXTransformerFactory"
      transient="false" volatile="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@link SAXTransformerFactory} capable of producing SAX-based transformers.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A pool of precompiled XSLT stylesheets ({@link Templates}). Caching can be disabled
 via constructor parameter or via setting a system property:
 
 <pre>
 template.caching
 </pre>
 
 to <code>false</code>.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.xslt.TemplatesPool -->
  <!-- start class org.carrot2.util.xslt.TransformerErrorListener -->
  <class name="TransformerErrorListener" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.xml.transform.ErrorListener"/>
    <constructor name="TransformerErrorListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="warning"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
    </method>
    <method name="fatalError"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="javax.xml.transform.TransformerException"/>
      <exception name="TransformerException" type="javax.xml.transform.TransformerException"/>
      <doc>
      <![CDATA[Unrecoverable errors cause an exception to be rethrown.]]>
      </doc>
    </method>
    <field name="exception" type="javax.xml.transform.TransformerException"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[We store the exception internally as a workaround to xalan, which reports
 {@link TransformerException} as {@link RuntimeException} (wrapped).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[An {@link ErrorListener} that reacts to errors when transforming (applying) a
 stylesheet.]]>
    </doc>
  </class>
  <!-- end class org.carrot2.util.xslt.TransformerErrorListener -->
</package>

</api>
