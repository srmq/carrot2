<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
                 "http://www.docbook.org/xml/5.0/dtd/docbook.dtd" [
  <!ENTITY % local SYSTEM "local-entities.ent">
  <!ENTITY % custom SYSTEM "custom-entities.ent">
  %local;
  %custom;
]>
<chapter xml:id="chapter.development" xmlns="http://docbook.org/ns/docbook" version="5.0">
  <title>&C2; Development</title>
  <subtitle>Contributing to &C2;</subtitle>

  <para>
    This chapter contains information for &C2; developers.
  </para>

  <section xml:id="section.release">
    <title>Stable release procedure</title>

    <para>
      Each &C2; release should be performed according to the following procedure:
    </para>

    <orderedlist>
      <listitem>
        <formalpara>
          <title>Precondition: resolved issues</title>
          <para>
            All issues related to the software to be released scheduled (fix for) for
            the release must be resolved.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Precondition: successful continuous integration builds</title>
          <para>
            The status of the all builds must be successful.
          </para>

          <para>
            For bugfixing releases, check appropriate build on the server. 
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Update source code headers and line endings</title>
          <para>
            <programlisting><![CDATA[ant prerelease]]></programlisting>
            Commit changes to trunk.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Review Maven dependencies are in sync</title>
          <para>
            <programlisting><![CDATA[(cd etc/maven/poms; mvn dependency:tree )]]></programlisting>
            Review Maven POMs to ensure dependencies are in sync with the JAR versions
            in the repository.
          </para>
        </formalpara>
      </listitem>
      
      <listitem>
        <formalpara>
          <title>Run all the tests and distribution target</title>
          <para>
            <programlisting><![CDATA[git clean -xfd # removes any local files, including settings!
ant -Dlocal.properties=local.properties.example -Dtools.dir=... clean dist]]></programlisting>
            Everything should pass. Extra tools repo will be required.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Generate and verify JavaDocs</title>
          <para>
            <programlisting><![CDATA[ant javadoc # (already in dist)]]></programlisting>
            Review JavaDoc documentation, provide missing public and protected
            members description, provide missing package descriptions.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Generate and verify &C2; Manual</title>
          <para>
            <programlisting><![CDATA[ant doc # (already in dist)]]></programlisting>
            Review &C2; Manual, modify or add content related to the features implemented
            in the new release.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Review static code analysis reports</title>
          <para>
            <programlisting><![CDATA[ant reports]]></programlisting>
            Review and fix reasonably-looking flaws.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Update version number strings</title>

          <para>
            Update <filename>carrot2.version</filename> 
            and remove <filename>-SNAPSHOT</filename> suffix. This number will be embedded in 
            distribution file names, JavaDoc page title and other version-sensitive places. 
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Generate API XML file and API differences.</title>
          <para>
            Pick the previous version to compare against (typically the previous version on the branch).
            Generate API XML and a comparison report:
            <programlisting><![CDATA[ant clean jdiff-compare -Dversion.previous=x.y.z]]></programlisting>
          </para>

          <para>
            Copy API XML report for future comparisons:
            <programlisting><![CDATA[cp tmp/compatibility-report/*.xml etc/jdiff/]]></programlisting>
          </para>

          <para>
            Commit changes. Push.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Trigger stable build in Bamboo.</title>
          <para>
            Go to Carrot2 Bamboo (requires admin privileges) and trigger a stable build.
            If the build is successful, all distribution files should be available 
            in the download directory. This is the "candidate" release.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Verify the distribution files</title>
          <para>
            Download, unpack and run each distribution file to make sure there are no obvious
            release blockers.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Create an annotated release tag and push changes.</title>
          <para>
            <programlisting><![CDATA[git tag -a release/x.y.z -m "Release x.y.z"]]></programlisting>
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Trigger stable build in Bamboo.</title>
          <para>
            Go to Carrot2 Bamboo (requires admin privileges) and trigger a stable build again. 
            This is the final release.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Publish maven artefacts.</title>
          <para>
            First,
            <programlisting><![CDATA[ant maven.deploy]]></programlisting>
            this pushes a release to SonaType's staging area (appropriate sonatype server configuration in 
            <filename>~/.m2/settings.xml</filename> and GPG keys in <filename>~/.gnupg/</filename> required). 
            Log in to SonaType, close the release
            bundle and publish. This can be done later from the tagged revision.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Bump version number strings</title>

          <para>
            Bump version number to the next anticipated version and add
            <filename>-SNAPSHOT</filename>.
            Commit changes.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Update JIRA</title>
          
          <para>
            Close issues scheduled for the release being made, release the version in JIRA, 
            create a next version in JIRA.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Release on github and update downloads</title>
          
          <para>
            Staging server has build files (<filename>/srv/vhosts/get.carrot2.org/head/</filename>)
            upload them to github (<filename>https://github.com/carrot2/carrot2/releases</filename>) and create release news for the tag.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Update project website</title>
          
          <para>
            <orderedlist>
              <listitem>
                <formalpara>
                  <title>Release notes</title>
                  <para>
                    Add a page named <filename>release-[version]-notes</filename> that
                    lists new features, major bug fixes and improvements introduced in the
                    new release.
                  </para>
                </formalpara>
              </listitem>
                
              <listitem>
                <formalpara>
                  <title>Release note history</title>
                  <para>
                    Add release date and link to the release's JIRA issues on the
                    <filename>release-notes</filename> page. 
                  </para>
                </formalpara>
              </listitem>
            </orderedlist>
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Circulate release news</title>
          <para>
            If appropriate, circulate release news to:
            
            <orderedlist>
              <listitem><para>&C2; mailing lists</para></listitem>
            </orderedlist>
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Update Wikipedia page</title>
          <para>
            If appropriate, update <link xlink:href="http://en.wikipedia.org/wiki/Carrot2">&C2; page on Wikipedia</link>.
          </para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Consider upgrading &C2; in dependent projects</title>
          <para>
            If reasonable, upgrade &C2; dependency in other known projects, such as
            Apache Solr.
          </para>
        </formalpara>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="section.versioning">
    <title>Versioning scheme</title>

    <para>
      &C2; uses version identifiers consisting of three, dot-separated numbers: 
      <varname>product-line</varname>.<varname>major</varname>.<varname>minor</varname>. This scheme
      is modelled after Maven's POM versions and has the following interpretation:
    </para>

    <variablelist>
      <varlistentry>
        <term>product-line</term>
        <listitem><para>Indicates long-term product line identifier. This number
        will not change frequently as it reflects major changes in the internal
        architecture or shipped software components. Reading release notes is 
        a must, the internal programming interfaces very likely changed significantly.</para></listitem>
      </varlistentry>
  
      <varlistentry>
        <term>major</term>
        <listitem><para>Major revision number changes indicate addition of significant new 
        features, performance optimizations or new front-end software components added to &C2;.
        Reading release notes is highly recommended because programming interfaces may change
        slightly from major to major revision.</para></listitem>
      </varlistentry>
      
      <varlistentry>
        <term>minor</term>
        <listitem><para>Minor revision numbers are reserved for shipped product updates and
        bug fixes. These may include critical bug fixes as well as patches
        increasing performance, but not changing the programming interfaces. Reading
        release notes is recommended, but a drop-in upgrade should work without
        any extra work.</para></listitem>
      </varlistentry>
    </variablelist>

    <para>
      The git repository is organized so that the <varname>master</varname> branch tracks the development
      of the next <emphasis>major revision</emphasis>. Bugfix branches track minor revisions
      of already shipped versions. A tag is created for each shipped version. Branch
      and tag names follow the naming conventions below.
    </para>

    <variablelist>
      <varlistentry>
        <term>master</term>
        <listitem><para>The master branch is equivalent to the next major software revision
        being developed and is not numbered explicitly, but corresponds to
        branch <varname>vX.Y.0</varname>, where <varname>Y</varname> is
        the next major revision to be shipped. It is possible to create a minor release
        off the trunk directly if the commit log only includes bug fixes.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term>bugfix/X.Y.Z</term>
        <listitem><para>A branch named <varname>bugfix/X.Y.z</varname> tracks the product shipped as
        <varname>X.Y.z</varname>, where the <varname>z</varname> component is the next 
        minor release to be shipped from this branch. Once shipped, a tag should
        be created.
        </para></listitem>
      </varlistentry>

      <varlistentry>
        <term>release/X.Y.Z</term>
        <listitem><para>A tag named <varname>release/X.Y.Z</varname> should be created for
        exactly that development branch at the time of shipment.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="section.qa">
    <title>QA check list</title>
    
    <para>
      This a very quick quality assurance check list to run through before stable 
      releases. This list also serves as some guide line for further automation
      of acceptance tests.
    </para>
    
    <note>
      <para>
        Note that this list does not contain many checks for the &WA;, &DCS; and &JA;
        as these are fairly well tested during builds (webtests, smoke-tests).
      </para>
    </note>
    
    <orderedlist>
      <listitem>
        <para>
          For each supported platform you can test, check that &DCW;:
          
          <orderedlist spacing="compact">
            <listitem>
              <para>launches without errors in the error log</para>
            </listitem>
            
            <listitem>
              <para>executes and cluters a remote search query without errors</para>
            </listitem>
            
            <listitem>
              <para>
                executes and clusters a Lucene query without errors (we've had a bug
                that caused the Lucene directory attribute editor to disappear, 
                hence this step).
              </para>
            </listitem>
            
            <listitem>
              <para>can edit a clustering algorithm's attribute</para>
            </listitem>
            
            <listitem>
              <para>shows both cluster visualizations</para>
            </listitem>
            
            <listitem>
              <para>executes clustering algorithm benchmarks</para>
            </listitem>
          </orderedlist>
        </para>
      </listitem>
      
      <listitem>
        <para>
          Check that a the &DCS; starts up correctly using command line on Windows and 
          Linux. More acceptance tests are performed during builds (but starting &DCS; 
          using the WAR file instead of command line).
        </para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
