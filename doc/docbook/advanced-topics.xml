<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
                 "http://www.docbook.org/xml/5.0/dtd/docbook.dtd" [
  <!ENTITY % local SYSTEM "local-entities.ent">
  <!ENTITY % custom SYSTEM "custom-entities.ent">
  %local;
  %custom;
]>
<chapter xml:id="chapter.advanced-topics" version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:product="http://www.carrot2.org">
  <title>Advanced topics</title>
  <subtitle>Building and running &C2; from source code</subtitle>

  <para>
    This chapter discusses more advanced usage scenarios of &C2; such as 
    running &C2; applications in Eclipse and building &C2; from source code.
  </para>

  <section xml:id="section.advanced-topics.running-in-eclipse">
    <title>Running &C2; in Eclipse IDE</title>
    
    <section xml:id="section.advanced-topics.running-in-eclipse.workbench">
      <title>Running &DCW; in Eclipse IDE</title>
      
      <para>
        To run &DCW; in Eclipse IDE (version 3.4 or higher required):
      </para>
      
      <orderedlist>
        <listitem>
          <para>
            <link linkend="section.integration.setting-up-carrot2-sources-in-eclipse">Set up &C2; source code in your Eclipse IDE.</link>
          </para>
        </listitem>
        
        <listitem>
          <para>
            Choose <guilabel>Window</guilabel> &gt; <guilabel>Preferences</guilabel> and
            then <guilabel>Run/Debug</guilabel> &gt; <guilabel>String substitution</guilabel>.
            Add a <code>temp_workspaces</code> variable pointing to a an existing disk 
            directory where the Workbench's workspace should be created.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Choose <guilabel>Run</guilabel> &gt; <guilabel>Run Configurations...</guilabel> from
            the main menu and run the <varname>Workbench</varname> configuration.
          </para>
          
          <figure xml:id="figure.workbench-run-configuration">
            <title>Workbench Run Configuration</title>
            <mediaobject>
              <imageobject role="html">
                <imagedata format="PNG" fileref="img/workbench-run-configuration.png" />
              </imageobject>
            </mediaobject>  
          </figure>
        </listitem>
      </orderedlist>
    </section>
    
    <section xml:id="section.advanced-topics.running-in-eclipse.webapp">
      <title>Running &WA; in Eclipse IDE</title>
      
      <para>
        To run &DCW; in Eclipse IDE:
      </para>
      
      <orderedlist>
        <listitem>
          <para>
            <link linkend="section.integration.setting-up-carrot2-sources-in-eclipse">Set up &C2; source code in your Eclipse IDE.</link>
          </para>
        </listitem>

        <listitem>
          <para>
            Choose <guilabel>Run</guilabel> &gt; <guilabel>External Tools</guilabel> &gt; 
            <guilabel>External Tools Configurations...</guilabel> from
            the main menu and run the <varname>Web Application Setup [carrot2]</varname> configuration.
            This will preprocess various configuration files required by the web application.
          </para>
        </listitem>

        <listitem>
          <para>
            Choose <guilabel>Run</guilabel> &gt; <guilabel>Run Configurations...</guilabel> from
            the main menu and run the <varname>Web Application Runner [carrot2]</varname> configuration.
          </para>
        </listitem>

        <listitem>
          <para>
            Point your browser to <link xlink:href="">http://localhost:8080</link> to access
            the running web application.
          </para>
        </listitem>
      </orderedlist>        
    </section>
  </section>
  
  <section xml:id="section.advanced-topics.building-from-source-code">
    <title>Building &C2; from source code</title>
    
    <para>
      To build &C2; applications from source code, you will need Java Software Development 
      Kit (Java SDK) version 1.8 or higher and Apache Ant version 1.9.3 or higher.
      You can chcek out the latest &C2; source code using git:
    </para>

    <programlisting><![CDATA[git clone git://github.com/carrot2/carrot2.git]]></programlisting>
    
    <section xml:id="section.advanced-topics.building-from-source-code.workbench">
      <title>Building &DCW;</title>
      
      <para>
        To build &DCW; from source code:
      </para>
      
      <orderedlist>
        <listitem>
          <para>
            Download Eclipse Target Platform from <link xlink:href="http://download.carrot2.org/eclipse" />
            and extract to some local folder.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Copy <filename>local.properties.example</filename> from &C2; checkout folder 
            to <filename>local.properties</filename> in the same folder. In
            <filename>local.properties</filename> edit the <tag>target.platform</tag>
            property to point to the Eclipse Target Platform you have downloaded.
          </para>

          <important>
            <para>
              The folder pointed to by <tag>target.platform</tag> must have the <filename>eclipse/</filename>
              folder inside. 
            </para>
          </important>
          
          <para>
            You may also change the <tag>configs</tag> property to
            match the platform you want to build &DCW; for or rely on auto-detection.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Run:

            <programlisting><![CDATA[ant workbench]]></programlisting>

            to build &DCW; binaries.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Go to the <filename>tmp/ workbench/ tmp/ carrot2-workbench</filename>
            folder in the &C2; checkout dir and run &DCW;.
          </para>
        </listitem>
      </orderedlist>
      </section>

    <section xml:id="section.advanced-topics.building-from-source-code.webapp">
      <title>Building &WA;</title>
      
      <para>
        To build &WA; from source code:
      </para>
      
      <orderedlist>
        <listitem>
          <para>
            Run:
            
            <programlisting><![CDATA[ant webapp]]></programlisting>
            
            in the main &PROD; checkout directory.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Go to the <filename>tmp/webapp/</filename>
            folder in the &C2; checkout dir where you will find the web application WAR file.
          </para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="section.advanced-topics.using-dcs-with-curl">
    <title>Using &DCS; with <command>curl</command></title>
    
    <para>
      You can use <command>curl</command> to post requests to the &DCS; 
      <xref linkend="figure.dcs-curl-from-document-source" /> shows how to use <command>curl</command>
      to query an external document source and cluster the results using the DCS.
      <xref linkend="figure.dcs-curl-from-local-file" /> shows how to cluster documents
      from an XML file in <link linkend="section.architecture.input-xml">&C2; format</link> using the DCS.
      Please see the <filename>examples/curl</filename> directory of the &DCS; distribution
      archive for more <command>curl</command> DCS invocation examples.
    </para>
      
    <figure xml:id="figure.dcs-curl-from-document-source">
      <title>Using DCS and curl to cluster data from document source</title>
      <programlisting><![CDATA[curl http://localhost/dcs/rest \
     -F "dcs.source=etools" \
     -F "query=test" \
     -o result.xml]]></programlisting>      
    </figure>
      
    <figure xml:id="figure.dcs-curl-from-local-file">
      <title>Using DCS and curl to cluster data from document source</title>
      <programlisting><![CDATA[curl http://localhost/dcs/rest \
     -F "dcs.c2stream=@documents-in-carrot2-format.xml" \
     -o result.xml]]></programlisting>      
    </figure>
    
    <tip>
      <para>
        You can download <command>curl</command> for Windows from 
        <link xlink:href="http://curl.haxx.se/latest.cgi?curl=win32-nossl" />.
      </para>
    </tip>
  </section>
  
  <section xml:id="section.advanced-topics.http-proxies">
    <title>Working with HTTP proxies</title>
    
    <para>
    If your server or development machine connects to HTTP servers via a HTTP
    proxy, you can most of &C2; document source implementations
    to take this information into account by defining the following global
    system properties:
    </para>

    <variablelist>
      <varlistentry>
        <term>http.proxyhost</term>
        <listitem><para>URL of the HTTP proxy (numeric or full address, but
        without the port number).</para></listitem>
      </varlistentry>
  
      <varlistentry>
        <term>http.proxyport</term>
        <listitem><para>Proxy server's port number.</para></listitem>
      </varlistentry>
    </variablelist>
    
    <para>
      Two sources that currently do not support the above properties are: 
      Bing5DocumentSource and OpenSearchDocumentSource.
    </para>
  </section>
  
  <section xml:id="section.http-authentication">
    <title>HTTP BASIC or DIGEST authentication</title>

    <para>
    If your document source initiates HTTP connections to a server protected
    with BASIC or DIGEST HTTP authentication, you will have to pass the username
    and password to the application so that such connections can be established.
    Define the following global system properties (they are picked up once,
    when the Controller is created):
    </para>

    <variablelist>
      <varlistentry>
        <term>http.auth.username</term>
        <listitem><para>Username for BASIC or DIGEST authentication.</para></listitem>
      </varlistentry>
  
      <varlistentry>
        <term>http.auth.password</term>
        <listitem><para>Password for BASIC or DIGEST authentication.</para></listitem>
      </varlistentry>
    </variablelist>
    
    <para>
      Note that, in general, it's better not to have any HTTP authentication at all since
      it's a very weak form of protection anyway and only increases network traffic (two HTTP 
      requests may have to be made in order to fetch the remote resource).
    </para>
  </section>  
</chapter>
